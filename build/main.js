"use strict";var fs=Object.defineProperty;var Lr=e=>{throw TypeError(e)};var ds=(e,t,n)=>t in e?fs(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n;var H=(e,t,n)=>ds(e,typeof t!="symbol"?t+"":t,n),$n=(e,t,n)=>t.has(e)||Lr("Cannot "+n);var O=(e,t,n)=>($n(e,t,"read from private field"),n?n.call(e):t.get(e)),ke=(e,t,n)=>t.has(e)?Lr("Cannot add the same private member more than once"):t instanceof WeakSet?t.add(e):t.set(e,n),Ee=(e,t,n,r)=>($n(e,t,"write to private field"),r?r.call(e,n):t.set(e,n),n),sn=(e,t,n)=>($n(e,t,"access private method"),n);const J=require("obsidian");function vr(){const e=new Map,t=new WeakMap;function n(i,a){e.has(i)||e.set(i,a)}function r(i){if(t.has(i))return t.get(i);const a=new Map;for(const[l,u]of e){const f=u.init(i);a.set(l,f??u)}return t.set(i,a),a}function s(i){const a=t.get(i);if(a){for(const l of a.values())typeof l.destroy=="function"&&l.destroy();a.clear(),t.delete(i)}}return{register:n,createRegistry:r,destroyRegistry:s}}const hr=vr();function Rt(e,t){hr.register(e,t)}function vs(e){return hr.createRegistry(e)}function hs(e){hr.destroyRegistry(e)}const gr=vr();function bn(e,t){gr.register(e,t)}function gs(e){return gr.createRegistry(e)}function ps(e){gr.destroyRegistry(e)}const pr=vr();function wn(e,t){pr.register(e,t)}function ms(e){return pr.createRegistry(e)}function _s(e){pr.destroyRegistry(e)}class xn{constructor(t){H(this,"handlers",new Map);this.host=t}static init(t){t.eventBus=new xn(t)}destroy(){this.handlers.clear()}on(t,n){this.handlers.has(t)||this.handlers.set(t,new Set),this.handlers.get(t).add(n)}emit(t,n){const r=this.handlers.get(t);if(!r)return;const s=arguments.length===2;for(const i of r)s?i(n):i()}off(t,n){var r;(r=this.handlers.get(t))==null||r.delete(n)}}Rt("eventBus",xn);bn("eventBus",xn);wn("eventBus",xn);const ys="rnbakabnr/9/1c5c1/p1p1p1p1p/9/9/P1P1P1P1P/1C5C1/9/RNBAKABNR w",Fe={k:"将",a:"士",b:"象",r:"车",n:"马",c:"砲",p:"卒",K:"帅",A:"仕",B:"相",R:"俥",N:"傌",C:"炮",P:"兵"};function zn(e){var d;const t=bs(e);let n=!1,r=(d=e.match(/([rnbakcpRNBAKCP1-9]+\/){9}[rnbakcpRNBAKCP1-9]+(?:\s+[wb])?/))==null?void 0:d[0];r?n=!0:r="rnbakabnr/9/1c5c1/p1p1p1p1p/9/9/P1P1P1P1P/1C5C1/9/RNBAKABNR";const{board:s,turn:i}=er(r),a=i==="b"?"black":"red",l=e.match(/\b[A-Z]\d-[A-Z]\d\b/g)||[];let u=s.map(h=>[...h]);const f=l.map(h=>{const g=ws(h,u);return g.WXF=ri(g,u),u[g.to.x][g.to.y]=u[g.from.x][g.from.y],u[g.from.x][g.from.y]=null,g});return{haveFEN:n,board:s,PGN:f,firstTurn:a,options:t}}function er(e){const t=Array.from({length:10},()=>Array(9).fill(null)),[n,r]=e.trim().split(/\s+/);return n.split("/").forEach((i,a)=>{let l=0;for(const u of i)/[1-9]/.test(u)?l+=parseInt(u):/[a-zA-Z]/.test(u)&&(t[l][a]=u,l++)}),{board:t,turn:r}}function bs(e){const t={};return[{key:"protected",regex:/\b(protected|P)\s*[:：]\s*(true|false)\s*/i},{key:"rotated",regex:/\b(rotated|r)\s*[:：]\s*(true|false)\s*/i}].forEach(({key:r,regex:s})=>{const i=e.match(s);i&&(t[r]=i[2].toLowerCase()==="true")}),t}function ws(e,t){const[n,r]=e.split("-"),s=n.charCodeAt(0)-65,i=9-parseInt(n[1]),a=r.charCodeAt(0)-65,l=9-parseInt(r[1]),u={x:s,y:i},f={x:a,y:l},d=t[s][i];return d?{type:d,from:u,to:f,ICCS:e}:{from:u,to:f,ICCS:e}}function ni(e){if(e.from.x==null||e.from.y==null||e.to.x==null||e.to.y==null)throw new Error("Invalid move: x and y must be numbers");const t=s=>{if(s<0||s>25)throw new Error(`x must be between 0 and 25, got ${s}`);return String.fromCharCode(65+s)},n=`${t(e.from.x)}${9-e.from.y}`,r=`${t(e.to.x)}${9-e.to.y}`;return`${n}-${r}`}function ri(e,t){const n={horizontal:"平",forward:"进",backward:"退"},r=["一","二","三","四","五","六","七","八","九"],s=["１","２","３","４","５","６","７","８","９"],{from:i,to:a}=e,l=t[i.x][i.y];if(!l)return"";const u=l===l.toUpperCase(),f=u?r:s,d=Array.from({length:9},()=>Array(10).fill(null));let h=i.x,g=i.y,c=a.x,v=a.y;if(u){for(let b=0;b<9;b++)for(let P=0;P<10;P++)d[b][P]=t[8-b][9-P];h=8-i.x,g=9-i.y,c=8-a.x,v=9-a.y}else for(let b=0;b<9;b++)for(let P=0;P<10;P++)d[b][P]=t[b][P];let _="",m=[];for(let b=0;b<10;b++)d[h][b]===l&&m.push(b);if(m.length===1)_=Fe[l]+f[h];else if(m.length===2){const b=m.indexOf(g);b===0?_="后"+Fe[l]:b===1&&(_="前"+Fe[l])}else if(m.length===3){const b=m.indexOf(g);b===0?_="后"+Fe[l]:b===1?_="中"+Fe[l]:b===2&&(_="前"+Fe[l])}let y,x;if(h===c){const b=v-g;y=b>0?n.forward:n.backward,x=f[Math.abs(b)-1]}else g===v?(y=n.horizontal,x=f[c]):(y=g<v?n.forward:n.backward,x=f[c]);return`${_}${y}${x}`}const ii={init(e){const t=e.eventBus;t.on("load",n=>{switch(n){case"xq":const{haveFEN:r,board:s,PGN:i,firstTurn:a,options:l}=zn(e.source);e.haveFEN=r,e.board=s,e.PGN=i,e.currentTurn=a,e.currentStep=0,e.options=l;break;case"fen":e.board=zn("").board,e.currentTurn="red";break}}),t.on("full",()=>{e.board=zn("").board})}};Rt("source",ii);bn("source",ii);const Ae=2,mr=4,Ln=8,kn=16,lt=32,Qt=64,si=128,Be=256,Bn=512,fe=1024,Ie=2048,Nt=4096,Ue=8192,Dt=16384,_r=32768,yr=65536,Ur=1<<17,xs=1<<18,br=1<<19,wr=1<<20,tr=1<<21,xr=1<<22,Mt=1<<23,Ct=Symbol("$state"),ai=Symbol("legacy props"),ks=Symbol(""),kr=new class extends Error{constructor(){super(...arguments);H(this,"name","StaleReactionError");H(this,"message","The reaction that called `getAbortSignal()` was re-run or destroyed")}},oi=3,un=8,li=!1;var Nr=Array.isArray,Ns=Array.prototype.indexOf,Pr=Array.from,In=Object.defineProperty,Vt=Object.getOwnPropertyDescriptor,ui=Object.getOwnPropertyDescriptors,Ps=Object.prototype,Ss=Array.prototype,Sr=Object.getPrototypeOf,Gr=Object.isExtensible;function Es(e){return e()}function An(e){for(var t=0;t<e.length;t++)e[t]()}function Ts(){var e,t,n=new Promise((r,s)=>{e=r,t=s});return{promise:n,resolve:e,reject:t}}function Ms(e,t){if(Array.isArray(e))return e;if(!(Symbol.iterator in e))return Array.from(e);const n=[];for(const r of e)if(n.push(r),n.length===t)break;return n}function ci(e){return e===this.v}function fi(e,t){return e!=e?t==t:e!==t||e!==null&&typeof e=="object"||typeof e=="function"}function di(e){return!fi(e,this.v)}function Cs(){throw new Error("https://svelte.dev/e/await_outside_boundary")}function Bs(e){throw new Error("https://svelte.dev/e/lifecycle_outside_component")}function Is(){throw new Error("https://svelte.dev/e/async_derived_orphan")}function As(e){throw new Error("https://svelte.dev/e/effect_in_teardown")}function Rs(){throw new Error("https://svelte.dev/e/effect_in_unowned_derived")}function Ds(e){throw new Error("https://svelte.dev/e/effect_orphan")}function Os(){throw new Error("https://svelte.dev/e/effect_update_depth_exceeded")}function Fs(){throw new Error("https://svelte.dev/e/hydration_failed")}function Xs(e){throw new Error("https://svelte.dev/e/props_invalid_value")}function Ls(){throw new Error("https://svelte.dev/e/state_descriptors_fixed")}function Us(){throw new Error("https://svelte.dev/e/state_prototype_fixed")}function Gs(){throw new Error("https://svelte.dev/e/state_unsafe_mutation")}let Jt=!1,Ys=!1;function Vs(){Jt=!0}const Un=1,Gn=2,vi=4,qs=8,js=16,$s=1,zs=2,Hs=4,Ws=8,Ks=16,Zs=1,Qs=2,hi="[",Er="[!",Tr="]",qt={},me=Symbol(),Js="http://www.w3.org/1999/xhtml";let ie=null;function Rn(e){ie=e}function Ye(e,t=!1,n){ie={p:ie,c:null,e:null,s:e,x:null,l:Jt&&!t?{s:null,u:null,$:[]}:null}}function Ve(e){var t=ie,n=t.e;if(n!==null){t.e=null;for(var r of n)Ri(r)}return e!==void 0&&(t.x=e),ie=t.p,e??{}}function en(){return!Jt||ie!==null&&ie.l===null}function Yn(e){console.warn("https://svelte.dev/e/hydration_mismatch")}let $=!1;function st(e){$=e}let K;function Ge(e){if(e===null)throw Yn(),qt;return K=e}function Vn(){return Ge(Pt(K))}function X(e){if($){if(Pt(K)!==null)throw Yn(),qt;K=e}}function nr(){for(var e=0,t=K;;){if(t.nodeType===un){var n=t.data;if(n===Tr){if(e===0)return t;e-=1}else(n===hi||n===Er)&&(e+=1)}var r=Pt(t);t.remove(),t=r}}function gi(e){if(!e||e.nodeType!==un)throw Yn(),qt;return e.data}function Ut(e){if(typeof e!="object"||e===null||Ct in e)return e;const t=Sr(e);if(t!==Ps&&t!==Ss)return e;var n=new Map,r=Nr(e),s=gt(0),i=At,a=l=>{if(At===i)return l();var u=q,f=At;ze(null),zr(i);var d=l();return ze(u),zr(f),d};return r&&n.set("length",gt(e.length)),new Proxy(e,{defineProperty(l,u,f){(!("value"in f)||f.configurable===!1||f.enumerable===!1||f.writable===!1)&&Ls();var d=n.get(u);return d===void 0?d=a(()=>{var h=gt(f.value);return n.set(u,h),h}):A(d,f.value,!0),!0},deleteProperty(l,u){var f=n.get(u);if(f===void 0){if(u in l){const d=a(()=>gt(me));n.set(u,d),Hn(s)}}else A(f,me),Hn(s);return!0},get(l,u,f){var c;if(u===Ct)return e;var d=n.get(u),h=u in l;if(d===void 0&&(!h||(c=Vt(l,u))!=null&&c.writable)&&(d=a(()=>{var v=Ut(h?l[u]:me),_=gt(v);return _}),n.set(u,d)),d!==void 0){var g=o(d);return g===me?void 0:g}return Reflect.get(l,u,f)},getOwnPropertyDescriptor(l,u){var f=Reflect.getOwnPropertyDescriptor(l,u);if(f&&"value"in f){var d=n.get(u);d&&(f.value=o(d))}else if(f===void 0){var h=n.get(u),g=h==null?void 0:h.v;if(h!==void 0&&g!==me)return{enumerable:!0,configurable:!0,value:g,writable:!0}}return f},has(l,u){var g;if(u===Ct)return!0;var f=n.get(u),d=f!==void 0&&f.v!==me||Reflect.has(l,u);if(f!==void 0||G!==null&&(!d||(g=Vt(l,u))!=null&&g.writable)){f===void 0&&(f=a(()=>{var c=d?Ut(l[u]):me,v=gt(c);return v}),n.set(u,f));var h=o(f);if(h===me)return!1}return d},set(l,u,f,d){var b;var h=n.get(u),g=u in l;if(r&&u==="length")for(var c=f;c<h.v;c+=1){var v=n.get(c+"");v!==void 0?A(v,me):c in l&&(v=a(()=>gt(me)),n.set(c+"",v))}if(h===void 0)(!g||(b=Vt(l,u))!=null&&b.writable)&&(h=a(()=>gt(void 0)),A(h,Ut(f)),n.set(u,h));else{g=h.v!==me;var _=a(()=>Ut(f));A(h,_)}var m=Reflect.getOwnPropertyDescriptor(l,u);if(m!=null&&m.set&&m.set.call(d,f),!g){if(r&&typeof u=="string"){var y=n.get("length"),x=Number(u);Number.isInteger(x)&&x>=y.v&&A(y,x+1)}Hn(s)}return!0},ownKeys(l){o(s);var u=Reflect.ownKeys(l).filter(h=>{var g=n.get(h);return g===void 0||g.v!==me});for(var[f,d]of n)d.v!==me&&!(f in l)&&u.push(f);return u},setPrototypeOf(){Us()}})}var Yr,pi,mi,_i;function rr(){if(Yr===void 0){Yr=window,pi=/Firefox/.test(navigator.userAgent);var e=Element.prototype,t=Node.prototype,n=Text.prototype;mi=Vt(t,"firstChild").get,_i=Vt(t,"nextSibling").get,Gr(e)&&(e.__click=void 0,e.__className=void 0,e.__attributes=null,e.__style=void 0,e.__e=void 0),Gr(n)&&(n.__t=void 0)}}function xt(e=""){return document.createTextNode(e)}function Xe(e){return mi.call(e)}function Pt(e){return _i.call(e)}function V(e,t){if(!$)return Xe(e);var n=Xe(K);if(n===null)n=K.appendChild(xt());else if(t&&n.nodeType!==oi){var r=xt();return n==null||n.before(r),Ge(r),r}return Ge(n),n}function Bt(e,t){if(!$){var n=Xe(e);return n instanceof Comment&&n.data===""?Pt(n):n}return K}function F(e,t=1,n=!1){let r=$?K:e;for(var s;t--;)s=r,r=Pt(r);if(!$)return r;if(n&&(r==null?void 0:r.nodeType)!==oi){var i=xt();return r===null?s==null||s.after(i):r.before(i),Ge(i),i}return Ge(r),r}function Mr(e){e.textContent=""}function yi(){return!1}const ea=new WeakMap;function ta(e){var t=G;if(t===null)return q.f|=Mt,e;if(t.f&_r)Cr(e,t);else{if(!(t.f&si))throw!t.parent&&e instanceof Error&&bi(e),e;t.b.error(e)}}function Cr(e,t){for(;t!==null;){if(t.f&si)try{t.b.error(e);return}catch{}t=t.parent}throw e instanceof Error&&bi(e),e}function bi(e){const t=ea.get(e);t&&(In(e,"message",{value:t.message}),In(e,"stack",{value:t.stack}))}let cn=[],ir=[];function wi(){var e=cn;cn=[],An(e)}function na(){var e=ir;ir=[],An(e)}function Br(e){cn.length===0&&queueMicrotask(wi),cn.push(e)}function ra(){cn.length>0&&wi(),ir.length>0&&na()}function ia(){for(var e=G.b;e!==null&&!e.has_pending_snippet();)e=e.parent;return e===null&&Cs(),e}function Nn(e){var t=Ae|Ie,n=q!==null&&q.f&Ae?q:null;return G===null||n!==null&&n.f&Be?t|=Be:G.f|=br,{ctx:ie,deps:null,effects:null,equals:ci,f:t,fn:e,reactions:null,rv:0,v:me,wv:0,parent:n??G,ac:null}}function sa(e,t){let n=G;n===null&&Is();var r=n.b,s=void 0,i=dn(me),a=null,l=!q;return _a(()=>{try{var u=e()}catch(c){u=Promise.reject(c)}var f=()=>u;s=(a==null?void 0:a.then(f,f))??Promise.resolve(u),a=s;var d=ce,h=r.pending;l&&(r.update_pending_count(1),h||d.increment());const g=(c,v=void 0)=>{a=null,h||d.activate(),v?v!==kr&&(i.f|=Mt,vn(i,v)):(i.f&Mt&&(i.f^=Mt),vn(i,c)),l&&(r.update_pending_count(-1),h||d.decrement()),Ni()};if(s.then(g,c=>g(null,c||"unknown")),d)return()=>{queueMicrotask(()=>d.neuter())}}),new Promise(u=>{function f(d){function h(){d===s?u(i):f(s)}d.then(h,h)}f(s)})}function aa(e){const t=Nn(e);return Ti(t),t}function nt(e){const t=Nn(e);return t.equals=di,t}function xi(e){var t=e.effects;if(t!==null){e.effects=null;for(var n=0;n<t.length;n+=1)at(t[n])}}function oa(e){for(var t=e.parent;t!==null;){if(!(t.f&Ae))return t;t=t.parent}return null}function Ir(e){var t,n=G;kt(oa(e));try{xi(e),t=Bi(e)}finally{kt(n)}return t}function ki(e){var t=Ir(e);if(e.equals(t)||(e.v=t,e.wv=Mi()),!Ot)if(_t!==null)_t.set(e,e.v);else{var n=(yt||e.f&Be)&&e.deps!==null?Nt:fe;ge(e,n)}}function la(e,t,n){const r=en()?Nn:nt;if(t.length===0){n(e.map(r));return}var s=ce,i=G,a=ua(),l=ia();Promise.all(t.map(u=>sa(u))).then(u=>{s==null||s.activate(),a();try{n([...e.map(r),...u])}catch(f){i.f&Dt||Cr(f,i)}s==null||s.deactivate(),Ni()}).catch(u=>{l.error(u)})}function ua(){var e=G,t=q,n=ie;return function(){kt(e),ze(t),Rn(n)}}function Ni(){kt(null),ze(null),Rn(null)}const En=new Set;let ce=null,_t=null,Vr=new Set,Gt=[],qn=null,sr=!1;var mn,Ht,Wt,pt,_n,yn,Et,Kt,mt,rt,Tt,ot,Pi,Si,ar;const Xr=class Xr{constructor(){ke(this,ot);ke(this,mn,new Map);ke(this,Ht,new Map);ke(this,Wt,new Set);ke(this,pt,0);ke(this,_n,null);ke(this,yn,!1);ke(this,Et,[]);ke(this,Kt,[]);ke(this,mt,[]);ke(this,rt,[]);ke(this,Tt,[]);H(this,"skipped_effects",new Set)}capture(t,n){O(this,Ht).has(t)||O(this,Ht).set(t,n),O(this,mn).set(t,t.v)}activate(){ce=this}deactivate(){ce=null;for(const t of Vr)if(Vr.delete(t),t(),ce!==null)break}neuter(){Ee(this,yn,!0)}flush(){Gt.length>0?this.flush_effects():sn(this,ot,ar).call(this),ce===this&&(O(this,pt)===0&&En.delete(this),this.deactivate())}flush_effects(){var t=jt;sr=!0;try{var n=0;for(jr(!0);Gt.length>0;){if(n++>1e3){var r,s;ca()}sn(this,ot,Pi).call(this,Gt),It.clear()}}finally{sr=!1,jr(t),qn=null}}increment(){Ee(this,pt,O(this,pt)+1)}decrement(){if(Ee(this,pt,O(this,pt)-1),O(this,pt)===0){for(const t of O(this,mt))ge(t,Ie),bt(t);for(const t of O(this,rt))ge(t,Ie),bt(t);for(const t of O(this,Tt))ge(t,Ie),bt(t);Ee(this,mt,[]),Ee(this,rt,[]),this.flush()}else this.deactivate()}add_callback(t){O(this,Wt).add(t)}settled(){return(O(this,_n)??Ee(this,_n,Ts())).promise}static ensure(t=!0){if(ce===null){const n=ce=new Xr;En.add(ce),t&&queueMicrotask(()=>{ce===n&&n.flush()})}return ce}};mn=new WeakMap,Ht=new WeakMap,Wt=new WeakMap,pt=new WeakMap,_n=new WeakMap,yn=new WeakMap,Et=new WeakMap,Kt=new WeakMap,mt=new WeakMap,rt=new WeakMap,Tt=new WeakMap,ot=new WeakSet,Pi=function(t){var i;Gt=[];var n=null;if(En.size>1){n=new Map,_t=new Map;for(const[a,l]of O(this,mn))n.set(a,{v:a.v,wv:a.wv}),a.v=l;for(const a of En)if(a!==this)for(const[l,u]of O(a,Ht))n.has(l)||(n.set(l,{v:l.v,wv:l.wv}),l.v=u)}for(const a of t)sn(this,ot,Si).call(this,a);if(O(this,Et).length===0&&O(this,pt)===0){var r=O(this,mt),s=O(this,rt);Ee(this,mt,[]),Ee(this,rt,[]),Ee(this,Tt,[]),sn(this,ot,ar).call(this),qr(r),qr(s),(i=O(this,_n))==null||i.resolve()}else{for(const a of O(this,mt))ge(a,fe);for(const a of O(this,rt))ge(a,fe);for(const a of O(this,Tt))ge(a,fe)}if(n){for(const[a,{v:l,wv:u}]of n)a.wv<=u&&(a.v=l);_t=null}for(const a of O(this,Et))$t(a);for(const a of O(this,Kt))$t(a);Ee(this,Et,[]),Ee(this,Kt,[])},Si=function(t){var d;t.f^=fe;for(var n=t.first;n!==null;){var r=n.f,s=(r&(lt|Qt))!==0,i=s&&(r&fe)!==0,a=i||(r&Ue)!==0||this.skipped_effects.has(n);if(!a&&n.fn!==null){if(s)n.f^=fe;else if(r&mr)O(this,rt).push(n);else if(Pn(n))if(r&xr){var l=(d=n.b)!=null&&d.pending?O(this,Kt):O(this,Et);l.push(n)}else n.f&kn&&O(this,Tt).push(n),$t(n);var u=n.first;if(u!==null){n=u;continue}}var f=n.parent;for(n=n.next;n===null&&f!==null;)n=f.next,f=f.parent}},ar=function(){if(!O(this,yn))for(const t of O(this,Wt))t();O(this,Wt).clear()};let fn=Xr;function E(e){var t;const n=fn.ensure(!1);for(;;){if(ra(),Gt.length===0)return n===ce&&n.flush(),qn=null,t;n.flush_effects()}}function ca(){try{Os()}catch(e){Cr(e,qn)}}function qr(e){var t=e.length;if(t!==0){for(var n=0;n<t;n++){var r=e[n];if(!(r.f&(Dt|Ue))&&Pn(r)){var s=Dn;if($t(r),r.deps===null&&r.first===null&&r.nodes_start===null&&(r.teardown===null?Xi(r):r.fn=null),Dn>s&&r.f&wr)break}}for(;n<t;n+=1)bt(e[n])}}function bt(e){for(var t=qn=e;t.parent!==null;){t=t.parent;var n=t.f;if(sr&&t===G&&n&kn)return;if(n&(Qt|lt)){if(!(n&fe))return;t.f^=fe}}Gt.push(t)}const It=new Map;function dn(e,t){var n={f:0,v:e,reactions:null,equals:ci,rv:0,wv:0};return n}function gt(e,t){const n=dn(e);return Ti(n),n}function j(e,t=!1,n=!0){var s;const r=dn(e);return t||(r.equals=di),Jt&&n&&ie!==null&&ie.l!==null&&((s=ie.l).s??(s.s=[])).push(r),r}function A(e,t,n=!1){q!==null&&(!$e||q.f&Ur)&&en()&&q.f&(Ae|kn|xr|Ur)&&!(Pe!=null&&Pe.includes(e))&&Gs();let r=n?Ut(t):t;return vn(e,r)}function vn(e,t){if(!e.equals(t)){var n=e.v;Ot?It.set(e,t):It.set(e,n),e.v=t,fn.ensure().capture(e,n),e.f&Ae&&(e.f&Ie&&Ir(e),ge(e,e.f&Be?Nt:fe)),e.wv=Mi(),Ei(e,Ie),en()&&G!==null&&G.f&fe&&!(G.f&(lt|Qt))&&(De===null?fa([e]):De.push(e))}return t}function Hn(e){A(e,e.v+1)}function Ei(e,t){var n=e.reactions;if(n!==null)for(var r=en(),s=n.length,i=0;i<s;i++){var a=n[i],l=a.f;l&Ie||!r&&a===G||(ge(a,t),l&(fe|Be)&&(l&Ae?Ei(a,Nt):bt(a)))}}let jt=!1;function jr(e){jt=e}let Ot=!1;function $r(e){Ot=e}let q=null,$e=!1;function ze(e){q=e}let G=null;function kt(e){G=e}let Pe=null;function Ti(e){q!==null&&(Pe===null?Pe=[e]:Pe.push(e))}let Ne=null,Me=0,De=null;function fa(e){De=e}let Dn=1,hn=0,At=hn;function zr(e){At=e}let yt=!1;function Mi(){return++Dn}function Pn(e){var h;var t=e.f;if(t&Ie)return!0;if(t&Nt){var n=e.deps,r=(t&Be)!==0;if(n!==null){var s,i,a=(t&Bn)!==0,l=r&&G!==null&&!yt,u=n.length;if((a||l)&&(G===null||!(G.f&Dt))){var f=e,d=f.parent;for(s=0;s<u;s++)i=n[s],(a||!((h=i==null?void 0:i.reactions)!=null&&h.includes(f)))&&(i.reactions??(i.reactions=[])).push(f);a&&(f.f^=Bn),l&&d!==null&&!(d.f&Be)&&(f.f^=Be)}for(s=0;s<u;s++)if(i=n[s],Pn(i)&&ki(i),i.wv>e.wv)return!0}(!r||G!==null&&!yt)&&ge(e,fe)}return!1}function Ci(e,t,n=!0){var r=e.reactions;if(r!==null&&!(Pe!=null&&Pe.includes(e)))for(var s=0;s<r.length;s++){var i=r[s];i.f&Ae?Ci(i,t,!1):t===i&&(n?ge(i,Ie):i.f&fe&&ge(i,Nt),bt(i))}}function Bi(e){var v;var t=Ne,n=Me,r=De,s=q,i=yt,a=Pe,l=ie,u=$e,f=At,d=e.f;Ne=null,Me=0,De=null,yt=(d&Be)!==0&&($e||!jt||q===null),q=d&(lt|Qt)?null:e,Pe=null,Rn(e.ctx),$e=!1,At=++hn,e.ac!==null&&(e.ac.abort(kr),e.ac=null);try{e.f|=tr;var h=(0,e.fn)(),g=e.deps;if(Ne!==null){var c;if(On(e,Me),g!==null&&Me>0)for(g.length=Me+Ne.length,c=0;c<Ne.length;c++)g[Me+c]=Ne[c];else e.deps=g=Ne;if(!yt||d&Ae&&e.reactions!==null)for(c=Me;c<g.length;c++)((v=g[c]).reactions??(v.reactions=[])).push(e)}else g!==null&&Me<g.length&&(On(e,Me),g.length=Me);if(en()&&De!==null&&!$e&&g!==null&&!(e.f&(Ae|Nt|Ie)))for(c=0;c<De.length;c++)Ci(De[c],e);return s!==null&&s!==e&&(hn++,De!==null&&(r===null?r=De:r.push(...De))),e.f&Mt&&(e.f^=Mt),h}catch(_){return ta(_)}finally{e.f^=tr,Ne=t,Me=n,De=r,q=s,yt=i,Pe=a,Rn(l),$e=u,At=f}}function da(e,t){let n=t.reactions;if(n!==null){var r=Ns.call(n,e);if(r!==-1){var s=n.length-1;s===0?n=t.reactions=null:(n[r]=n[s],n.pop())}}n===null&&t.f&Ae&&(Ne===null||!Ne.includes(t))&&(ge(t,Nt),t.f&(Be|Bn)||(t.f^=Bn),xi(t),On(t,0))}function On(e,t){var n=e.deps;if(n!==null)for(var r=t;r<n.length;r++)da(e,n[r])}function $t(e){var t=e.f;if(!(t&Dt)){ge(e,fe);var n=G,r=jt;G=e,jt=!0;try{t&kn?ya(e):Fi(e),Oi(e);var s=Bi(e);e.teardown=typeof s=="function"?s:null,e.wv=Dn;var i;li&&Ys&&e.f&Ie&&e.deps}finally{jt=r,G=n}}}async function on(){await Promise.resolve(),E()}function o(e){var t=e.f,n=(t&Ae)!==0;if(q!==null&&!$e){var r=G!==null&&(G.f&Dt)!==0;if(!r&&!(Pe!=null&&Pe.includes(e))){var s=q.deps;if(q.f&tr)e.rv<hn&&(e.rv=hn,Ne===null&&s!==null&&s[Me]===e?Me++:Ne===null?Ne=[e]:(!yt||!Ne.includes(e))&&Ne.push(e));else{(q.deps??(q.deps=[])).push(e);var i=e.reactions;i===null?e.reactions=[q]:i.includes(q)||i.push(q)}}}else if(n&&e.deps===null&&e.effects===null){var a=e,l=a.parent;l!==null&&!(l.f&Be)&&(a.f^=Be)}if(Ot){if(It.has(e))return It.get(e);if(n){a=e;var u=a.v;return(a.f&fe||Ii(a))&&(u=Ir(a)),It.set(a,u),u}}else if(n){if(a=e,_t!=null&&_t.has(a))return _t.get(a);Pn(a)&&ki(a)}if(e.f&Mt)throw e.v;return e.v}function Ii(e){if(e.v===me)return!0;if(e.deps===null)return!1;for(const t of e.deps)if(It.has(t)||t.f&Ae&&Ii(t))return!0;return!1}function S(e){var t=$e;try{return $e=!0,e()}finally{$e=t}}const va=-7169;function ge(e,t){e.f=e.f&va|t}function D(e){if(!(typeof e!="object"||!e||e instanceof EventTarget)){if(Ct in e)or(e);else if(!Array.isArray(e))for(let t in e){const n=e[t];typeof n=="object"&&n&&Ct in n&&or(n)}}}function or(e,t=new Set){if(typeof e=="object"&&e!==null&&!(e instanceof EventTarget)&&!t.has(e)){t.add(e),e instanceof Date&&e.getTime();for(let r in e)try{or(e[r],t)}catch{}const n=Sr(e);if(n!==Object.prototype&&n!==Array.prototype&&n!==Map.prototype&&n!==Set.prototype&&n!==Date.prototype){const r=ui(n);for(let s in r){const i=r[s].get;if(i)try{i.call(e)}catch{}}}}}function Ai(e){G===null&&q===null&&Ds(),q!==null&&q.f&Be&&G===null&&Rs(),Ot&&As()}function ha(e,t){var n=t.last;n===null?t.last=t.first=e:(n.next=e,e.prev=n,t.last=e)}function He(e,t,n,r=!0){var s=G;s!==null&&s.f&Ue&&(e|=Ue);var i={ctx:ie,deps:null,nodes_start:null,nodes_end:null,f:e|Ie,first:null,fn:t,last:null,next:null,parent:s,b:s&&s.b,prev:null,teardown:null,transitions:null,wv:0,ac:null};if(n)try{$t(i),i.f|=_r}catch(u){throw at(i),u}else t!==null&&bt(i);var a=n&&i.deps===null&&i.first===null&&i.nodes_start===null&&i.teardown===null&&(i.f&br)===0;if(!a&&r&&(s!==null&&ha(i,s),q!==null&&q.f&Ae)){var l=q;(l.effects??(l.effects=[])).push(i)}return i}function ga(e){const t=He(Ln,null,!1);return ge(t,fe),t.teardown=e,t}function Fn(e){Ai();var t=G.f,n=!q&&(t&lt)!==0&&(t&_r)===0;if(n){var r=ie;(r.e??(r.e=[])).push(e)}else return Ri(e)}function Ri(e){return He(mr|wr,e,!1)}function pa(e){return Ai(),He(Ln|wr,e,!0)}function ma(e){fn.ensure();const t=He(Qt,e,!0);return(n={})=>new Promise(r=>{n.outro?Ar(t,()=>{at(t),r(void 0)}):(at(t),r(void 0))})}function gn(e){return He(mr,e,!1)}function he(e,t){var n=ie,r={effect:null,ran:!1,deps:e};n.l.$.push(r),r.effect=Sn(()=>{e(),!r.ran&&(r.ran=!0,S(t))})}function tn(){var e=ie;Sn(()=>{for(var t of e.l.$){t.deps();var n=t.effect;n.f&fe&&ge(n,Nt),Pn(n)&&$t(n),t.ran=!1}})}function _a(e){return He(xr|br,e,!0)}function Sn(e,t=0){return He(Ln|t,e,!0)}function W(e,t=[],n=[]){la(t,n,r=>{He(Ln,()=>e(...r.map(o)),!0)})}function Di(e,t=0){var n=He(kn|t,e,!0);return n}function Zt(e,t=!0){return He(lt,e,!0,t)}function Oi(e){var t=e.teardown;if(t!==null){const n=Ot,r=q;$r(!0),ze(null);try{t.call(null)}finally{$r(n),ze(r)}}}function Fi(e,t=!1){var s;var n=e.first;for(e.first=e.last=null;n!==null;){(s=n.ac)==null||s.abort(kr);var r=n.next;n.f&Qt?n.parent=null:at(n,t),n=r}}function ya(e){for(var t=e.first;t!==null;){var n=t.next;t.f&lt||at(t),t=n}}function at(e,t=!0){var n=!1;(t||e.f&xs)&&e.nodes_start!==null&&e.nodes_end!==null&&(ba(e.nodes_start,e.nodes_end),n=!0),Fi(e,t&&!n),On(e,0),ge(e,Dt);var r=e.transitions;if(r!==null)for(const i of r)i.stop();Oi(e);var s=e.parent;s!==null&&s.first!==null&&Xi(e),e.next=e.prev=e.teardown=e.ctx=e.deps=e.fn=e.nodes_start=e.nodes_end=e.ac=null}function ba(e,t){for(;e!==null;){var n=e===t?null:Pt(e);e.remove(),e=n}}function Xi(e){var t=e.parent,n=e.prev,r=e.next;n!==null&&(n.next=r),r!==null&&(r.prev=n),t!==null&&(t.first===e&&(t.first=r),t.last===e&&(t.last=n))}function Ar(e,t){var n=[];Rr(e,n,!0),Li(n,()=>{at(e),t&&t()})}function Li(e,t){var n=e.length;if(n>0){var r=()=>--n||t();for(var s of e)s.out(r)}else t()}function Rr(e,t,n){if(!(e.f&Ue)){if(e.f^=Ue,e.transitions!==null)for(const a of e.transitions)(a.is_global||n)&&t.push(a);for(var r=e.first;r!==null;){var s=r.next,i=(r.f&yr)!==0||(r.f&lt)!==0;Rr(r,t,i?n:!1),r=s}}}function Dr(e){Ui(e,!0)}function Ui(e,t){if(e.f&Ue){e.f^=Ue,e.f&fe||(ge(e,Ie),bt(e));for(var n=e.first;n!==null;){var r=n.next,s=(n.f&yr)!==0||(n.f&lt)!==0;Ui(n,s?t:!1),n=r}if(e.transitions!==null)for(const i of e.transitions)(i.is_global||t)&&i.in()}}function wa(e){$&&Xe(e)!==null&&Mr(e)}let Hr=!1;function xa(){Hr||(Hr=!0,document.addEventListener("reset",e=>{Promise.resolve().then(()=>{var t;if(!e.defaultPrevented)for(const n of e.target.elements)(t=n.__on_r)==null||t.call(n)})},{capture:!0}))}function Gi(e){var t=q,n=G;ze(null),kt(null);try{return e()}finally{ze(t),kt(n)}}function ka(e,t,n,r=n){e.addEventListener(t,()=>Gi(n));const s=e.__on_r;s?e.__on_r=()=>{s(),r(!0)}:e.__on_r=()=>r(!0),xa()}const Yi=new Set,lr=new Set;function Na(e,t,n,r={}){function s(i){if(r.capture||an.call(t,i),!i.cancelBubble)return Gi(()=>n==null?void 0:n.call(this,i))}return e.startsWith("pointer")||e.startsWith("touch")||e==="wheel"?Br(()=>{t.addEventListener(e,s,r)}):t.addEventListener(e,s,r),s}function ue(e,t,n,r,s){var i={capture:r,passive:s},a=Na(e,t,n,i);(t===document.body||t===window||t===document||t instanceof HTMLMediaElement)&&ga(()=>{t.removeEventListener(e,a,i)})}function Pa(e){for(var t=0;t<e.length;t++)Yi.add(e[t]);for(var n of lr)n(e)}function an(e){var x;var t=this,n=t.ownerDocument,r=e.type,s=((x=e.composedPath)==null?void 0:x.call(e))||[],i=s[0]||e.target,a=0,l=e.__root;if(l){var u=s.indexOf(l);if(u!==-1&&(t===document||t===window)){e.__root=t;return}var f=s.indexOf(t);if(f===-1)return;u<=f&&(a=u)}if(i=s[a]||e.target,i!==t){In(e,"currentTarget",{configurable:!0,get(){return i||n}});var d=q,h=G;ze(null),kt(null);try{for(var g,c=[];i!==null;){var v=i.assignedSlot||i.parentNode||i.host||null;try{var _=i["__"+r];if(_!=null&&(!i.disabled||e.target===i))if(Nr(_)){var[m,...y]=_;m.apply(i,[e,...y])}else _.call(i,e)}catch(b){g?c.push(b):g=b}if(e.cancelBubble||v===t||v===null)break;i=v}if(g){for(let b of c)queueMicrotask(()=>{throw b});throw g}}finally{e.__root=t,delete e.currentTarget,ze(d),kt(h)}}}function Vi(e){var t=document.createElement("template");return t.innerHTML=e.replaceAll("<!>","<!---->"),t.content}function wt(e,t){var n=G;n.nodes_start===null&&(n.nodes_start=e,n.nodes_end=t)}function pe(e,t){var n=(t&Qs)!==0,r,s=!e.startsWith("<!>");return()=>{if($)return wt(K,null),K;r===void 0&&(r=Vi(s?e:"<!>"+e),r=Xe(r));var i=n||pi?document.importNode(r,!0):r.cloneNode(!0);return wt(i,i),i}}function Sa(e,t,n="svg"){var r=!e.startsWith("<!>"),s=(t&Zs)!==0,i=`<${n}>${r?e:"<!>"+e}</${n}>`,a;return()=>{if($)return wt(K,null),K;if(!a){var l=Vi(i),u=Xe(l);if(s)for(a=document.createDocumentFragment();Xe(u);)a.appendChild(Xe(u));else a=Xe(u)}var f=a.cloneNode(!0);if(s){var d=Xe(f),h=f.lastChild;wt(d,h)}else wt(f,f);return f}}function Te(e,t){return Sa(e,t,"svg")}function pn(){if($)return wt(K,null),K;var e=document.createDocumentFragment(),t=document.createComment(""),n=xt();return e.append(t,n),wt(t,n),e}function U(e,t){if($){G.nodes_end=K,Vn();return}e!==null&&e.before(t)}const Ea=["touchstart","touchmove"];function Ta(e){return Ea.includes(e)}function Le(e,t){var n=t==null?"":typeof t=="object"?t+"":t;n!==(e.__t??(e.__t=e.nodeValue))&&(e.__t=n,e.nodeValue=n+"")}function qi(e,t){return ji(e,t)}function Ma(e,t){rr(),t.intro=t.intro??!1;const n=t.target,r=$,s=K;try{for(var i=Xe(n);i&&(i.nodeType!==un||i.data!==hi);)i=Pt(i);if(!i)throw qt;st(!0),Ge(i),Vn();const a=ji(e,{...t,anchor:i});if(K===null||K.nodeType!==un||K.data!==Tr)throw Yn(),qt;return st(!1),a}catch(a){if(a===qt)return t.recover===!1&&Fs(),rr(),Mr(n),st(!1),qi(e,t);throw a}finally{st(r),Ge(s)}}const Lt=new Map;function ji(e,{target:t,anchor:n,props:r={},events:s,context:i,intro:a=!0}){rr();var l=new Set,u=h=>{for(var g=0;g<h.length;g++){var c=h[g];if(!l.has(c)){l.add(c);var v=Ta(c);t.addEventListener(c,an,{passive:v});var _=Lt.get(c);_===void 0?(document.addEventListener(c,an,{passive:v}),Lt.set(c,1)):Lt.set(c,_+1)}}};u(Pr(Yi)),lr.add(u);var f=void 0,d=ma(()=>{var h=n??t.appendChild(xt());return Zt(()=>{if(i){Ye({});var g=ie;g.c=i}s&&(r.$$events=s),$&&wt(h,null),f=e(h,r)||{},$&&(G.nodes_end=K),i&&Ve()}),()=>{var v;for(var g of l){t.removeEventListener(g,an);var c=Lt.get(g);--c===0?(document.removeEventListener(g,an),Lt.delete(g)):Lt.set(g,c)}lr.delete(u),h!==n&&((v=h.parentNode)==null||v.removeChild(h))}});return ur.set(f,d),f}let ur=new WeakMap;function Ca(e,t){const n=ur.get(e);return n?(ur.delete(e),n(t)):Promise.resolve()}function We(e){return new Ba(e)}var it,Oe;class Ba{constructor(t){ke(this,it);ke(this,Oe);var i;var n=new Map,r=(a,l)=>{var u=j(l,!1,!1);return n.set(a,u),u};const s=new Proxy({...t.props||{},$$events:{}},{get(a,l){return o(n.get(l)??r(l,Reflect.get(a,l)))},has(a,l){return l===ai?!0:(o(n.get(l)??r(l,Reflect.get(a,l))),Reflect.has(a,l))},set(a,l,u){return A(n.get(l)??r(l,u),u),Reflect.set(a,l,u)}});Ee(this,Oe,(t.hydrate?Ma:qi)(t.component,{target:t.target,anchor:t.anchor,props:s,context:t.context,intro:t.intro??!1,recover:t.recover})),(!((i=t==null?void 0:t.props)!=null&&i.$$host)||t.sync===!1)&&E(),Ee(this,it,s.$$events);for(const a of Object.keys(O(this,Oe)))a==="$set"||a==="$destroy"||a==="$on"||In(this,a,{get(){return O(this,Oe)[a]},set(l){O(this,Oe)[a]=l},enumerable:!0});O(this,Oe).$set=a=>{Object.assign(s,a)},O(this,Oe).$destroy=()=>{Ca(O(this,Oe))}}$set(t){O(this,Oe).$set(t)}$on(t,n){O(this,it)[t]=O(this,it)[t]||[];const r=(...s)=>n.call(this,...s);return O(this,it)[t].push(r),()=>{O(this,it)[t]=O(this,it)[t].filter(s=>s!==r)}}$destroy(){O(this,Oe).$destroy()}}it=new WeakMap,Oe=new WeakMap;const Ia="5";var ti;typeof window<"u"&&((ti=window.__svelte??(window.__svelte={})).v??(ti.v=new Set)).add(Ia);Vs();function $i(e){ie===null&&Bs(),Jt&&ie.l!==null?Aa(ie).m.push(e):Fn(()=>{const t=S(e);if(typeof t=="function")return t})}function Aa(e){var t=e.l;return t.u??(t.u={a:[],b:[],m:[]})}function je(e,t,n=!1){$&&Vn();var r=e,s=null,i=null,a=me,l=n?yr:0,u=!1;const f=(c,v=!0)=>{u=!0,g(v,c)};var d=null;function h(){d!==null&&(d.lastChild.remove(),r.before(d),d=null);var c=a?s:i,v=a?i:s;c&&Dr(c),v&&Ar(v,()=>{a?i=null:s=null})}const g=(c,v)=>{if(a===(a=c))return;let _=!1;if($){const R=gi(r)===Er;!!a===R&&(r=nr(),Ge(r),st(!1),_=!0)}var m=yi(),y=r;if(m&&(d=document.createDocumentFragment(),d.append(y=xt())),a?s??(s=v&&Zt(()=>v(y))):i??(i=v&&Zt(()=>v(y))),m){var x=ce,b=a?s:i,P=a?i:s;b&&x.skipped_effects.delete(b),P&&x.skipped_effects.add(P),x.add_callback(h)}else h();_&&st(!0)};Di(()=>{u=!1,t(f),u||g(null,null)},l),$&&(r=K)}function be(e,t){return t}function Ra(e,t,n){for(var r=e.items,s=[],i=t.length,a=0;a<i;a++)Rr(t[a].e,s,!0);var l=i>0&&s.length===0&&n!==null;if(l){var u=n.parentNode;Mr(u),u.append(n),r.clear(),qe(e,t[0].prev,t[i-1].next)}Li(s,()=>{for(var f=0;f<i;f++){var d=t[f];l||(r.delete(d.k),qe(e,d.prev,d.next)),at(d.e,!l)}})}function we(e,t,n,r,s,i=null){var a=e,l={flags:t,items:new Map,first:null},u=(t&vi)!==0;if(u){var f=e;a=$?Ge(Xe(f)):f.appendChild(xt())}$&&Vn();var d=null,h=!1,g=new Map,c=nt(()=>{var y=n();return Nr(y)?y:y==null?[]:Pr(y)}),v,_;function m(){Da(_,v,l,g,a,s,t,r,n),i!==null&&(v.length===0?d?Dr(d):d=Zt(()=>i(a)):d!==null&&Ar(d,()=>{d=null}))}Di(()=>{_??(_=G),v=o(c);var y=v.length;if(h&&y===0)return;h=y===0;let x=!1;if($){var b=gi(a)===Er;b!==(y===0)&&(a=nr(),Ge(a),st(!1),x=!0)}if($){for(var P=null,R,N=0;N<y;N++){if(K.nodeType===un&&K.data===Tr){a=K,x=!0,st(!1);break}var C=v[N],L=r(C,N);R=cr(K,l,P,null,C,L,N,s,t,n),l.items.set(L,R),P=R}y>0&&Ge(nr())}if($)y===0&&i&&(d=Zt(()=>i(a)));else if(yi()){var Z=new Set,se=ce;for(N=0;N<y;N+=1){C=v[N],L=r(C,N);var te=l.items.get(L)??g.get(L);te?t&(Un|Gn)&&zi(te,C,N,t):(R=cr(null,l,null,null,C,L,N,s,t,n,!0),g.set(L,R)),Z.add(L)}for(const[ee,_e]of l.items)Z.has(ee)||se.skipped_effects.add(_e.e);se.add_callback(m)}else m();x&&st(!0),o(c)}),$&&(a=K)}function Da(e,t,n,r,s,i,a,l,u){var Je,ct,Ft,ft;var f=(a&qs)!==0,d=(a&(Un|Gn))!==0,h=t.length,g=n.items,c=n.first,v=c,_,m=null,y,x=[],b=[],P,R,N,C;if(f)for(C=0;C<h;C+=1)P=t[C],R=l(P,C),N=g.get(R),N!==void 0&&((Je=N.a)==null||Je.measure(),(y??(y=new Set)).add(N));for(C=0;C<h;C+=1){if(P=t[C],R=l(P,C),N=g.get(R),N===void 0){var L=r.get(R);if(L!==void 0){r.delete(R),g.set(R,L);var Z=m?m.next:v;qe(n,m,L),qe(n,L,Z),Wn(L,Z,s),m=L}else{var se=v?v.e.nodes_start:s;m=cr(se,n,m,m===null?n.first:m.next,P,R,C,i,a,u)}g.set(R,m),x=[],b=[],v=m.next;continue}if(d&&zi(N,P,C,a),N.e.f&Ue&&(Dr(N.e),f&&((ct=N.a)==null||ct.unfix(),(y??(y=new Set)).delete(N))),N!==v){if(_!==void 0&&_.has(N)){if(x.length<b.length){var te=b[0],ee;m=te.prev;var _e=x[0],ae=x[x.length-1];for(ee=0;ee<x.length;ee+=1)Wn(x[ee],te,s);for(ee=0;ee<b.length;ee+=1)_.delete(b[ee]);qe(n,_e.prev,ae.next),qe(n,m,_e),qe(n,ae,te),v=te,m=ae,C-=1,x=[],b=[]}else _.delete(N),Wn(N,v,s),qe(n,N.prev,N.next),qe(n,N,m===null?n.first:m.next),qe(n,m,N),m=N;continue}for(x=[],b=[];v!==null&&v.k!==R;)v.e.f&Ue||(_??(_=new Set)).add(v),b.push(v),v=v.next;if(v===null)continue;N=v}x.push(N),m=N,v=N.next}if(v!==null||_!==void 0){for(var oe=_===void 0?[]:Pr(_);v!==null;)v.e.f&Ue||oe.push(v),v=v.next;var Se=oe.length;if(Se>0){var Qe=a&vi&&h===0?s:null;if(f){for(C=0;C<Se;C+=1)(Ft=oe[C].a)==null||Ft.measure();for(C=0;C<Se;C+=1)(ft=oe[C].a)==null||ft.fix()}Ra(n,oe,Qe)}}f&&Br(()=>{var Xt;if(y!==void 0)for(N of y)(Xt=N.a)==null||Xt.apply()}),e.first=n.first&&n.first.e,e.last=m&&m.e;for(var ne of r.values())at(ne.e);r.clear()}function zi(e,t,n,r){r&Un&&vn(e.v,t),r&Gn?vn(e.i,n):e.i=n}function cr(e,t,n,r,s,i,a,l,u,f,d){var h=(u&Un)!==0,g=(u&js)===0,c=h?g?j(s,!1,!1):dn(s):s,v=u&Gn?dn(a):a,_={i:v,v:c,k:i,a:null,e:null,prev:n,next:r};try{if(e===null){var m=document.createDocumentFragment();m.append(e=xt())}return _.e=Zt(()=>l(e,c,v,f),$),_.e.prev=n&&n.e,_.e.next=r&&r.e,n===null?d||(t.first=_):(n.next=_,n.e.next=_.e),r!==null&&(r.prev=_,r.e.prev=_.e),_}finally{}}function Wn(e,t,n){for(var r=e.next?e.next.e.nodes_start:n,s=t?t.e.nodes_start:n,i=e.e.nodes_start;i!==null&&i!==r;){var a=Pt(i);s.before(i),i=a}}function qe(e,t,n){t===null?e.first=n:(t.next=n,t.e.next=n&&n.e),n!==null&&(n.prev=t,n.e.prev=t&&t.e)}function fr(e,t,n){gn(()=>{var r=S(()=>t(e,n==null?void 0:n())||{});if(n&&(r!=null&&r.update)){var s=!1,i={};Sn(()=>{var a=n();D(a),s&&fi(i,a)&&(i=a,r.update(a))}),s=!0}if(r!=null&&r.destroy)return()=>r.destroy()})}const Wr=[...` 	
\r\f \v\uFEFF`];function Oa(e,t,n){var r=e==null?"":""+e;if(t&&(r=r?r+" "+t:t),n){for(var s in n)if(n[s])r=r?r+" "+s:s;else if(r.length)for(var i=s.length,a=0;(a=r.indexOf(s,a))>=0;){var l=a+i;(a===0||Wr.includes(r[a-1]))&&(l===r.length||Wr.includes(r[l]))?r=(a===0?"":r.substring(0,a))+r.substring(l+1):a=l}}return r===""?null:r}function Kr(e,t=!1){var n=t?" !important;":";",r="";for(var s in e){var i=e[s];i!=null&&i!==""&&(r+=" "+s+": "+i+n)}return r}function Kn(e){return e[0]!=="-"||e[1]!=="-"?e.toLowerCase():e}function Fa(e,t){if(t){var n="",r,s;if(Array.isArray(t)?(r=t[0],s=t[1]):r=t,e){e=String(e).replaceAll(/\s*\/\*.*?\*\/\s*/g,"").trim();var i=!1,a=0,l=!1,u=[];r&&u.push(...Object.keys(r).map(Kn)),s&&u.push(...Object.keys(s).map(Kn));var f=0,d=-1;const _=e.length;for(var h=0;h<_;h++){var g=e[h];if(l?g==="/"&&e[h-1]==="*"&&(l=!1):i?i===g&&(i=!1):g==="/"&&e[h+1]==="*"?l=!0:g==='"'||g==="'"?i=g:g==="("?a++:g===")"&&a--,!l&&i===!1&&a===0){if(g===":"&&d===-1)d=h;else if(g===";"||h===_-1){if(d!==-1){var c=Kn(e.substring(f,d).trim());if(!u.includes(c)){g!==";"&&h++;var v=e.substring(f,h).trim();n+=" "+v+";"}}f=h+1,d=-1}}}}return r&&(n+=Kr(r)),s&&(n+=Kr(s,!0)),n=n.trim(),n===""?null:n}return e==null?null:String(e)}function Ce(e,t,n,r,s,i){var a=e.__className;if($||a!==n||a===void 0){var l=Oa(n,r,i);(!$||l!==e.getAttribute("class"))&&(l==null?e.removeAttribute("class"):e.className=l),e.__className=n}else if(i&&s!==i)for(var u in i){var f=!!i[u];(s==null||f!==!!s[u])&&e.classList.toggle(u,f)}return i}function Zn(e,t={},n,r){for(var s in n){var i=n[s];t[s]!==i&&(n[s]==null?e.style.removeProperty(s):e.style.setProperty(s,i,r))}}function zt(e,t,n,r){var s=e.__style;if($||s!==t){var i=Fa(t,r);(!$||i!==e.getAttribute("style"))&&(i==null?e.removeAttribute("style"):e.style.cssText=i),e.__style=t}else r&&(Array.isArray(r)?(Zn(e,n==null?void 0:n[0],r[0]),Zn(e,n==null?void 0:n[1],r[1],"important")):Zn(e,n,r));return r}const Xa=Symbol("is custom element"),La=Symbol("is html");function w(e,t,n,r){var s=Ua(e);$&&(s[t]=e.getAttribute(t),t==="src"||t==="srcset"||t==="href"&&e.nodeName==="LINK")||s[t]!==(s[t]=n)&&(t==="loading"&&(e[ks]=n),n==null?e.removeAttribute(t):typeof n!="string"&&Ga(e).includes(t)?e[t]=n:e.setAttribute(t,n))}function Ua(e){return e.__attributes??(e.__attributes={[Xa]:e.nodeName.includes("-"),[La]:e.namespaceURI===Js})}var Zr=new Map;function Ga(e){var t=Zr.get(e.nodeName);if(t)return t;Zr.set(e.nodeName,t=[]);for(var n,r=e,s=Element.prototype;s!==r;){n=ui(r);for(var i in n)n[i].set&&t.push(i);r=Sr(r)}return t}function Ya(e,t,n=t){var r=en(),s=new WeakSet;ka(e,"input",i=>{var a=i?e.defaultValue:e.value;if(a=Qn(e)?Jn(a):a,n(a),ce!==null&&s.add(ce),r&&a!==(a=t())){var l=e.selectionStart,u=e.selectionEnd;e.value=a??"",u!==null&&(e.selectionStart=l,e.selectionEnd=Math.min(u,e.value.length))}}),($&&e.defaultValue!==e.value||S(t)==null&&e.value)&&(n(Qn(e)?Jn(e.value):e.value),ce!==null&&s.add(ce)),Sn(()=>{var i=t();e===document.activeElement&&s.has(ce)||Qn(e)&&i===Jn(e.value)||e.type==="date"&&!i&&!e.value||i!==e.value&&(e.value=i??"")})}function Qn(e){var t=e.type;return t==="number"||t==="range"}function Jn(e){return e===""?null:+e}function Qr(e,t){return e===t||(e==null?void 0:e[Ct])===t}function ln(e={},t,n,r){return gn(()=>{var s,i;return Sn(()=>{s=i,i=(r==null?void 0:r())||[],S(()=>{e!==n(...i)&&(t(e,...i),s&&Qr(n(...s),e)&&t(null,...s))})}),()=>{Br(()=>{i&&Qr(n(...i),e)&&t(null,...i)})}}),e}function ut(e=!1){const t=ie,n=t.l.u;if(!n)return;let r=()=>D(t.s);if(e){let s=0,i={};const a=Nn(()=>{let l=!1;const u=t.s;for(const f in u)u[f]!==i[f]&&(i[f]=u[f],l=!0);return l&&s++,s});r=()=>o(a)}n.b.length&&pa(()=>{Jr(t,r),An(n.b)}),Fn(()=>{const s=S(()=>n.m.map(Es));return()=>{for(const i of s)typeof i=="function"&&i()}}),n.a.length&&Fn(()=>{Jr(t,r),An(n.a)})}function Jr(e,t){if(e.l.s)for(const n of e.l.s)o(n);t()}function Ke(e,t,n){var r;e.$$events||(e.$$events={}),(r=e.$$events)[t]||(r[t]=[]),e.$$events[t].push(n)}function Ze(e){for(var t in e)t in this&&(this[t]=e[t])}let Tn=!1;function Va(e){var t=Tn;try{return Tn=!1,[e(),Tn]}finally{Tn=t}}function M(e,t,n,r){var b;var s=!Jt||(n&zs)!==0,i=(n&Ws)!==0,a=(n&Ks)!==0,l=r,u=!0,f=()=>(u&&(u=!1,l=a?S(r):r),l),d;if(i){var h=Ct in e||ai in e;d=((b=Vt(e,t))==null?void 0:b.set)??(h&&t in e?P=>e[t]=P:void 0)}var g,c=!1;i?[g,c]=Va(()=>e[t]):g=e[t],g===void 0&&r!==void 0&&(g=f(),d&&(s&&Xs(),d(g)));var v;if(s?v=()=>{var P=e[t];return P===void 0?f():(u=!0,P)}:v=()=>{var P=e[t];return P!==void 0&&(l=void 0),P===void 0?l:P},s&&!(n&Hs))return v;if(d){var _=e.$$legacy;return function(P,R){return arguments.length>0?((!s||!R||_||c)&&d(R?v():P),P):v()}}var m=!1,y=(n&$s?Nn:nt)(()=>(m=!1,v()));i&&o(y);var x=G;return function(P,R){if(arguments.length>0){const N=R?o(y):s&&i?Ut(P):P;return A(y,N),m=!0,l!==void 0&&(l=N),P}return Ot&&m||x.f&Dt?y.v:o(y)}}const Hi={light:{bgColor:"#E8C887",lineColor:"#000000",textColor:"#000000",red:"#861818",black:"#1B38A2"},dark:{bgColor:"#2d2d2d",lineColor:"#ffffff",textColor:"#ffffff",red:"#861818",black:"#000080"}};var qa=Te('<path fill="none"></path>'),ja=Te('<path fill="none"></path><path fill="none"></path>',1),$a=Te("<path></path>"),za=Te("<path></path>"),Ha=Te("<path></path>"),Wa=Te('<g><circle stroke="#fff"></circle><text x="0" y="0" fill="white" text-anchor="middle" dy="0.35em"> </text></g>'),Ka=Te('<g><path stroke="red" fill="red"></path></g>'),Za=pe('<div class="board-container"><svg xmlns="http://www.w3.org/2000/svg" class="xq-board" style="user-select:none;"><rect rx="5"></rect><path fill="none"></path><!><!><line></line><line></line><text font-family="FZLiShu II-S06" text-anchor="middle" dominant-baseline="middle">楚　河　　汉　界</text><g fill="none"><path></path><path></path></g><g fill="none"><!><!><!></g><g id="xiangqi-pieces"></g><!></svg></div>');function jn(e,t){if(new.target)return We({component:jn,...e});Ye(t,!1);let n=M(t,"settings",12),r=M(t,"board",12),s=M(t,"markedPos",12,null),i=M(t,"currentTurn",12),a=M(t,"eventBus",12),l=M(t,"rotated",12),u=j(),f=j(),d=j(),h=j(),g=j(),c=j(),v=j(),_=j(),m=j(),y=j(),x=j();function b(p){return{x:8-p.x,y:9-p.y}}function P(p){const B=Array.from({length:9},()=>Array(10).fill(null));for(let T=0;T<9;T++)for(let Y=0;Y<10;Y++)B[T][Y]=p[8-T][9-Y];return B}function R(p){const T=p.currentTarget.getBoundingClientRect(),Y=p.clientX-T.left,I=p.clientY-T.top;let z=Math.round(Y/o(c))-1,Q=Math.round(I/o(c))-1;if(z>=0&&z<9&&Q>=0&&Q<10){const et=l()?b({x:z,y:Q}):{x:z,y:Q};a().emit("click",et)}}he(()=>(o(u),o(f),o(d),o(h),o(g),D(n())),()=>{(p=>{A(u,p.bgColor),A(f,p.lineColor),A(d,p.textColor),A(h,p.red),A(g,p.black)})(Hi[n().theme])}),he(()=>D(n()),()=>{A(c,n().cellSize)}),he(()=>o(c),()=>{A(v,o(c)*.1)}),he(()=>o(c),()=>{A(_,o(c)*10)}),he(()=>o(c),()=>{A(m,o(c)*11)}),he(()=>(D(l()),D(r())),()=>{A(y,l()?P(r()):r())}),he(()=>(D(l()),D(s())),()=>{A(x,l()&&s()?b(s()):s())}),tn(),ut();var N=Za(),C=V(N),L=V(C),Z=F(L),se=F(Z);we(se,0,()=>S(()=>Array(10).fill(0)),be,(p,B,T)=>{var Y=qa();W(()=>{w(Y,"d",`M ${o(c)},${o(c)*(T+1)} h ${o(c)*8}`),w(Y,"stroke",o(f)),w(Y,"stroke-width",o(c)*.04)}),U(p,Y)});var te=F(se);we(te,0,()=>S(()=>Array(9).fill(0)),be,(p,B,T)=>{var Y=ja(),I=Bt(Y),z=F(I);W(()=>{w(I,"d",`M ${o(c)*(T+1)},${o(c)} v ${o(c)*4}`),w(I,"stroke",o(f)),w(I,"stroke-width",o(c)*.04),w(z,"d",`M ${o(c)*(T+1)},${o(c)*6} v ${o(c)*4}`),w(z,"stroke",o(f)),w(z,"stroke-width",o(c)*.04)}),U(p,Y)});var ee=F(te),_e=F(ee),ae=F(_e),oe=F(ae),Se=V(oe),Qe=F(Se);X(oe);var ne=F(oe),Je=V(ne);we(Je,0,()=>[[2,3],[8,3],[2,8],[8,8],[3,4],[5,4],[7,4],[3,7],[7,7],[5,7]],be,(p,B)=>{var T=$a();W(()=>w(T,"d",(o(c),o(v),S(()=>`M ${B[0]*o(c)},${B[1]*o(c)} m -${3*o(v)},-${o(v)} h ${2*o(v)} v -${2*o(v)} m ${2*o(v)},0 v ${2*o(v)} h ${2*o(v)} m 0,${2*o(v)} h -${2*o(v)} v ${2*o(v)} m -${2*o(v)},0 v -${2*o(v)} h -${2*o(v)}`)))),U(p,T)});var ct=F(Je);we(ct,0,()=>[[1,4],[1,7]],be,(p,B)=>{var T=za();W(()=>w(T,"d",(o(c),o(v),S(()=>`M ${B[0]*o(c)},${B[1]*o(c)} m ${o(v)},-${3*o(v)} v ${2*o(v)} h ${2*o(v)} m 0,${2*o(v)} h -${2*o(v)} v ${2*o(v)}`)))),U(p,T)});var Ft=F(ct);we(Ft,0,()=>[[9,4],[9,7]],be,(p,B)=>{var T=Ha();W(()=>w(T,"d",(o(c),o(v),S(()=>`M ${B[0]*o(c)},${B[1]*o(c)} m -${3*o(v)},-${o(v)} h ${2*o(v)} v -${2*o(v)} m 0,${6*o(v)} v -${2*o(v)} h -${2*o(v)}`)))),U(p,T)}),X(ne);var ft=F(ne);we(ft,5,()=>o(y),be,(p,B,T)=>{var Y=pn(),I=Bt(Y);we(I,1,()=>o(B),be,(z,Q,et)=>{var tt=pn(),Re=Bt(tt);{var de=ve=>{var re=Wa(),dt=V(re),St=F(dt),nn=V(St,!0);X(St),X(re),W(le=>{w(re,"transform",`translate(${(T+1)*o(c)}, ${(et+1)*o(c)})`),w(dt,"r",o(c)*.4),w(dt,"fill",le),w(dt,"stroke-width",o(c)*.02),w(St,"font-size",o(c)*.45),Le(nn,(D(Fe),o(Q),S(()=>Fe[o(Q)])))},[()=>(o(Q),o(h),o(g),S(()=>o(Q)===o(Q).toUpperCase()?o(h):o(g)))]),U(ve,re)};je(Re,ve=>{o(Q)&&ve(de)})}U(z,tt)}),U(p,Y)}),X(ft);var Xt=F(ft);{var k=p=>{var B=Ka(),T=V(B);X(B),W(()=>{w(B,"transform",(o(x),o(c),S(()=>`translate(${(o(x).x+1)*o(c)}, ${(o(x).y+1)*o(c)})`))),w(T,"d",`M ${-.4*o(c)},${-.4*o(c)+o(v)} v ${-o(v)} h ${o(v)}
              M ${.4*o(c)-o(v)},${-.4*o(c)} h ${o(v)} v ${o(v)}
              M ${.4*o(c)},${.4*o(c)-o(v)} v ${o(v)} h ${-o(v)}
              M ${-.4*o(c)+o(v)},${.4*o(c)} h ${-o(v)} v ${-o(v)}`),w(T,"stroke-width",o(c)*.05)}),U(p,B)};je(Xt,p=>{o(x)&&p(k)})}return X(C),X(N),W(()=>{w(C,"width",o(_)),w(C,"height",o(m)),w(C,"viewBox",`0 0 ${o(_)} ${o(m)}`),w(L,"width",o(_)),w(L,"height",o(m)),w(L,"fill",o(u)),w(L,"stroke",i()==="red"?o(h):o(g)),w(L,"stroke-width",o(c)*.2),w(Z,"d",`M ${o(c)-o(v)},${o(c)-o(v)} h ${8*o(c)+2*o(v)} v ${9*o(c)+2*o(v)} h -${8*o(c)+2*o(v)} Z`),w(Z,"stroke",o(f)),w(Z,"stroke-width",o(c)*.08),w(ee,"x1",o(c)),w(ee,"y1",o(c)),w(ee,"x2",o(c)),w(ee,"y2",10*o(c)),w(ee,"stroke",o(f)),w(ee,"stroke-width",o(c)*.04),w(_e,"x1",o(c)*9),w(_e,"y1",o(c)),w(_e,"x2",o(c)*9),w(_e,"y2",10*o(c)),w(_e,"stroke",o(f)),w(_e,"stroke-width",o(c)*.04),w(ae,"x",o(_)/2),w(ae,"y",o(m)/2),w(ae,"font-size",o(c)*.6),w(ae,"fill",o(d)),w(oe,"stroke",o(f)),w(oe,"stroke-width",o(c)*.03),w(Se,"d",`M ${o(c)*4},${o(c)} l ${o(c)*2} ${o(c)*2} m 0,${-2*o(c)} l ${-2*o(c)} ${2*o(c)}`),w(Qe,"d",`M ${o(c)*4},${8*o(c)} l ${o(c)*2} ${o(c)*2} m 0,${-2*o(c)} l ${-2*o(c)} ${2*o(c)}`),w(ne,"stroke",o(f)),w(ne,"stroke-width",o(c)*.02)}),ue("click",C,R),U(e,N),Ve({get settings(){return n()},set settings(p){n(p),E()},get board(){return r()},set board(p){r(p),E()},get markedPos(){return s()},set markedPos(p){s(p),E()},get currentTurn(){return i()},set currentTurn(p){i(p),E()},get eventBus(){return a()},set eventBus(p){a(p),E()},get rotated(){return l()},set rotated(p){l(p),E()},$set:Ze,$on:(p,B)=>Ke(t,p,B)})}var Qa=pe('<button class="toolbar-btn svelte-1hvte9z"></button>'),Ja=pe('<div><!> <button aria-label="保存"></button></div>');function Wi(e,t){if(new.target)return We({component:Wi,...e});Ye(t,!1);let n=M(t,"settings",12),r=M(t,"eventBus",12),s=M(t,"modified",12),i=M(t,"PGN",12),a=M(t,"isprotected",12),l=j("");const u=[{title:"重置",icon:"refresh-cw",event:"reset"},{title:"开局",icon:"arrow-left-to-line",event:"toStart"},{title:"回退",icon:"undo-dot",event:"undo"},{title:"前进",icon:"redo-dot",event:"redo"},{title:"终局",icon:"arrow-right-to-line",event:"toEnd"}];let f=j();function d(y){r().emit(y)}function h(y,x){return J.setIcon(y,x),{update(b){J.setIcon(y,b)}}}function g(y){J.setIcon(y,"save")}he(()=>(D(s()),D(i())),()=>{A(l,s()?"unsaved":i().length>0?"saved":"empty")}),tn(),ut();var c=Ja(),v=V(c);we(v,1,()=>u,be,(y,x)=>{let b=()=>o(x).title,P=()=>o(x).icon,R=()=>o(x).event;var N=Qa();fr(N,(C,L)=>h==null?void 0:h(C,L),P),gn(()=>ue("click",N,()=>d(R()))),W(()=>w(N,"aria-label",b())),U(y,N)});var _=F(v,2);let m;return ln(_,y=>A(f,y),()=>o(f)),fr(_,y=>g==null?void 0:g(y)),gn(()=>ue("click",_,()=>d("save"))),X(c),W(y=>{Ce(c,1,`toolbar-container ${D(n()),S(()=>n().position)??""}`,"svelte-1hvte9z"),m=Ce(_,1,`toolbar-btn ${o(l)??""}`,"svelte-1hvte9z",m,y)},[()=>({disabled:a()})]),U(e,c),Ve({get settings(){return n()},set settings(y){n(y),E()},get eventBus(){return r()},set eventBus(y){r(y),E()},get modified(){return s()},set modified(y){s(y),E()},get PGN(){return i()},set PGN(y){i(y),E()},get isprotected(){return a()},set isprotected(y){a(y),E()},$set:Ze,$on:(y,x)=>Ke(t,y,x)})}function eo(e,t){if(!e||!t||!(t.scrollHeight>t.clientHeight))return;const r=e.getBoundingClientRect(),s=t.getBoundingClientRect(),i=r.top-s.top,a=t.scrollTop+i-t.clientHeight/2+e.offsetHeight/2;t.scrollTo({top:a,behavior:"smooth"})}var to=(e,t)=>t().emit("clickstep",0),no=pe("<span> </span>"),ro=pe('<li class="round svelte-13jscc"><span class="roundnum svelte-13jscc"></span> <span> </span> <!></li>'),io=pe('<div><ul><li class="start svelte-13jscc"><span class="roundnum svelte-13jscc">0</span> <span> </span></li> <!></ul></div>');function Ki(e,t){if(new.target)return We({component:Ki,...e});Ye(t,!0);let n=M(t,"settings",7),r=M(t,"currentStep",7),s=M(t,"moves",7),i=M(t,"eventBus",7),a=[],l;Fn(()=>{r(),s(),(async()=>{await on();const m=Math.floor(r()/2)+1,y=a[m];y&&eo(y,l)})()});var u=io(),f=V(u),d=V(f);let h;var g=F(V(d),2);let c;g.__click=[to,i];var v=V(g,!0);X(g),X(d),ln(d,m=>a[0]=m,()=>a==null?void 0:a[0]);var _=F(d,2);return we(_,17,s,be,(m,y,x)=>{var b=pn(),P=Bt(b);{var R=N=>{var C=ro(),L=V(C);L.textContent=x/2+1;var Z=F(L,2);let se;Z.__click=()=>i().emit("clickstep",x+1);var te=V(Z,!0);X(Z);var ee=F(Z,2);{var _e=ae=>{var oe=no();let Se;oe.__click=()=>i().emit("clickstep",x+2);var Qe=V(oe,!0);X(oe),W(ne=>{Se=Ce(oe,1,"move black svelte-13jscc",null,Se,ne),Le(Qe,n().showPGNtxt?s()[x+1].WXF:"黑")},[()=>({active:r()===x+2})]),U(ae,oe)};je(ee,ae=>{s()[x+1]&&ae(_e)})}X(C),ln(C,(ae,oe)=>a[oe/2+1]=ae,ae=>a==null?void 0:a[ae/2+1],()=>[x]),W(ae=>{se=Ce(Z,1,"move red svelte-13jscc",null,se,ae),Le(te,n().showPGNtxt?o(y).WXF:"红")},[()=>({active:r()===x+1})]),U(N,C)};je(P,N=>{x%2===0&&N(R)})}U(m,b)}),X(f),ln(f,m=>l=m,()=>l),X(u),W((m,y)=>{Ce(u,1,`move-container ${n().position??""}`,"svelte-13jscc"),zt(u,`--height: ${11*n().cellSize}px;
    --width: ${10*n().cellSize}px;
    --fontsize: ${n().fontSize??""}px;`),Ce(f,1,`move-list ${n().position??""}`,"svelte-13jscc"),h=zt(d,"",h,m),c=Ce(g,1,"move svelte-13jscc",null,c,y),Le(v,n().showPGNtxt?"=== 开 局 ===":"开 局")},[()=>({display:n().position==="right"?"flex":"none"}),()=>({active:r()===0})]),U(e,u),Ve({get settings(){return n()},set settings(m){n(m),E()},get currentStep(){return r()},set currentStep(m){r(m),E()},get moves(){return s()},set moves(m){s(m),E()},get eventBus(){return i()},set eventBus(m){i(m),E()},$set:Ze,$on:(m,y)=>Ke(t,m,y)})}Pa(["click"]);var so=pe("<div><!> <!> <!></div>");function Zi(e,t){if(new.target)return We({component:Zi,...e});Ye(t,!1);const n=j(),r=j(),s=j();let i=M(t,"settings",12),a=M(t,"board",12),l=M(t,"markedPos",12),u=M(t,"currentTurn",12),f=M(t,"currentStep",12),d=M(t,"eventBus",12),h=M(t,"modified",12),g=M(t,"PGN",12),c=M(t,"history",12),v=M(t,"options",12);$i(async()=>{await on(),d().emit("ready")}),he(()=>(D(h()),D(c()),D(g())),()=>{A(n,h()?c():g())}),he(()=>D(v()),()=>{A(r,v().protected||!1)}),he(()=>D(v()),()=>{A(s,v().rotated||!1)}),tn(),ut();var _=so(),m=V(_);jn(m,{get settings(){return i()},get board(){return a()},get markedPos(){return l()},get currentTurn(){return u()},get eventBus(){return d()},get rotated(){return o(s)}});var y=F(m,2);Wi(y,{get settings(){return i()},get eventBus(){return d()},get modified(){return h()},get PGN(){return g()},get isprotected(){return o(r)}});var x=F(y,2);return Ki(x,{get settings(){return i()},get currentStep(){return f()},get moves(){return o(n)},get eventBus(){return d()}}),X(_),W(()=>Ce(_,1,`XQ-container ${D(i()),S(()=>i().position)??""}`,"svelte-jrfy8s")),U(e,_),Ve({get settings(){return i()},set settings(b){i(b),E()},get board(){return a()},set board(b){a(b),E()},get markedPos(){return l()},set markedPos(b){l(b),E()},get currentTurn(){return u()},set currentTurn(b){u(b),E()},get currentStep(){return f()},set currentStep(b){f(b),E()},get eventBus(){return d()},set eventBus(b){d(b),E()},get modified(){return h()},set modified(b){h(b),E()},get PGN(){return g()},set PGN(b){g(b),E()},get history(){return c()},set history(b){c(b),E()},get options(){return v()},set options(b){v(b),E()},$set:Ze,$on:(b,P)=>Ke(t,b,P)})}let ao=class Qi{static init(t){t.BoardModule=new Qi(t)}constructor(t){const n=t.eventBus;n.on("load",()=>{t.modified=!1;const r=t.containerEl.createEl("div");t.Xiangqi=new Zi({target:r,props:{settings:t.settings,board:t.board,markedPos:t.markedPos,currentTurn:t.currentTurn,currentStep:t.currentStep,eventBus:t.eventBus,modified:t.modified,PGN:t.PGN,history:t.history,options:t.options}})}),n.on("ready",()=>{if(t.settings.autoJump)switch(t.settings.autoJump){case"never":break;case"always":n.emit("toEnd");break;case"auto":t.haveFEN||n.emit("toEnd");break}}),n.on("updateUI",r=>{t.Xiangqi.$set({settings:{...t.settings},board:t.board,markedPos:t.markedPos,currentTurn:t.currentTurn,currentStep:t.currentStep,modified:t.modified,history:[...t.history],options:{...t.options}})}),n.on("unload",()=>{t.Xiangqi.$destroy(),t.Xiangqi=null})}};Rt("board",ao);function oo(e,t,n){if(!n||lo(e,t,n))return!1;const s=n[e.x][e.y],i=n[t.x][t.y];if(Ji(s,i))return!1;switch(s.toUpperCase()){case"R":return uo(e,t,n);case"N":return co(e,t,n);case"B":return fo(e,t,n);case"A":return vo(e,t,n);case"K":return ho(e,t,n);case"C":return go(e,t,n);case"P":return po(e,t,n);default:return!1}}function lo(e,t,n){return e.x<0||e.x>8||e.y<0||e.y>9||t.x<0||t.x>8||t.y<0||t.y>9?"out-of-board":e.x===t.x&&e.y===t.y?"same-pos":n[e.x][e.y]?null:"no-piece"}function Ji(e,t){return t?e===e.toUpperCase()==(t===t.toUpperCase()):!1}function uo(e,t,n){if(e.x!==t.x&&e.y!==t.y)return!1;if(e.x===t.x){const[r,s]=[e.y,t.y].sort((i,a)=>i-a);for(let i=r+1;i<s;i++)if(n[e.x][i])return!1}else{const[r,s]=[e.x,t.x].sort((i,a)=>i-a);for(let i=r+1;i<s;i++)if(n[i][e.y])return!1}return!0}function co(e,t,n){const r=t.x-e.x,s=t.y-e.y;if(!(Math.abs(r)===2&&Math.abs(s)===1||Math.abs(r)===1&&Math.abs(s)===2))return!1;if(Math.abs(r)===2){if(n[e.x+r/2][e.y])return!1}else if(n[e.x][e.y+s/2])return!1;return!0}function fo(e,t,n){const r=t.x-e.x,s=t.y-e.y;if(Math.abs(r)!==2||Math.abs(s)!==2)return!1;const i=n[e.x][e.y],a=i===i.toUpperCase();return!(a&&t.y<5||!a&&t.y>4||n[e.x+r/2][e.y+s/2])}function vo(e,t,n){const r=Math.abs(t.x-e.x),s=Math.abs(t.y-e.y);if(r!==1||s!==1)return!1;const i=n[e.x][e.y];return i===i.toUpperCase()?t.x>=3&&t.x<=5&&t.y>=7&&t.y<=9:t.x>=3&&t.x<=5&&t.y>=0&&t.y<=2}function ho(e,t,n){const r=Math.abs(t.x-e.x),s=Math.abs(t.y-e.y);if(r+s!==1)return!1;const i=n[e.x][e.y];if(i===i.toUpperCase()){if(!(t.x>=3&&t.x<=5&&t.y>=7&&t.y<=9))return!1}else if(!(t.x>=3&&t.x<=5&&t.y>=0&&t.y<=2))return!1;return!0}function go(e,t,n){if(e.x!==t.x&&e.y!==t.y)return!1;let r=0;if(e.x===t.x){const[i,a]=[e.y,t.y].sort((l,u)=>l-u);for(let l=i+1;l<a;l++)n[e.x][l]&&r++}else{const[i,a]=[e.x,t.x].sort((l,u)=>l-u);for(let l=i+1;l<a;l++)n[l][e.y]&&r++}const s=n[t.x][t.y];if(s){const i=n[e.x][e.y];return Ji(i,s)?!1:r===1}else return r===0}function po(e,t,n){const r=n[e.x][e.y],s=r===r.toUpperCase(),i=t.x-e.x,a=t.y-e.y;if(Math.abs(i)+Math.abs(a)!==1)return!1;const l=s?e.y<=4:e.y>=5;return s?l?i===0&&a===-1||a===0&&Math.abs(i)===1:i===0&&a===-1:l?i===0&&a===1||a===0&&Math.abs(i)===1:i===0&&a===1}let es=class{static init(t){const n=t.eventBus;n.on("click",r=>{const s=t.board[r.x][r.y];if(!t.markedPos){if(s){const a=s===s.toUpperCase();(t.currentTurn==="red"&&a||t.currentTurn!="red"&&!a)&&(t.markedPos=r,t.Xiangqi.$set({markedPos:{...t.markedPos}}))}return}if(oo(t.markedPos,r,t.board)){const a={from:{...t.markedPos},to:{...r}};t.modified||(t.modifiedStep=t.currentStep),t.modified=!0,t.markedPos=null,n.emit("runmove",a)}else{if(s){const a=s===s.toUpperCase();if(t.currentTurn==="red"&&a||t.currentTurn==="black"&&!a){t.markedPos=r,t.Xiangqi.$set({markedPos:t.markedPos});return}}t.markedPos=null,t.Xiangqi.$set({markedPos:t.markedPos})}})}};Rt("BoardClick",es);wn("BoardClick",es);const mo={init(e){const t=e.eventBus;t.on("load",()=>{e.modified=!1,e.history=[]}),t.on("edithistory",n=>{_o(e,n)})}};function _o(e,t){t.WXF=ri(t,e.board),t.captured=e.board[t.to.x][t.to.y];let{currentStep:n,history:r}=e;const s=t,i=r[n];i&&i.from.x===s.from.x&&i.from.y===s.from.y&&i.to.x===s.to.x&&(i.to.y,s.to.y),e.history.splice(n),e.history.push(s)}Rt("history",mo);class yo extends J.Modal{constructor(n,r,s,i="确认",a="取消"){super(n);H(this,"resolvePromise");H(this,"promise");this.title=r,this.message=s,this.confirmText=i,this.cancelText=a,this.resolvePromise=()=>{},this.promise=new Promise(l=>{this.resolvePromise=l})}onOpen(){const{contentEl:n}=this;n.createEl("h2",{text:this.title}),n.createEl("p",{text:this.message});const r=n.createDiv("modal-button-container"),s=r.createEl("button",{text:this.confirmText,cls:"mod-cta"});s.addEventListener("click",()=>{this.resolvePromise(!0),this.close()}),r.createEl("button",{text:this.cancelText}).addEventListener("click",()=>{this.resolvePromise(!1),this.close()}),s.focus(),this.scope.register([],"Enter",()=>{this.resolvePromise(!0),this.close()})}onClose(){const{contentEl:n}=this;n.empty()}}let bo=class{static init(t){const n=t.eventBus;n.on("runmove",r=>{n.emit("edithistory",r),dr(t,r),n.emit("updateUI","runmove")}),n.on("undo",()=>{Mn(t),n.emit("updateUI","undo")}),n.on("redo",()=>{Cn(t),n.emit("updateUI","redo")}),n.on("toStart",()=>{for(;t.currentStep!=0;)Mn(t);n.emit("updateUI","toStart")}),n.on("toEnd",()=>{const s=(t.modified?t.history.length:t.PGN.length)-t.currentStep;for(let i=0;i<s;i++)Cn(t);n.emit("updateUI","toEnd")}),n.on("reset",()=>{if(t.modified){for(;t.currentStep!=0;)Mn(t);t.modified=!1,t.history=[];for(let r=0;r<t.modifiedStep;r++)Cn(t);t.modifiedStep=null,n.emit("updateUI","reset")}else n.emit("toStart")}),n.on("save",async()=>{let r="";if(t.history.length===0&&t.PGN.length===0){new J.Notice("历史记录和PGN记录为空，无需保存！");return}t.history.length===0&&t.PGN.length>0&&(r="当前PGN记录不为空，是否要清空？"),t.history.length>0&&t.PGN.length===0&&(r="当前PGN记录为空，是否要保存历史为PGN？"),t.history.length>0&&t.PGN.length>0&&(r="当前PGN记录不为空，是否要覆盖保存？");const s=new yo(t.plugin.app,"确认保存",r,"保存","取消");s.open(),await s.promise&&(await wo(t),new J.Notice("保存成功！")),n.emit("updateUI","save")}),n.on("clickstep",r=>{const s=r-t.currentStep;if(s!==0){if(s>0)for(let i=0;i<s;i++)Cn(t);else for(let i=0;i<-s;i++)Mn(t);n.emit("updateUI")}})}};Rt("actions",bo);function dr(e,t){const{from:n,to:r}=t;e.board[r.x][r.y]=e.board[n.x][n.y],e.board[n.x][n.y]="",e.currentStep++,e.currentTurn=e.currentTurn==="red"?"black":"red"}function Mn(e){if(e.markedPos=null,e.history.length===0)return;const t=e.history[e.currentStep-1];if(!t)return;const{from:n,to:r,captured:s}=t,i=e.board[r.x][r.y];e.board[n.x][n.y]=i,e.board[r.x][r.y]=null,s&&(e.board[r.x][r.y]=s),e.currentStep--,e.currentTurn=e.currentTurn==="red"?"black":"red"}function Cn(e){e.markedPos=null;const t=e.eventBus;if(!e.modified&&e.PGN.length>0){const n=e.PGN[e.currentStep];if(!n)return;t.emit("edithistory",n),dr(e,n)}else{if(e.history.length<e.currentStep)return;const n=e.history[e.currentStep];if(!n)return;dr(e,n)}}async function wo(e){const t=e.plugin.app.workspace.getActiveViewOfType(J.MarkdownView);if(!t)return;const n=t.file;if(!n)return;const r=e.ctx.getSectionInfo(e.containerEl);if(!r)return;const{lineStart:s,lineEnd:i}=r,l=(await e.plugin.app.vault.read(n)).split(`
`);let u=l.slice(s,i+1);if(u.length<2)return;if(u=u.filter(d=>!/[A-Z]\d-[A-Z]\d/.test(d)),e.currentStep>0){const d=e.history.slice(0,e.currentStep).map(c=>ni(c)),h=[];for(let c=0;c<d.length;c+=2){const v=`${Math.ceil((c+1)/2)}. ${d[c]} ${d[c+1]||""}`.trim();h.push(v)}const g=h.join(`
`);u.splice(u.length-1,0,g)}const f=[...l.slice(0,s),...u,...l.slice(i+1)].join(`
`);await e.plugin.app.vault.modify(n,f)}const xo={init(e){e.eventBus.on("updateUI",()=>{e.settings.enableSpeech&&window.speechSynthesis&&e.currentStep>0&&e.history[e.currentStep-1]&&ko(e.history[e.currentStep-1])})}};Rt("speech",xo);function ko(e){const{type:t,WXF:n}=e;if(!n||!t)return;const i=((t===t.toUpperCase()?"红：":"黑：")+n).replace(/卒/g,"族").replace(/將/g,"酱").replace(/将/g,"酱").replace(/相/g,"巷").replace(/仕/g,"市").replace(/炮/g,"泡").replace(/兵/g,"冰").replace(/傌/g,"马");if(!window.speechSynthesis)return;const a=new SpeechSynthesisUtterance(i);a.lang="zh-CN",window.speechSynthesis.cancel(),window.speechSynthesis.speak(a)}class No extends J.MarkdownRenderChild{constructor(n,r,s,i){super(n);H(this,"settings");H(this,"moduleRegistry");H(this,"eventBus");this.containerEl=n,this.ctx=r,this.source=s,this.plugin=i,this.settings=this.plugin.settings}onload(){this.plugin.renderChildren.add(this),this.moduleRegistry=vs(this),this.eventBus.emit("load","xq")}refresh(){this.eventBus.emit("updateUI")}onunload(){this.plugin.renderChildren.delete(this),this.eventBus.emit("unload"),hs(this)}}var Po=pe("<button> </button>"),So=pe("<div></div>");function ts(e,t){if(new.target)return We({component:ts,...e});Ye(t,!1);const n=j(),r=j();let s=M(t,"settings",12),i=M(t,"board",12),a=M(t,"eventBus",12),l=M(t,"position",12,""),u=M(t,"selectedPiece",12);const f=g=>g===g.toUpperCase(),d={R:2,N:2,B:2,A:2,K:1,C:2,P:5,r:2,n:2,b:2,a:2,k:1,c:2,p:5};he(()=>D(i()),()=>{A(n,i().flat().reduce((g,c)=>(c&&(g[c]=(g[c]||0)+1),g),{}))}),he(()=>o(n),()=>{A(r,Object.fromEntries(Object.keys(d).map(g=>[g,d[g]-(o(n)[g]||0)])))}),tn(),ut();var h=So();return we(h,5,()=>(D(Fe),S(()=>Object.entries(Fe))),be,(g,c)=>{var v=aa(()=>Ms(o(c),2));let _=()=>o(v)[0],m=()=>o(v)[1];var y=Po();let x;var b=V(y,!0);X(y),W((P,R)=>{x=Ce(y,1,P,"svelte-1q1qs5y",x,R),Le(b,m())},[()=>(D(l()),_(),S(()=>`piece-btn ${l()} ${f(_())?"red-piece":"black-piece"}`)),()=>({empty:o(r)[_()]===0,active:u()===_()})]),ue("click",y,()=>a().emit("clickPieceBTN",_())),U(g,y)}),X(h),W(()=>{Ce(h,1,`piece-btn-container ${l()}`,"svelte-1q1qs5y"),zt(h,`--height: ${D(s()),S(()=>11*s().cellSize)??""}px;
    --width: ${D(s()),S(()=>10*s().cellSize)??""}px;`)}),U(e,h),Ve({get settings(){return s()},set settings(g){s(g),E()},get board(){return i()},set board(g){i(g),E()},get eventBus(){return a()},set eventBus(g){a(g),E()},get position(){return l()},set position(g){l(g),E()},get selectedPiece(){return u()},set selectedPiece(g){u(g),E()},$set:Ze,$on:(g,c)=>Ke(t,g,c)})}var Eo=pe("<button> </button>"),To=pe("<div></div>");function ns(e,t){if(new.target)return We({component:ns,...e});Ye(t,!1);let n=M(t,"eventBus",12),r=M(t,"position",12,""),s=M(t,"currentTurn",12,"");const i=[{title:"先手",text:"先",action:"turn",color:!0},{title:"清空",text:"空",action:"empty"},{title:"填满",text:"满",action:"full"},{title:"保存",text:"存",action:"save"}];ut();var a=To();return we(a,5,()=>i,be,(l,u)=>{let f=()=>o(u).title,d=()=>o(u).text,h=()=>o(u).action,g=()=>o(u).color;var c=Eo(),v=V(c,!0);X(c),W(()=>{w(c,"title",f()),Ce(c,1,`toolbar-btn ${g()?s():""}`,"svelte-l6oc4j"),Le(v,d())}),ue("click",c,()=>n().emit("btn-click",h())),U(l,c)}),X(a),W(()=>Ce(a,1,`getFENT-toolbar-container ${r()}`,"svelte-l6oc4j")),U(e,a),Ve({get eventBus(){return n()},set eventBus(l){n(l),E()},get position(){return r()},set position(l){r(l),E()},get currentTurn(){return s()},set currentTurn(l){s(l),E()},$set:Ze,$on:(l,u)=>Ke(t,l,u)})}var Mo=pe("<div><!> <!> <!></div>");function rs(e,t){if(new.target)return We({component:rs,...e});Ye(t,!1);const n=j();let r=M(t,"settings",12),s=M(t,"board",12),i=M(t,"markedPos",12),a=M(t,"selectedPiece",12),l=M(t,"currentTurn",12),u=M(t,"eventBus",12);he(()=>D(r()),()=>{A(n,r().position)}),tn(),ut();var f=Mo(),d=V(f);jn(d,{get settings(){return r()},get board(){return s()},get markedPos(){return i()},get currentTurn(){return l()},get eventBus(){return u()},rotated:!1});var h=F(d,2);ts(h,{get settings(){return r()},get board(){return s()},get eventBus(){return u()},get position(){return o(n)},get selectedPiece(){return a()}});var g=F(h,2);return ns(g,{get eventBus(){return u()},get position(){return o(n)},get currentTurn(){return l()}}),X(f),W(()=>Ce(f,1,`XQ-container ${D(r()),S(()=>r().position)??""}`,"svelte-jrfy8s")),U(e,f),Ve({get settings(){return r()},set settings(c){r(c),E()},get board(){return s()},set board(c){s(c),E()},get markedPos(){return i()},set markedPos(c){i(c),E()},get selectedPiece(){return a()},set selectedPiece(c){a(c),E()},get currentTurn(){return l()},set currentTurn(c){l(c),E()},get eventBus(){return u()},set eventBus(c){u(c),E()},$set:Ze,$on:(c,v)=>Ke(t,c,v)})}class Or{static init(t){t.BoardModule=new Or(t)}constructor(t){const n=t.eventBus;n.on("load",()=>{t.modified=!1;const r=t.containerEl.createEl("div");t.Xiangqi=new rs({target:r,props:{selectedPiece:t.selectedPiece,settings:t.settings,board:t.board,markedPos:t.markedPos,currentTurn:t.currentTurn,eventBus:t.eventBus}})}),n.on("updateUI",r=>{t.Xiangqi.$set({selectedPiece:t.selectedPiece,settings:{...t.settings},board:t.board,markedPos:t.markedPos,currentTurn:t.currentTurn})}),n.on("unload",()=>{t.Xiangqi.$destroy(),t.Xiangqi=null})}}bn("board",Or);class Co{static init(t){t.eventBus.on("click",r=>{const s=t.board[r.x][r.y];if(!t.markedPos&&!t.selectedPiece)s&&(t.markedPos=r,t.Xiangqi.$set({markedPos:{...t.markedPos}}));else if(t.markedPos&&!t.selectedPiece){const i=t.markedPos,a=r;t.board[a.x][a.y]=t.board[i.x][i.y],t.board[i.x][i.y]="",t.markedPos=null,t.Xiangqi.$set({board:[...t.board],markedPos:t.markedPos})}else t.selectedPiece&&(t.board[r.x][r.y]=t.selectedPiece,t.selectedPiece=null,t.Xiangqi.$set({board:[...t.board],selectedPiece:t.selectedPiece,markedPos:t.markedPos}))})}}bn("BoardClick",Co);let Bo=class{static init(t){const n=t.eventBus;n.on("clickPieceBTN",r=>{t.markedPos=null,t.selectedPiece=r,t.eventBus.emit("updateUI")}),n.on("btn-click",r=>{switch(r){case"turn":t.currentTurn=t.currentTurn==="red"?"black":"red";break;case"empty":t.board=Array.from({length:10},()=>Array(9).fill(null)),t.board[4][0]="k",t.board[4][9]="K",t.selectedPiece=null,t.markedPos=null;break;case"full":t.eventBus.emit("full"),t.selectedPiece=null,t.markedPos=null;break;case"save":Io(t);break}n.emit("updateUI")})}};bn("actions",Bo);async function Io(e){const t=Ao(e.board,e.currentTurn),n=e.plugin.app.workspace.getActiveViewOfType(J.MarkdownView);if(!n)return;const r=n.file;if(!r)return;const s=e.ctx.getSectionInfo(e.containerEl);if(!s)return;const{lineStart:i,lineEnd:a}=s,u=(await e.plugin.app.vault.read(r)).split(`
`);let f=u.slice(i,a+1);if(f.length<2)return;f[0]=f[0].replace(/^```xq\b.*$/,"```xiangqi"),f=[f[0],`[FEN "${t}"]`,"```"];const d=[...u.slice(0,i),...f,...u.slice(a+1)].join(`
`);await e.plugin.app.vault.modify(r,d),new J.Notice("FEN已保存到代码块")}function Ao(e,t){const n=[];for(let s=0;s<10;s++){let i="",a=0;for(let l=0;l<9;l++){const u=e[l][s];u?(a>0&&(i+=a,a=0),i+=u):a++}a>0&&(i+=a),n.push(i)}return`${n.join("/")} ${t==="red"?"w":"b"}`}class Ro extends J.MarkdownRenderChild{constructor(n,r,s,i){super(n);H(this,"settings");H(this,"moduleRegistry");H(this,"eventBus");this.containerEl=n,this.ctx=r,this.source=s,this.plugin=i,this.settings=this.plugin.settings}onload(){this.plugin.renderChildren.add(this),this.moduleRegistry=gs(this),this.eventBus.emit("load","fen")}refresh(){this.eventBus.emit("updateUI")}onunload(){this.plugin.renderChildren.delete(this),this.eventBus.emit("unload"),ps(this)}}function Do(e){const t=[];let n=1,r=1,s=0;const i=()=>e[s],a=()=>{const l=e[s++];return l===`
`?(n++,r=1):r++,l};for(;s<e.length;){const l=s,u=n,f=r,d=i();if(/\s/.test(d)){a();continue}if(d==="."){for(;i()===".";)a();continue}if(/\d/.test(d)){let h=a();for(;i()===".";)h+=a();continue}if(/[a-iA-I]/.test(d)){let h=a().toUpperCase();if(/\d/.test(i())&&(h+=a(),i()==="-"&&(h+=a(),/[a-iA-I]/.test(i())&&(h+=a().toUpperCase(),/\d/.test(i()))))){h+=a(),t.push({type:"iccs-move",value:h,line:u,column:f});continue}s=l,n=u,r=f}if(/[兵卒车马炮相士帅将]/.test(d)){let h=a();for(;/[一二三四五六七八九123456789进退平前后左右]/.test(i())&&s<e.length;)h+=a();t.push({type:"wxf-move",value:h,line:u,column:f});continue}if(d==="("){t.push({type:"left-paren",value:a(),line:u,column:f});continue}if(d===")"){t.push({type:"right-paren",value:a(),line:u,column:f});continue}if(d==="{"){let h=a();for(;i()!=="}"&&s<e.length;)h+=a();if(i()==="}"){h+=a(),t.push({type:"comment",value:h,line:u,column:f});continue}}if(d==="["){let h=a();for(;i()!=="]"&&s<e.length;)h+=a();if(i()==="]"){h+=a(),t.push({type:"tag",value:h,line:u,column:f});continue}}if(d==="*"){t.push({type:"result",value:"*",line:u,column:f}),a();continue}throw new Error(`无法识别的字符 '${d}' 在行 ${n}, 列 ${r}`)}return t.push({type:"eof",value:"",line:n,column:r}),t}class Oo{constructor(t){H(this,"tokens");H(this,"nodeMap");H(this,"currentIndex");H(this,"rootNode");H(this,"currentNode");H(this,"nodeId");H(this,"currentStep",0);H(this,"currentSide","red");H(this,"tags",new Map);for(this.nodeMap=new Map,this.tokens=typeof t=="string"?Do(t):t,this.currentIndex=0,this.nodeId=1,this.rootNode={id:"node-root",data:null,step:0,side:null,parentID:null,children:[],mainID:null,board:er(ys).board,comments:[]},this.nodeMap.set(this.rootNode.id,this.rootNode),this.currentStep++,this.currentNode=this.rootNode;!this.match("eof");)this.match("tag")?this.parseTag():this.match("iccs-move")?this.processMove(this.parseICCS(this.consume().value)):this.match("wxf-move")?this.processMove(this.parseWXF(this.consume().value)):this.match("left-paren")?this.parseVariation():this.match("comment")?this.parseComment():this.consume()}parseTag(){const r=this.consume().value.match(/^\[(\w+)\s+"([^"]*)"\]$/);if(!r)return;const[,s,i]=r;if(this.tags.set(s,i),s.toUpperCase()==="FEN"){const{board:a,turn:l}=er(i);this.currentNode.board=a,this.currentSide=l==="b"?"black":"red"}}createNode(t){const n={id:`node-${this.nodeId++}`,data:t,step:this.currentStep,side:this.currentSide,parentID:this.currentNode.id,children:[],mainID:null,comments:[]};return this.nodeMap.set(n.id,n),n}peek(){return this.tokens[this.currentIndex]}consume(){return this.tokens[this.currentIndex++]}match(t){return this.peek().type===t}parseICCS(t){const[n,r]=t.split("-"),s=n.charCodeAt(0)-65,i=9-parseInt(n[1]),a=r.charCodeAt(0)-65,l=9-parseInt(r[1]);return{from:{x:s,y:i},to:{x:a,y:l},ICCS:t}}parseWXF(t){return{WXF:t,from:{x:0,y:0},to:{x:0,y:0}}}processMove(t){const n=this.createNode(t);n.data.type=this.currentNode.board[t.from.x][t.from.y]??void 0,n.board=this.moveBoard(t),this.nodeMap.set(n.id,n),this.currentNode.children.push(n),this.currentNode=n,this.switchSide(),this.currentStep++}moveBoard(t){const n=this.currentNode.board.map(a=>a.slice()),r=t.from,s=t.to,i=n[r.x][r.y];return n[r.x][r.y]=null,n[s.x][s.y]&&(t.captured=n[s.x][s.y]),n[s.x][s.y]=i,n}parseVariation(){this.consume();const t=this.nodeMap.get(this.currentNode.parentID),n={node:this.currentNode,step:this.currentStep,side:this.currentSide};for(this.currentNode=t,this.currentStep=this.currentStep-1,this.currentSide=this.currentSide==="red"?"black":"red";!this.match("right-paren")&&!this.match("eof");)if(this.match("iccs-move")){const r=this.parseICCS(this.consume().value);this.processMove(r)}else if(this.match("wxf-move")){const r=this.parseWXF(this.consume().value);this.processMove(r)}else if(this.match("comment"))this.parseComment();else if(this.match("left-paren"))this.parseVariation();else if(this.match("result")){this.consume();break}else this.consume();this.match("right-paren")&&this.consume(),this.currentNode=n.node,this.currentStep=n.step,this.currentSide=n.side}parseComment(){const n=this.consume().value.replace(/^{|}$/g,"").replace(/^;/,"").trim();this.currentNode.comments||(this.currentNode.comments=[]),this.currentNode.comments.push(n)}switchSide(){this.currentSide=this.currentSide==="red"?"black":"red"}getTags(){const t=[];for(const[n,r]of this.tags.entries())t.push(`[${n} "${r}"]`);return t.join(`
`)}getRoot(){return this.rootNode}getMap(){return this.nodeMap}}const Fo={init(e){const t=e.eventBus;e.updateMainPath=function(){var u,f;const{currentNode:r,nodeMap:s}=e;if(!r){e.currentPath=[];return}const i=[];let a=r;for(;a;)i.push(a.id),a=a.parentID?s.get(a.parentID):null;i.reverse();const l=[];for(a=((u=r.children)==null?void 0:u[0])||null;a;)l.push(a.id),a=((f=a.children)==null?void 0:f[0])||null;e.currentPath=[...i,...l]},t.on("setViewData",()=>{const n=new Oo(e.data);e.parser=n,e.root=n.getRoot(),e.nodeMap=n.getMap(),e.tags=n.getTags(),e.currentNode=e.nodeMap.get("node-root"),e.currentTurn=e.currentNode.side==="black"?"black":"red",e.board=e.currentNode.board,e.updateMainPath()})}};wn("treemap",Fo);function Xo(e,t){const n=t.minZoom??.5,r=t.maxZoom??4,s=t.zoomSpeed??.2;let i=!1,a=0,l=0,u=0,f=0,d=0;function h(v){if(v.length<2)return 0;const _=v[0].clientX-v[1].clientX,m=v[0].clientY-v[1].clientY;return Math.hypot(_,m)}function g(v,_,m){const{x:y,y:x,scale:b}=t.getState(),P=m?1-s:1+s,R=Math.min(Math.max(b*P,n),r),N=e.getBoundingClientRect(),C=(v-N.left-y)/b,L=(_-N.top-x)/b,Z=v-N.left-C*R,se=_-N.top-L*R;t.setState({x:Z,y:se,scale:R})}function c(v){const _=t.getState();switch(v.type){case"mousedown":{const m=v;if(m.button!==0)return;i=!0,a=m.clientX,l=m.clientY,u=_.x,f=_.y;break}case"mousemove":{if(!i)return;const m=v,y=m.clientX-a,x=m.clientY-l;t.setState({x:u+y,y:f+x,scale:_.scale});break}case"mouseup":case"mouseleave":i=!1;break;case"wheel":{const m=v;m.preventDefault(),g(m.clientX,m.clientY,m.deltaY>0);break}case"touchstart":{const m=v;m.touches.length===1?(i=!0,a=m.touches[0].clientX,l=m.touches[0].clientY,u=_.x,f=_.y):m.touches.length===2&&(i=!1,d=h(m.touches));break}case"touchmove":{const m=v;if(m.preventDefault(),m.touches.length===1&&i){const y=m.touches[0].clientX-a,x=m.touches[0].clientY-l;t.setState({x:u+y,y:f+x,scale:_.scale})}else if(m.touches.length===2){const y=h(m.touches),x=y-d;if(Math.abs(x)>1){const b=(m.touches[0].clientX+m.touches[1].clientX)/2,P=(m.touches[0].clientY+m.touches[1].clientY)/2;g(b,P,x<0),d=y}}break}case"touchend":i=!1;break}}return{handleEvent:c}}function is(e){return e.children.length>1?e:e.children.length>0?is(e.children[0]):null}function Lo(e,t){let n=e;for(;n.mainID;)n=t.get(n.mainID);return n}function Uo(e,t,n,r){let s;n.mainID?s=Lo(n,r):s=n;const i=e.indexOf(s);if(i===-1)return;const a=Array.isArray(t)?t:[t],l=a[0].side==="black"?[...a].reverse():a,u=a[0].side==="red"?i+1:i,f=l.filter(d=>!e.includes(d));e.splice(u,0,...f)}function ss(e,t=0){e.y=t,e.children.map(n=>ss(n,t+1))}function as(e,t){e&&(e.x=t,e.children&&e.children[0]&&as(e.children[0],t))}function os(e,t,n){const r=is(e);r&&(r.children[0].mainID=e.id,Uo(t,r.children,e,n),r.children.forEach(s=>os(s,t,n)))}function Go(e){const t=e.get("node-root");if(!t)return[];const n=[t];return os(t,n,e),n.filter(s=>!s.mainID).forEach((s,i)=>as(s,i)),ss(t),Array.from(e.values()).filter(s=>s.x!==void 0&&s.y!==void 0)}var Yo=Te("<line></line><line></line>",1),Vo=Te("<line></line>"),qo=Te('<circle cx="10" cy="-7" r="3" fill="royalblue"></circle>'),jo=Te('<g transform="translate(-13, -7)"><rect x="0" y="0" width="7" height="7" rx="1.5"></rect><text x="3.5" y="3.5" text-anchor="middle" dominant-baseline="middle" font-size="5px" fill="white" font-weight="bold"> </text></g>'),$o=Te('<g transform="translate(-13, 1)"><rect x="0" y="0" width="7" height="7" rx="1.5"></rect><text x="3.5" y="3.5" text-anchor="middle" dominant-baseline="middle" font-size="5px" fill="white" font-weight="bold"> </text></g>'),zo=Te('<g transform="translate(6.5, 3.5)"><rect x="0" y="0" width="7" height="7" rx="1.5"></rect><text x="3.5" y="3.5" text-anchor="middle" dominant-baseline="middle" font-size="5px" fill="white" font-weight="bold"> </text></g>'),Ho=Te('<g style="cursor: pointer;"><defs><filter id="shadow" x="-50%" y="-50%" width="200%" height="200%"><feDropShadow dx="1" dy="1" stdDeviation="1.5" flood-color="#00000044"></feDropShadow></filter></defs><rect x="-10" y="-6" width="20" height="12" rx="3" ry="3"></rect><text dy="3.5" text-anchor="middle" fill="#FFFFFF" font-size="9px"> </text><!><!><!><!></g>'),Wo=pe('<div class="comment-editor svelte-1kx1m68"><textarea placeholder="添加注释" rows="1" style="resize: none;" class="svelte-1kx1m68"></textarea></div>'),Ko=pe('<div class="container svelte-1kx1m68"><div class="svg-wrapper svelte-1kx1m68"><svg width="100%" height="100%"><g><!><!></g></svg></div> <!></div>');function ls(e,t){if(new.target)return We({component:ls,...e});Ye(t,!1);const n=j(),r=j(),s=j(),i=j(),a=j();let l=M(t,"theme",12),u=M(t,"nodeMap",12),f=M(t,"eventBus",12),d=M(t,"currentNode",12),h=M(t,"currentPath",12),g=j("");const c={"R+":{symbol:"优",color:"red"},"B+":{symbol:"优",color:"black"},"=":{symbol:"均",color:"green"},"?":{symbol:"?",color:"orange"},"!":{symbol:"!",color:"blue"},"R#":{symbol:"胜",color:"red"},"B#":{symbol:"胜",color:"black"}},v={evaluation:["R+","B+","="],moveQuality:["?","!"],gameEnd:["R#","B#"]},_=Object.keys(c);function m(k,p){if(!k.comments)return;const B=v[p];return k.comments.find(T=>B.includes(T))}function y(k){return k.comments?k.comments.filter(p=>_.includes(p)):[]}function x(k){return k.comments?k.comments.filter(p=>!_.includes(p)):[]}function b(){if(!d())return;const k=o(g).split(`
`).filter(B=>B.trim()!==""),p=y(d());d(d().comments=[...p,...k],!0),f().emit("updateUI",null),f().emit("updatePGN",null)}const P=30,R=17;let N=j([]),C=j(),L=j(0),Z=j(0),se=j(1),te=j();function ee(){A(N,Go(u()));const k=Xo(o(C),{getState:()=>({x:o(L),y:o(Z),scale:o(se)}),setState:({x:p,y:B,scale:T})=>{A(L,p),A(Z,B),A(se,T)},minZoom:.5,maxZoom:4,zoomSpeed:.2});A(te,k.handleEvent)}$i(()=>{u().size>0&&(ee(),on().then(ae))});function _e(k){const p=k.target;p.style.height="auto";const Y=20*4;p.scrollHeight>Y?(p.style.height=Y+"px",p.style.overflowY="auto"):(p.style.height=p.scrollHeight+"px",p.style.overflowY="hidden")}function ae(){if(!o(C)||o(N).length===0)return;const{clientWidth:k,clientHeight:p}=o(C),B=40;let T=1/0,Y=-1/0,I=1/0,z=-1/0;for(const re of o(N))T=Math.min(T,re.x),Y=Math.max(Y,re.x),I=Math.min(I,re.y),z=Math.max(z,re.y);const Q=(Y-T)*P,et=(z-I)*R,tt=(k-B*2)/Q,Re=(p-B*2)/et;A(se,Math.max(.75,Math.min(tt,Re,2)));const de=T*P+Q/2,ve=I*R;A(L,k/2-de*o(se)),A(Z,B-ve*o(se))}function oe(k){if(!k||!o(C)||k.x===void 0||k.y===void 0)return;const{clientWidth:p,clientHeight:B}=o(C),T=50,Y=k.x*P*o(se)+o(L),I=k.y*R*o(se)+o(Z);let z=0,Q=0;Y<T?z=T-Y:Y>p-T&&(z=p-T-Y),I<T?Q=T-I:I>B-T&&(Q=B-T-I),(z!==0||Q!==0)&&(A(L,o(L)+z),A(Z,o(Z)+Q))}he(()=>(D(d()),on),()=>{if(d()){const k=d();A(g,x(k).join(`
`)),on().then(()=>oe(k))}else A(g,"")}),he(()=>D(d()),()=>{d()}),he(()=>(o(n),o(r),o(s),o(i),o(a),D(l())),()=>{(k=>{A(n,k.bgColor),A(r,k.red),A(s,k.black),A(i,k.lineColor),A(a,k.textColor)})(Hi[l()])}),he(()=>D(u()),()=>{u().size,ee()}),tn(),ut();var Se=Ko(),Qe=V(Se),ne=V(Qe),Je=V(ne),ct=V(Je);we(ct,1,()=>o(N),be,(k,p)=>{var B=pn(),T=Bt(B);we(T,1,()=>(o(p),S(()=>o(p).children)),be,(Y,I)=>{var z=pn(),Q=Bt(z);{var et=Re=>{var de=Yo(),ve=Bt(de),re=F(ve);W((dt,St,nn,le,xe,ye)=>{w(ve,"x1",(o(p),S(()=>o(p).x*P))),w(ve,"y1",(o(p),S(()=>o(p).y*R))),w(ve,"x2",dt),w(ve,"y2",(o(p),S(()=>o(p).y*R))),w(ve,"stroke",o(i)),w(ve,"stroke-width",St),w(ve,"opacity",nn),w(re,"x1",le),w(re,"y1",(o(p),S(()=>o(p).y*R))),w(re,"x2",(o(I),S(()=>o(I).x*P))),w(re,"y2",(o(I),S(()=>o(I).y*R))),w(re,"stroke",o(i)),w(re,"stroke-width",xe),w(re,"opacity",ye)},[()=>(o(I),o(p),S(()=>(o(I).x-Math.sign(o(I).x-o(p).x))*P)),()=>(D(h()),o(p),o(I),S(()=>h().includes(o(p).id)&&h().includes(o(I).id)?2:.7)),()=>(D(h()),o(p),o(I),S(()=>h().includes(o(p).id)&&h().includes(o(I).id)?1:.7)),()=>(o(I),o(p),S(()=>(o(I).x-Math.sign(o(I).x-o(p).x))*P)),()=>(D(h()),o(p),o(I),S(()=>h().includes(o(p).id)&&h().includes(o(I).id)?2:.7)),()=>(D(h()),o(p),o(I),S(()=>h().includes(o(p).id)&&h().includes(o(I).id)?1:.7))]),U(Re,de)},tt=Re=>{var de=Vo();W((ve,re)=>{w(de,"x1",(o(p),S(()=>o(p).x*P))),w(de,"y1",(o(p),S(()=>o(p).y*R))),w(de,"x2",(o(I),S(()=>o(I).x*P))),w(de,"y2",(o(I),S(()=>o(I).y*R))),w(de,"stroke",o(i)),w(de,"stroke-width",ve),w(de,"opacity",re)},[()=>(D(h()),o(p),o(I),S(()=>h().includes(o(p).id)&&h().includes(o(I).id)?2:.7)),()=>(D(h()),o(p),o(I),S(()=>h().includes(o(p).id)&&h().includes(o(I).id)?1:.7))]),U(Re,de)};je(Q,Re=>{o(p),o(I),S(()=>Math.abs(o(p).x-o(I).x)>1)?Re(et):Re(tt,!1)})}U(Y,z)}),U(k,B)});var Ft=F(ct);we(Ft,1,()=>o(N),be,(k,p)=>{var B=Ho();const T=nt(()=>(o(p),S(()=>m(o(p),"evaluation")))),Y=nt(()=>(o(p),S(()=>m(o(p),"moveQuality")))),I=nt(()=>(o(p),S(()=>m(o(p),"gameEnd"))));var z=F(V(B)),Q=F(z),et=V(Q,!0);X(Q);var tt=F(Q);{var Re=le=>{var xe=qo();U(le,xe)};je(tt,le=>{o(p),S(()=>x(o(p)).join("").length>0)&&le(Re)})}var de=F(tt);{var ve=le=>{var xe=jo();const ye=nt(()=>(D(o(T)),S(()=>c[o(T)])));var vt=V(xe),ht=F(vt),rn=V(ht,!0);X(ht),X(xe),W(()=>{w(vt,"fill",(D(o(ye)),S(()=>o(ye).color))),Le(rn,(D(o(ye)),S(()=>o(ye).symbol)))}),U(le,xe)};je(de,le=>{o(T)&&le(ve)})}var re=F(de);{var dt=le=>{var xe=$o();const ye=nt(()=>(D(o(Y)),S(()=>c[o(Y)])));var vt=V(xe),ht=F(vt),rn=V(ht,!0);X(ht),X(xe),W(()=>{w(vt,"fill",(D(o(ye)),S(()=>o(ye).color))),Le(rn,(D(o(ye)),S(()=>o(ye).symbol)))}),U(le,xe)};je(re,le=>{o(Y)&&le(dt)})}var St=F(re);{var nn=le=>{var xe=zo();const ye=nt(()=>(D(o(I)),S(()=>c[o(I)])));var vt=V(xe),ht=F(vt),rn=V(ht,!0);X(ht),X(xe),W(()=>{w(vt,"fill",(D(o(ye)),S(()=>o(ye).color))),Le(rn,(D(o(ye)),S(()=>o(ye).symbol)))}),U(le,xe)};je(St,le=>{o(I)&&le(nn)})}X(B),W(()=>{w(B,"transform",`translate(${o(p),S(()=>o(p).x*P)??""} ${o(p),S(()=>o(p).y*R)??""})`),w(z,"fill",(o(p),o(r),o(s),S(()=>o(p).side==="red"?o(r):o(p).side==="black"?o(s):"gray"))),w(z,"stroke",o(i)),w(z,"stroke-width",o(p)===d()?1.5:.5),zt(z,o(p)===d()?"filter: url(#shadow);":""),Le(et,(o(p),D(Fe),S(()=>o(p).data&&o(p).data.type?Fe[o(p).data.type]:"开局")))}),ue("click",B,()=>f().emit("node-click",o(p).id)),ue("dblclick",B,()=>f().emit("node-dblclick",o(p).id)),U(k,B)}),X(Je),X(ne),ln(ne,k=>A(C,k),()=>o(C)),X(Qe);var ft=F(Qe,2);{var Xt=k=>{var p=Wo(),B=V(p);wa(B),X(p),Ya(B,()=>o(g),T=>A(g,T)),ue("input",B,_e),ue("blur",B,b),U(k,p)};je(ft,k=>{d()&&k(Xt)})}return X(Se),W(()=>{zt(Se,`--theme-text-color: ${o(a)??""}`),zt(ne,`user-select: none; touch-action: none; background-color:${o(n)??""}; display: block;`),w(Je,"transform",`translate(${o(L)??""} ${o(Z)??""}) scale(${o(se)??""})`)}),ue("mousedown",ne,function(...k){var p;(p=o(te))==null||p.apply(this,k)}),ue("mousemove",ne,function(...k){var p;(p=o(te))==null||p.apply(this,k)}),ue("mouseup",ne,function(...k){var p;(p=o(te))==null||p.apply(this,k)}),ue("mouseleave",ne,function(...k){var p;(p=o(te))==null||p.apply(this,k)}),ue("wheel",ne,function(...k){var p;(p=o(te))==null||p.apply(this,k)}),ue("touchstart",ne,function(...k){var p;(p=o(te))==null||p.apply(this,k)}),ue("touchmove",ne,function(...k){var p;(p=o(te))==null||p.apply(this,k)}),ue("touchend",ne,function(...k){var p;(p=o(te))==null||p.apply(this,k)}),U(e,Se),Ve({get theme(){return l()},set theme(k){l(k),E()},get nodeMap(){return u()},set nodeMap(k){u(k),E()},get eventBus(){return f()},set eventBus(k){f(k),E()},get currentNode(){return d()},set currentNode(k){d(k),E()},get currentPath(){return h()},set currentPath(k){h(k),E()},$set:Ze,$on:(k,p)=>Ke(t,k,p)})}var Zo=pe('<button class="toolbar-btn"></button>'),Qo=pe('<button class="toolbar-btn"> </button>'),Jo=pe('<div class="toolbar-container svelte-ckky31"><!> <hr/> <!></div>');function us(e,t){if(new.target)return We({component:us,...e});Ye(t,!1);let n=M(t,"eventBus",12);const r=[{title:"删除",icon:"circle-x",event:"remove"},{title:"提升",icon:"arrow-up-wide-narrow",event:"promote"},{title:"开局",icon:"arrow-left-to-line",event:"toStart"},{title:"回退",icon:"chevron-left",event:"back"},{title:"前进",icon:"chevron-right",event:"next"},{title:"终局",icon:"arrow-right-to-line",event:"toEnd"}],s=[{title:"红优",symbol:"R+",event:"annotation"},{title:"黑优",symbol:"B+",event:"annotation"},{title:"均势",symbol:"=",event:"annotation"},{title:"问题手",symbol:"?",event:"annotation"},{title:"妙手",symbol:"!",event:"annotation"}];function i(d,h=null){n().emit("btn-click",{name:d,payload:h})}function a(d,h){return J.setIcon(d,h),{update(g){J.setIcon(d,g)}}}ut();var l=Jo(),u=V(l);we(u,1,()=>r,be,(d,h)=>{let g=()=>o(h).title,c=()=>o(h).icon,v=()=>o(h).event;var _=Zo();fr(_,(m,y)=>a==null?void 0:a(m,y),c),gn(()=>ue("click",_,()=>i(v()))),W(()=>w(_,"aria-label",g())),U(d,_)});var f=F(u,4);return we(f,1,()=>s,be,(d,h)=>{let g=()=>o(h).title,c=()=>o(h).symbol,v=()=>o(h).event;var _=Qo(),m=V(_,!0);X(_),W(()=>{w(_,"aria-label",g()),Le(m,c())}),ue("click",_,()=>i(v(),c())),U(d,_)}),X(l),U(e,l),Ve({get eventBus(){return n()},set eventBus(d){n(d),E()},$set:Ze,$on:(d,h)=>Ke(t,d,h)})}var el=pe('<div class="tree-view svelte-e6ahww"><!> <!> <!></div>');function cs(e,t){if(new.target)return We({component:cs,...e});Ye(t,!1);let n=M(t,"settings",12),r=M(t,"board",12),s=M(t,"markedPos",12),i=M(t,"currentTurn",12),a=M(t,"eventBus",12),l=M(t,"nodeMap",12),u=M(t,"currentNode",12),f=M(t,"currentPath",12);ut();var d=el(),h=V(d);jn(h,{get settings(){return n()},get board(){return r()},get markedPos(){return s()},get currentTurn(){return i()},get eventBus(){return a()},rotated:!1});var g=F(h,2);us(g,{get eventBus(){return a()}});var c=F(g,2);return ls(c,{get theme(){return D(n()),S(()=>n().theme)},get nodeMap(){return l()},get eventBus(){return a()},get currentNode(){return u()},get currentPath(){return f()}}),X(d),U(e,d),Ve({get settings(){return n()},set settings(v){n(v),E()},get board(){return r()},set board(v){r(v),E()},get markedPos(){return s()},set markedPos(v){s(v),E()},get currentTurn(){return i()},set currentTurn(v){i(v),E()},get eventBus(){return a()},set eventBus(v){a(v),E()},get nodeMap(){return l()},set nodeMap(v){l(v),E()},get currentNode(){return u()},set currentNode(v){u(v),E()},get currentPath(){return f()},set currentPath(v){f(v),E()},$set:Ze,$on:(v,_)=>Ke(t,v,_)})}class Fr{static init(t){t.TreeViewModule=new Fr(t)}constructor(t){const n=t.eventBus;n.on("createUI",()=>{const r=t.contentEl;t.Xiangqi=new cs({target:r,props:{nodeMap:t.nodeMap,settings:t.settings,board:t.currentNode.board,markedPos:t.markedPos,currentTurn:t.currentTurn,eventBus:t.eventBus,currentNode:t.currentNode,currentPath:t.currentPath}})}),n.on("updateUI",()=>{t.Xiangqi.$set({settings:t.settings,nodeMap:t.nodeMap,board:t.currentNode.board,markedPos:t.markedPos,currentTurn:t.currentTurn,currentNode:t.currentNode,currentPath:t.currentPath})})}}wn("Tree",Fr);const tl={init(e){const t=e.eventBus;t.on("runmove",n=>{const{from:r,to:s}=n,i=e.currentNode;for(let f of i.children)if(f.data&&f.data.from.x===r.x&&f.data.from.y===r.y&&f.data.to.x===s.x&&f.data.to.y===s.y){e.currentNode=f,e.board=e.currentNode.board,e.currentTurn=e.currentTurn==="red"?"black":"red",e.updateMainPath(),t.emit("updateUI");return}const a=e.currentNode.board[n.from.x][n.from.y];n.type=a,n.ICCS=ni(n),e.nodeId=e.parser.nodeId;const l={id:`node-${e.parser.nodeId++}`,data:n,step:e.currentStep,side:e.currentTurn,parentID:e.currentNode.id,children:[],mainID:null,comments:[]};e.nodeMap.set(l.id,l);const u=e.currentNode.board.map(f=>f.slice());u[n.from.x][n.from.y]=null,u[n.to.x][n.to.y]&&(n.captured=u[n.to.x][n.to.y]),u[n.to.x][n.to.y]=a,l.board=u,e.board=u,e.currentNode.children.push(l),e.currentNode=l,e.currentTurn=e.currentTurn==="red"?"black":"red",e.currentStep++,e.updateMainPath(),t.emit("updateUI"),t.emit("updatePGN")}),t.on("node-click",n=>{e.currentNode=e.nodeMap.get(n),e.board=e.currentNode.board,e.currentTurn=e.currentNode.side==="red"?"black":"red",e.updateMainPath(),e.eventBus.emit("updateUI")}),t.on("node-dblclick",n=>{}),t.on("updatePGN",()=>{const n=nl(e.root);e.data=e.tags+`
`+n,e.saveFile()}),t.on("btn-click",n=>{const{name:r,payload:s}=n;switch(r){case"annotation":{if(!e.currentNode)break;const i=e.currentNode;i.comments||(i.comments=[]);const a={evaluation:["R+","B+","="],moveQuality:["?","!"],gameEnd:["R#","B#"]},l=Object.keys(a).find(f=>a[f].includes(s)),u=i.comments.indexOf(s);l&&(i.comments=i.comments.filter(f=>!a[l].includes(f))),u===-1&&i.comments.push(s);break}case"remove":{let i=function(u){for(const f of u.children)i(f);e.nodeMap.delete(u.id)};if(e.currentNode.id==="node-root"){e.currentNode.children=[],e.nodeMap.clear(),e.nodeMap.set(e.currentNode.id,e.currentNode),e.board=e.currentNode.board,e.currentTurn="red",e.currentStep=0;break}const a=e.currentNode,l=e.nodeMap.get(a.parentID);if(e.currentNode=l,l){const u=l.children.indexOf(a);u!==-1&&l.children.splice(u,1)}i(a),e.updateMainPath();break}case"promote":{if(!e.currentNode.parentID||e.currentNode.id==="node-root")break;let i=e.currentNode,a=e.nodeMap.get(i.parentID);if(!a)break;for(;a.children.length>0&&a.children[0].id===i.id&&!(!a.parentID||(i=a,a=e.nodeMap.get(a.parentID),!a)););for(const f of a.children)f.mainID=null;const l=a.children,u=l.findIndex(f=>f.id===i.id);if(u>0){const f=l[u],d=l.filter(h=>h.id!==f.id);a.children=[f,...d]}e.updateMainPath();break}case"toStart":{e.currentNode=e.nodeMap.get(e.currentPath[0]),e.board=e.currentNode.board,e.currentTurn=e.currentNode.side==="red"?"black":"red";break}case"back":{e.currentNode.parentID&&(e.currentNode=e.nodeMap.get(e.currentNode.parentID),e.board=e.currentNode.board,e.currentTurn=e.currentNode.side==="red"?"black":"red");break}case"next":{const i=e.currentPath.indexOf(e.currentNode.id);if(i<e.currentPath.length-1){const a=e.currentPath[i+1];e.currentNode=e.nodeMap.get(a),e.board=e.currentNode.board,e.currentTurn=e.currentNode.side==="red"?"black":"red"}break}case"toEnd":{e.currentNode=e.nodeMap.get(e.currentPath[e.currentPath.length-1]),e.board=e.currentNode.board,e.currentTurn=e.currentNode.side==="red"?"black":"red";break}}t.emit("updateUI"),t.emit("updatePGN")})}};wn("actions",tl);function nl(e){let t=n(e);function n(i){const a=new Map;function l(u){if(u.children.length>1){const[f,...d]=u.children;a.set(f,d)}for(const f of u.children)l(f)}return l(i),a}function r(i,a){var f;let l="";if(i.side==="red"?l+=`${a}. ${i.data.ICCS}`:i.side==="black"&&(l+=`${i.data.ICCS}`),(f=i.comments)!=null&&f.length)for(const d of i.comments)l+=`{${d}}`;const u=t.get(i);if(u!=null&&u.length)for(const d of u)d.side==="red"?l+=` (${r(d,a)})`:d.side==="black"&&(l+=` (${a}. ...${r(d,a)})`);if(i.children[0]){const d=i.children[0],h=d.side==="red"?a+1:a;l+=` ${r(d,h)}`}return l}return r(e,0)}const Xn=class Xn extends J.TextFileView{constructor(n,r){super(n);H(this,"settings");H(this,"eventBus");this.plugin=r,this.settings=this.plugin.settings,this.data="",ms(this)}setViewData(n,r=!0){this.data=n,this.eventBus.emit("setViewData"),this.eventBus.emit("createUI")}async saveFile(){this.file&&await this.app.vault.modify(this.file,this.data)}async onOpen(){await super.onOpen(),this.plugin.renderChildren.add(this),this.contentEl.empty()}refresh(){this.eventBus.emit("updateUI")}async onClose(){return this.plugin.renderChildren.delete(this),super.onClose()}getViewType(){return Xn.VIEW_TYPE}getViewData(){return this.data}getDisplayText(){return this.file?this.file.basename:"PGN View"}getIcon(){return"dice"}clear(){_s(this)}};H(Xn,"VIEW_TYPE","PGN_FILE_TYPE");let Yt=Xn;const ei={position:"right",theme:"dark",autoTheme:!0,cellSize:50,fontSize:12,autoJump:"auto",enableSpeech:!0,showPGN:!0,showPGNtxt:!0,viewOnly:!1,rotated:!1};class rl extends J.PluginSettingTab{constructor(n,r){super(n,r);H(this,"plugin");this.plugin=r}display(){const n=this.plugin.settings;let{containerEl:r}=this;r.empty(),new J.Setting(r).setName("主题").setDesc("设置棋盘主题.").addDropdown(s=>{s.addOptions({light:"浅色",dark:"深色",auto:"跟随"}),s.setValue(n.autoTheme?"auto":n.theme).onChange(i=>{if(i==="auto"){n.autoTheme=!0;const a=()=>document.body.classList.contains("theme-dark");n.theme=a()?"dark":"light"}else n.autoTheme=!1,n.theme=i;this.plugin.refresh()})}),new J.Setting(r).setName("按钮布局").setDesc("设置按钮的位置.").addDropdown(s=>{s.addOptions({right:"右侧",bottom:"底部"}),s.setValue(n.position).onChange(i=>{n.position=i,this.plugin.refresh()})}),new J.Setting(r).setName("界面大小").setDesc("调整棋盘大小").addSlider(s=>{const i=s.sliderEl.parentElement,a=createEl("span",{text:Math.abs(n.cellSize).toString(),cls:"slider-value-label"});i.prepend(a),s.setLimits(15,100,1).setValue(n.cellSize).onChange(l=>{n.cellSize=l,a.textContent=l.toString(),this.plugin.refresh()}),s.sliderEl.addEventListener("input",()=>{const l=s.getValue();n.cellSize=l,a.textContent=l.toString()})}),r.createEl("h2",{text:"着法列表"}),new J.Setting(r).setName("启用着法列表").setDesc("是否显示棋谱").addToggle(s=>s.setValue(n.showPGN).onChange(i=>{n.showPGN=i,this.plugin.refresh()})),new J.Setting(r).setName("显示着法文字").setDesc("是否显示棋谱着法文字").addToggle(s=>s.setValue(n.showPGNtxt).onChange(i=>{n.showPGNtxt=i,this.plugin.refresh(),this.display()})),new J.Setting(r).setName("着法文字大小").setDesc("调整着法文字大小").addSlider(s=>{const i=s.sliderEl.parentElement,a=createEl("span",{text:Math.abs(n.fontSize).toString(),cls:"slider-value-label"});i.prepend(a),s.setLimits(10,25,1).setValue(n.fontSize).onChange(l=>{n.fontSize=l,a.textContent=l.toString(),this.plugin.refresh()}),s.sliderEl.addEventListener("input",()=>{const l=s.getValue();n.fontSize=l,a.textContent=l.toString()})}),new J.Setting(r).setName("开局跳转").setDesc("初始渲染时默认跳转至终局").addDropdown(s=>{s.addOptions({never:"从不",always:"始终",auto:"无FEN即正常开局时"}).setValue(n.autoJump).onChange(async i=>{n.autoJump=i})}),window.speechSynthesis&&new J.Setting(r).setName("朗读着法").setDesc("是否朗读棋谱走法").addToggle(s=>s.setValue(n.enableSpeech).onChange(i=>{n.enableSpeech=i}))}async hide(){this.plugin.refresh(),this.plugin.saveSettings()}}class il extends J.Plugin{constructor(){super(...arguments);H(this,"settings",ei);H(this,"renderChildren",new Set)}async onload(){await this.loadSettings(),this.addSettingTab(new rl(this.app,this)),this.registerMarkdownCodeBlockProcessor("xiangqi",(n,r,s)=>{const i=new No(r,s,n,this);s.addChild(i)}),this.registerMarkdownCodeBlockProcessor("xq",(n,r,s)=>{const i=new Ro(r,s,n,this);s.addChild(i)}),this.registerView(Yt.VIEW_TYPE,n=>new Yt(n,this)),this.registerExtensions(["pgn"],Yt.VIEW_TYPE),this.registerEvent(this.app.workspace.on("css-change",()=>{if(this.settings.autoTheme){const n=()=>document.body.classList.contains("theme-dark");this.settings.theme=n()?"dark":"light",this.refresh()}}))}refresh(){this.renderChildren.forEach(n=>{n.refresh()})}async loadSettings(){const n=await this.loadData();this.settings={...ei,...n}}async saveSettings(){await this.saveData(this.settings)}async onunload(){this.app.workspace.detachLeavesOfType(Yt.VIEW_TYPE)}}module.exports=il;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
