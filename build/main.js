"use strict";var $i=Object.defineProperty;var _r=e=>{throw TypeError(e)};var Ui=(e,t,n)=>t in e?$i(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n;var ne=(e,t,n)=>Ui(e,typeof t!="symbol"?t+"":t,n),Tn=(e,t,n)=>t.has(e)||_r("Cannot "+n);var S=(e,t,n)=>(Tn(e,t,"read from private field"),n?n.call(e):t.get(e)),re=(e,t,n)=>t.has(e)?_r("Cannot add the same private member more than once"):t instanceof WeakSet?t.add(e):t.set(e,n),le=(e,t,n,r)=>(Tn(e,t,"write to private field"),r?r.call(e,n):t.set(e,n),n),At=(e,t,n)=>(Tn(e,t,"access private method"),n);const j=require("obsidian");function Ir(){const e=new Map,t=new WeakMap;function n(i,a){e.has(i)||e.set(i,a)}function r(i){if(t.has(i))return t.get(i);const a=new Map;for(const[l,f]of e){const d=f.init(i);a.set(l,d??f)}return t.set(i,a),a}function s(i){const a=t.get(i);if(a){for(const l of a.values())typeof l.destroy=="function"&&l.destroy();a.clear(),t.delete(i)}}return{register:n,createRegistry:r,destroyRegistry:s}}const zn=Ir();function at(e,t){zn.register(e,t)}function Gi(e){return zn.createRegistry(e)}function qi(e){zn.destroyRegistry(e)}const Hn=Ir();function jt(e,t){Hn.register(e,t)}function Xi(e){return Hn.createRegistry(e)}function ji(e){Hn.destroyRegistry(e)}class pn{constructor(t){ne(this,"handlers",new Map);this.host=t}static init(t){t.eventBus=new pn(t)}destroy(){this.handlers.clear()}on(t,n){this.handlers.has(t)||this.handlers.set(t,new Set),this.handlers.get(t).add(n)}emit(t,n){const r=this.handlers.get(t);if(!r)return;const s=arguments.length===2;for(const i of r)s?i(n):i()}off(t,n){var r;(r=this.handlers.get(t))==null||r.delete(n)}}at("eventBus",pn);jt("eventBus",pn);const Ce={k:"将",a:"士",b:"象",r:"车",n:"马",c:"砲",p:"卒",K:"帅",A:"仕",B:"相",R:"俥",N:"傌",C:"炮",P:"兵"};function Cn(e){var v;const t=Vi(e);let n=!1,r=(v=e.match(/([rnbakcpRNBAKCP1-9]+\/){9}[rnbakcpRNBAKCP1-9]+(?:\s+[wb])?/))==null?void 0:v[0];r?n=!0:r="rnbakabnr/9/1c5c1/p1p1p1p1p/9/9/P1P1P1P1P/1C5C1/9/RNBAKABNR";const s=Array.from({length:10},()=>Array(9).fill(null)),[i,a]=r.trim().split(/\s+/);i.split("/").forEach((u,c)=>{let m=0;for(const p of u)/[1-9]/.test(p)?m+=parseInt(p):/[a-zA-Z]/.test(p)&&(s[m][c]=p,m++)});const f=a==="b"?"blue":"red",d=e.match(/\b[A-Z]\d-[A-Z]\d\b/g)||[];let h=s.map(u=>[...u]);const g=d.map(u=>{const c=zi(u,h);return c.WXF=Or(c,h),h[c.to.x][c.to.y]=h[c.from.x][c.from.y],h[c.from.x][c.from.y]=null,c});return{haveFEN:n,board:s,PGN:g,firstTurn:f,options:t}}function Vi(e){const t={};return[{key:"protected",regex:/\b(protected|P)\s*[:：]\s*(true|false)\s*/i},{key:"rotated",regex:/\b(rotated|r)\s*[:：]\s*(true|false)\s*/i}].forEach(({key:r,regex:s})=>{const i=e.match(s);i&&(t[r]=i[2].toLowerCase()==="true")}),t}function zi(e,t){const[n,r]=e.split("-"),s=n.charCodeAt(0)-65,i=9-parseInt(n[1]),a=r.charCodeAt(0)-65,l=9-parseInt(r[1]),f={x:s,y:i},d={x:a,y:l},h=t[s][i];return h?{type:h,from:f,to:d,ICCS:e}:{from:f,to:d,ICCS:e}}function Hi(e){if(e.from.x==null||e.from.y==null||e.to.x==null||e.to.y==null)throw new Error("Invalid move: x and y must be numbers");const t=s=>{if(s<0||s>25)throw new Error(`x must be between 0 and 25, got ${s}`);return String.fromCharCode(65+s)},n=`${t(e.from.x)}${9-e.from.y}`,r=`${t(e.to.x)}${9-e.to.y}`;return`${n}-${r}`}function Or(e,t){const n={horizontal:"平",forward:"进",backward:"退"},r=["一","二","三","四","五","六","七","八","九"],s=["1","2","3","4","5","6","7","8","9"],{from:i,to:a}=e,l=t[i.x][i.y];if(!l)return"";const f=l===l.toUpperCase(),d=f?r:s,h=Array.from({length:9},()=>Array(10).fill(null));let g=i.x,v=i.y,u=a.x,c=a.y;if(f){for(let y=0;y<9;y++)for(let E=0;E<10;E++)h[y][E]=t[8-y][9-E];g=8-i.x,v=9-i.y,u=8-a.x,c=9-a.y}else for(let y=0;y<9;y++)for(let E=0;E<10;E++)h[y][E]=t[y][E];let m="",p=[];for(let y=0;y<10;y++)h[g][y]===l&&p.push(y);if(p.length===1)m=Ce[l]+d[g];else if(p.length===2){const y=p.indexOf(v);y===0?m="后"+Ce[l]:y===1&&(m="前"+Ce[l])}else if(p.length===3){const y=p.indexOf(v);y===0?m="后"+Ce[l]:y===1?m="中"+Ce[l]:y===2&&(m="前"+Ce[l])}let _,w;if(g===u){const y=c-v;_=y>0?n.forward:n.backward,w=d[Math.abs(y)-1]}else v===c?(_=n.horizontal,w=d[u]):(_=v<c?n.forward:n.backward,w=d[u]);return`${m}${_}${w}`}const Dr={init(e){const t=e.eventBus;t.on("load",n=>{switch(n){case"xq":const{haveFEN:r,board:s,PGN:i,firstTurn:a,options:l}=Cn(e.source);e.haveFEN=r,e.board=s,e.PGN=i,e.currentTurn=a,e.currentStep=0,e.options=l;break;case"fen":e.board=Cn("").board,e.currentTurn="red";break}}),t.on("full",()=>{e.board=Cn("").board,t.emit("updateUI")})}};at("source",Dr);jt("source",Dr);const he=2,Yn=4,_n=8,Vt=16,$e=32,kt=64,Fr=128,de=256,ln=512,Z=1024,ve=2048,Ke=4096,Ee=8192,lt=16384,Wn=32768,Kn=65536,yr=1<<17,Yi=1<<18,Zn=1<<19,Qn=1<<20,Rn=1<<21,Jn=1<<22,nt=1<<23,rt=Symbol("$state"),Lr=Symbol("legacy props"),Wi=Symbol(""),er=new class extends Error{constructor(){super(...arguments);ne(this,"name","StaleReactionError");ne(this,"message","The reaction that called `getAbortSignal()` was re-run or destroyed")}},$r=3,It=8,Ur=!1;var tr=Array.isArray,Ki=Array.prototype.indexOf,nr=Array.from,un=Object.defineProperty,_t=Object.getOwnPropertyDescriptor,Gr=Object.getOwnPropertyDescriptors,Zi=Object.prototype,Qi=Array.prototype,rr=Object.getPrototypeOf,mr=Object.isExtensible;function Ji(e){return e()}function on(e){for(var t=0;t<e.length;t++)e[t]()}function es(){var e,t,n=new Promise((r,s)=>{e=r,t=s});return{promise:n,resolve:e,reject:t}}function ts(e,t){if(Array.isArray(e))return e;if(!(Symbol.iterator in e))return Array.from(e);const n=[];for(const r of e)if(n.push(r),n.length===t)break;return n}function qr(e){return e===this.v}function Xr(e,t){return e!=e?t==t:e!==t||e!==null&&typeof e=="object"||typeof e=="function"}function jr(e){return!Xr(e,this.v)}function ns(){throw new Error("https://svelte.dev/e/await_outside_boundary")}function rs(e){throw new Error("https://svelte.dev/e/lifecycle_outside_component")}function is(){throw new Error("https://svelte.dev/e/async_derived_orphan")}function ss(e){throw new Error("https://svelte.dev/e/effect_in_teardown")}function as(){throw new Error("https://svelte.dev/e/effect_in_unowned_derived")}function ls(e){throw new Error("https://svelte.dev/e/effect_orphan")}function us(){throw new Error("https://svelte.dev/e/effect_update_depth_exceeded")}function os(){throw new Error("https://svelte.dev/e/hydration_failed")}function fs(e){throw new Error("https://svelte.dev/e/props_invalid_value")}function cs(){throw new Error("https://svelte.dev/e/state_descriptors_fixed")}function ds(){throw new Error("https://svelte.dev/e/state_prototype_fixed")}function vs(){throw new Error("https://svelte.dev/e/state_unsafe_mutation")}let Tt=!1,hs=!1;function gs(){Tt=!0}const yn=1,mn=2,Vr=4,ps=8,_s=16,ys=1,ms=2,ws=4,bs=8,xs=16,Es=1,Ss=2,zr="[",ir="[!",sr="]",yt={},ee=Symbol(),Ps="http://www.w3.org/1999/xhtml";let q=null;function fn(e){q=e}function Ze(e,t=!1,n){q={p:q,c:null,e:null,s:e,x:null,l:Tt&&!t?{s:null,u:null,$:[]}:null}}function Qe(e){var t=q,n=t.e;if(n!==null){t.e=null;for(var r of n)hi(r)}return e!==void 0&&(t.x=e),q=t.p,e??{}}function zt(){return!Tt||q!==null&&q.l===null}function wn(e){console.warn("https://svelte.dev/e/hydration_mismatch")}let R=!1;function De(e){R=e}let O;function Se(e){if(e===null)throw wn(),yt;return O=e}function bn(){return Se(Je(O))}function G(e){if(R){if(Je(O)!==null)throw wn(),yt;O=e}}function In(){for(var e=0,t=O;;){if(t.nodeType===It){var n=t.data;if(n===sr){if(e===0)return t;e-=1}else(n===zr||n===ir)&&(e+=1)}var r=Je(t);t.remove(),t=r}}function Hr(e){if(!e||e.nodeType!==It)throw wn(),yt;return e.data}function gt(e){if(typeof e!="object"||e===null||rt in e)return e;const t=rr(e);if(t!==Zi&&t!==Qi)return e;var n=new Map,r=tr(e),s=Ge(0),i=st,a=l=>{if(st===i)return l();var f=M,d=st;Me(null),Pr(i);var h=l();return Me(f),Pr(d),h};return r&&n.set("length",Ge(e.length)),new Proxy(e,{defineProperty(l,f,d){(!("value"in d)||d.configurable===!1||d.enumerable===!1||d.writable===!1)&&cs();var h=n.get(f);return h===void 0?h=a(()=>{var g=Ge(d.value);return n.set(f,g),g}):A(h,d.value,!0),!0},deleteProperty(l,f){var d=n.get(f);if(d===void 0){if(f in l){const h=a(()=>Ge(ee));n.set(f,h),Nn(s)}}else A(d,ee),Nn(s);return!0},get(l,f,d){var u;if(f===rt)return e;var h=n.get(f),g=f in l;if(h===void 0&&(!g||(u=_t(l,f))!=null&&u.writable)&&(h=a(()=>{var c=gt(g?l[f]:ee),m=Ge(c);return m}),n.set(f,h)),h!==void 0){var v=o(h);return v===ee?void 0:v}return Reflect.get(l,f,d)},getOwnPropertyDescriptor(l,f){var d=Reflect.getOwnPropertyDescriptor(l,f);if(d&&"value"in d){var h=n.get(f);h&&(d.value=o(h))}else if(d===void 0){var g=n.get(f),v=g==null?void 0:g.v;if(g!==void 0&&v!==ee)return{enumerable:!0,configurable:!0,value:v,writable:!0}}return d},has(l,f){var v;if(f===rt)return!0;var d=n.get(f),h=d!==void 0&&d.v!==ee||Reflect.has(l,f);if(d!==void 0||N!==null&&(!h||(v=_t(l,f))!=null&&v.writable)){d===void 0&&(d=a(()=>{var u=h?gt(l[f]):ee,c=Ge(u);return c}),n.set(f,d));var g=o(d);if(g===ee)return!1}return h},set(l,f,d,h){var y;var g=n.get(f),v=f in l;if(r&&f==="length")for(var u=d;u<g.v;u+=1){var c=n.get(u+"");c!==void 0?A(c,ee):u in l&&(c=a(()=>Ge(ee)),n.set(u+"",c))}if(g===void 0)(!v||(y=_t(l,f))!=null&&y.writable)&&(g=a(()=>Ge(void 0)),A(g,gt(d)),n.set(f,g));else{v=g.v!==ee;var m=a(()=>gt(d));A(g,m)}var p=Reflect.getOwnPropertyDescriptor(l,f);if(p!=null&&p.set&&p.set.call(h,d),!v){if(r&&typeof f=="string"){var _=n.get("length"),w=Number(f);Number.isInteger(w)&&w>=_.v&&A(_,w+1)}Nn(s)}return!0},ownKeys(l){o(s);var f=Reflect.ownKeys(l).filter(g=>{var v=n.get(g);return v===void 0||v.v!==ee});for(var[d,h]of n)h.v!==ee&&!(d in l)&&f.push(d);return f},setPrototypeOf(){ds()}})}var wr,Yr,Wr,Kr;function On(){if(wr===void 0){wr=window,Yr=/Firefox/.test(navigator.userAgent);var e=Element.prototype,t=Node.prototype,n=Text.prototype;Wr=_t(t,"firstChild").get,Kr=_t(t,"nextSibling").get,mr(e)&&(e.__click=void 0,e.__className=void 0,e.__attributes=null,e.__style=void 0,e.__e=void 0),mr(n)&&(n.__t=void 0)}}function Ye(e=""){return document.createTextNode(e)}function xe(e){return Wr.call(e)}function Je(e){return Kr.call(e)}function K(e,t){if(!R)return xe(e);var n=xe(O);if(n===null)n=O.appendChild(Ye());else if(t&&n.nodeType!==$r){var r=Ye();return n==null||n.before(r),Se(r),r}return Se(n),n}function sn(e,t){if(!R){var n=xe(e);return n instanceof Comment&&n.data===""?Je(n):n}return O}function L(e,t=1,n=!1){let r=R?O:e;for(var s;t--;)s=r,r=Je(r);if(!R)return r;if(n&&(r==null?void 0:r.nodeType)!==$r){var i=Ye();return r===null?s==null||s.after(i):r.before(i),Se(i),i}return Se(r),r}function Zr(e){e.textContent=""}function Qr(){return!1}const ks=new WeakMap;function Ts(e){var t=N;if(t===null)return M.f|=nt,e;if(t.f&Wn)ar(e,t);else{if(!(t.f&Fr))throw!t.parent&&e instanceof Error&&Jr(e),e;t.b.error(e)}}function ar(e,t){for(;t!==null;){if(t.f&Fr)try{t.b.error(e);return}catch{}t=t.parent}throw e instanceof Error&&Jr(e),e}function Jr(e){const t=ks.get(e);t&&(un(e,"message",{value:t.message}),un(e,"stack",{value:t.stack}))}let Ot=[],Dn=[];function ei(){var e=Ot;Ot=[],on(e)}function Cs(){var e=Dn;Dn=[],on(e)}function lr(e){Ot.length===0&&queueMicrotask(ei),Ot.push(e)}function Ns(){Ot.length>0&&ei(),Dn.length>0&&Cs()}function Ms(){for(var e=N.b;e!==null&&!e.has_pending_snippet();)e=e.parent;return e===null&&ns(),e}function Ht(e){var t=he|ve,n=M!==null&&M.f&he?M:null;return N===null||n!==null&&n.f&de?t|=de:N.f|=Zn,{ctx:q,deps:null,effects:null,equals:qr,f:t,fn:e,reactions:null,rv:0,v:ee,wv:0,parent:n??N,ac:null}}function Bs(e,t){let n=N;n===null&&is();var r=n.b,s=void 0,i=Ft(ee),a=null,l=!M;return js(()=>{try{var f=e()}catch(u){f=Promise.reject(u)}var d=()=>f;s=(a==null?void 0:a.then(d,d))??Promise.resolve(f),a=s;var h=ue,g=r.pending;l&&(r.update_pending_count(1),g||h.increment());const v=(u,c=void 0)=>{a=null,g||h.activate(),c?c!==er&&(i.f|=nt,Lt(i,c)):(i.f&nt&&(i.f^=nt),Lt(i,u)),l&&(r.update_pending_count(-1),g||h.decrement()),ri()};if(s.then(v,u=>v(null,u||"unknown")),h)return()=>{queueMicrotask(()=>h.neuter())}}),new Promise(f=>{function d(h){function g(){h===s?f(i):d(s)}h.then(g,g)}d(s)})}function As(e){const t=Ht(e);return li(t),t}function ur(e){const t=Ht(e);return t.equals=jr,t}function ti(e){var t=e.effects;if(t!==null){e.effects=null;for(var n=0;n<t.length;n+=1)Fe(t[n])}}function Rs(e){for(var t=e.parent;t!==null;){if(!(t.f&he))return t;t=t.parent}return null}function or(e){var t,n=N;We(Rs(e));try{ti(e),t=fi(e)}finally{We(n)}return t}function ni(e){var t=or(e);if(e.equals(t)||(e.v=t,e.wv=ui()),!ut)if(je!==null)je.set(e,e.v);else{var n=(Ve||e.f&de)&&e.deps!==null?Ke:Z;Q(e,n)}}function Is(e,t,n){const r=zt()?Ht:ur;if(t.length===0){n(e.map(r));return}var s=ue,i=N,a=Os(),l=Ms();Promise.all(t.map(f=>Bs(f))).then(f=>{s==null||s.activate(),a();try{n([...e.map(r),...f])}catch(d){i.f&lt||ar(d,i)}s==null||s.deactivate(),ri()}).catch(f=>{l.error(f)})}function Os(){var e=N,t=M,n=q;return function(){We(e),Me(t),fn(n)}}function ri(){We(null),Me(null),fn(null)}const en=new Set;let ue=null,je=null,br=new Set,pt=[],xn=null,Fn=!1;var Gt,xt,Et,qe,qt,Xt,et,St,Xe,Ie,tt,Le,ii,si,Ln;const gr=class gr{constructor(){re(this,Le);re(this,Gt,new Map);re(this,xt,new Map);re(this,Et,new Set);re(this,qe,0);re(this,qt,null);re(this,Xt,!1);re(this,et,[]);re(this,St,[]);re(this,Xe,[]);re(this,Ie,[]);re(this,tt,[]);ne(this,"skipped_effects",new Set)}capture(t,n){S(this,xt).has(t)||S(this,xt).set(t,n),S(this,Gt).set(t,t.v)}activate(){ue=this}deactivate(){ue=null;for(const t of br)if(br.delete(t),t(),ue!==null)break}neuter(){le(this,Xt,!0)}flush(){pt.length>0?this.flush_effects():At(this,Le,Ln).call(this),ue===this&&(S(this,qe)===0&&en.delete(this),this.deactivate())}flush_effects(){var t=mt;Fn=!0;try{var n=0;for(Er(!0);pt.length>0;){if(n++>1e3){var r,s;Ds()}At(this,Le,ii).call(this,pt),it.clear()}}finally{Fn=!1,Er(t),xn=null}}increment(){le(this,qe,S(this,qe)+1)}decrement(){if(le(this,qe,S(this,qe)-1),S(this,qe)===0){for(const t of S(this,Xe))Q(t,ve),ze(t);for(const t of S(this,Ie))Q(t,ve),ze(t);for(const t of S(this,tt))Q(t,ve),ze(t);le(this,Xe,[]),le(this,Ie,[]),this.flush()}else this.deactivate()}add_callback(t){S(this,Et).add(t)}settled(){return(S(this,qt)??le(this,qt,es())).promise}static ensure(t=!0){if(ue===null){const n=ue=new gr;en.add(ue),t&&queueMicrotask(()=>{ue===n&&n.flush()})}return ue}};Gt=new WeakMap,xt=new WeakMap,Et=new WeakMap,qe=new WeakMap,qt=new WeakMap,Xt=new WeakMap,et=new WeakMap,St=new WeakMap,Xe=new WeakMap,Ie=new WeakMap,tt=new WeakMap,Le=new WeakSet,ii=function(t){var i;pt=[];var n=null;if(en.size>1){n=new Map,je=new Map;for(const[a,l]of S(this,Gt))n.set(a,{v:a.v,wv:a.wv}),a.v=l;for(const a of en)if(a!==this)for(const[l,f]of S(a,xt))n.has(l)||(n.set(l,{v:l.v,wv:l.wv}),l.v=f)}for(const a of t)At(this,Le,si).call(this,a);if(S(this,et).length===0&&S(this,qe)===0){var r=S(this,Xe),s=S(this,Ie);le(this,Xe,[]),le(this,Ie,[]),le(this,tt,[]),At(this,Le,Ln).call(this),xr(r),xr(s),(i=S(this,qt))==null||i.resolve()}else{for(const a of S(this,Xe))Q(a,Z);for(const a of S(this,Ie))Q(a,Z);for(const a of S(this,tt))Q(a,Z)}if(n){for(const[a,{v:l,wv:f}]of n)a.wv<=f&&(a.v=l);je=null}for(const a of S(this,et))wt(a);for(const a of S(this,St))wt(a);le(this,et,[]),le(this,St,[])},si=function(t){var h;t.f^=Z;for(var n=t.first;n!==null;){var r=n.f,s=(r&($e|kt))!==0,i=s&&(r&Z)!==0,a=i||(r&Ee)!==0||this.skipped_effects.has(n);if(!a&&n.fn!==null){if(s)n.f^=Z;else if(r&Yn)S(this,Ie).push(n);else if(Yt(n))if(r&Jn){var l=(h=n.b)!=null&&h.pending?S(this,St):S(this,et);l.push(n)}else n.f&Vt&&S(this,tt).push(n),wt(n);var f=n.first;if(f!==null){n=f;continue}}var d=n.parent;for(n=n.next;n===null&&d!==null;)n=d.next,d=d.parent}},Ln=function(){if(!S(this,Xt))for(const t of S(this,Et))t();S(this,Et).clear()};let Dt=gr;function T(e){var t;const n=Dt.ensure(!1);for(;;){if(Ns(),pt.length===0)return n===ue&&n.flush(),xn=null,t;n.flush_effects()}}function Ds(){try{us()}catch(e){ar(e,xn)}}function xr(e){var t=e.length;if(t!==0){for(var n=0;n<t;n++){var r=e[n];if(!(r.f&(lt|Ee))&&Yt(r)){var s=cn;if(wt(r),r.deps===null&&r.first===null&&r.nodes_start===null&&(r.teardown===null?yi(r):r.fn=null),cn>s&&r.f&Qn)break}}for(;n<t;n+=1)ze(e[n])}}function ze(e){for(var t=xn=e;t.parent!==null;){t=t.parent;var n=t.f;if(Fn&&t===N&&n&Vt)return;if(n&(kt|$e)){if(!(n&Z))return;t.f^=Z}}pt.push(t)}const it=new Map;function Ft(e,t){var n={f:0,v:e,reactions:null,equals:qr,rv:0,wv:0};return n}function Ge(e,t){const n=Ft(e);return li(n),n}function X(e,t=!1,n=!0){var s;const r=Ft(e);return t||(r.equals=jr),Tt&&n&&q!==null&&q.l!==null&&((s=q.l).s??(s.s=[])).push(r),r}function A(e,t,n=!1){M!==null&&(!Ne||M.f&yr)&&zt()&&M.f&(he|Vt|Jn|yr)&&!(se!=null&&se.includes(e))&&vs();let r=n?gt(t):t;return Lt(e,r)}function Lt(e,t){if(!e.equals(t)){var n=e.v;ut?it.set(e,t):it.set(e,n),e.v=t,Dt.ensure().capture(e,n),e.f&he&&(e.f&ve&&or(e),Q(e,e.f&de?Ke:Z)),e.wv=ui(),ai(e,ve),zt()&&N!==null&&N.f&Z&&!(N.f&($e|kt))&&(pe===null?Fs([e]):pe.push(e))}return t}function Nn(e){A(e,e.v+1)}function ai(e,t){var n=e.reactions;if(n!==null)for(var r=zt(),s=n.length,i=0;i<s;i++){var a=n[i],l=a.f;l&ve||!r&&a===N||(Q(a,t),l&(Z|de)&&(l&he?ai(a,Ke):ze(a)))}}let mt=!1;function Er(e){mt=e}let ut=!1;function Sr(e){ut=e}let M=null,Ne=!1;function Me(e){M=e}let N=null;function We(e){N=e}let se=null;function li(e){M!==null&&(se===null?se=[e]:se.push(e))}let ie=null,fe=0,pe=null;function Fs(e){pe=e}let cn=1,$t=0,st=$t;function Pr(e){st=e}let Ve=!1;function ui(){return++cn}function Yt(e){var g;var t=e.f;if(t&ve)return!0;if(t&Ke){var n=e.deps,r=(t&de)!==0;if(n!==null){var s,i,a=(t&ln)!==0,l=r&&N!==null&&!Ve,f=n.length;if((a||l)&&(N===null||!(N.f&lt))){var d=e,h=d.parent;for(s=0;s<f;s++)i=n[s],(a||!((g=i==null?void 0:i.reactions)!=null&&g.includes(d)))&&(i.reactions??(i.reactions=[])).push(d);a&&(d.f^=ln),l&&h!==null&&!(h.f&de)&&(d.f^=de)}for(s=0;s<f;s++)if(i=n[s],Yt(i)&&ni(i),i.wv>e.wv)return!0}(!r||N!==null&&!Ve)&&Q(e,Z)}return!1}function oi(e,t,n=!0){var r=e.reactions;if(r!==null&&!(se!=null&&se.includes(e)))for(var s=0;s<r.length;s++){var i=r[s];i.f&he?oi(i,t,!1):t===i&&(n?Q(i,ve):i.f&Z&&Q(i,Ke),ze(i))}}function fi(e){var c;var t=ie,n=fe,r=pe,s=M,i=Ve,a=se,l=q,f=Ne,d=st,h=e.f;ie=null,fe=0,pe=null,Ve=(h&de)!==0&&(Ne||!mt||M===null),M=h&($e|kt)?null:e,se=null,fn(e.ctx),Ne=!1,st=++$t,e.ac!==null&&(e.ac.abort(er),e.ac=null);try{e.f|=Rn;var g=(0,e.fn)(),v=e.deps;if(ie!==null){var u;if(dn(e,fe),v!==null&&fe>0)for(v.length=fe+ie.length,u=0;u<ie.length;u++)v[fe+u]=ie[u];else e.deps=v=ie;if(!Ve||h&he&&e.reactions!==null)for(u=fe;u<v.length;u++)((c=v[u]).reactions??(c.reactions=[])).push(e)}else v!==null&&fe<v.length&&(dn(e,fe),v.length=fe);if(zt()&&pe!==null&&!Ne&&v!==null&&!(e.f&(he|Ke|ve)))for(u=0;u<pe.length;u++)oi(pe[u],e);return s!==null&&s!==e&&($t++,pe!==null&&(r===null?r=pe:r.push(...pe))),e.f&nt&&(e.f^=nt),g}catch(m){return Ts(m)}finally{e.f^=Rn,ie=t,fe=n,pe=r,M=s,Ve=i,se=a,fn(l),Ne=f,st=d}}function Ls(e,t){let n=t.reactions;if(n!==null){var r=Ki.call(n,e);if(r!==-1){var s=n.length-1;s===0?n=t.reactions=null:(n[r]=n[s],n.pop())}}n===null&&t.f&he&&(ie===null||!ie.includes(t))&&(Q(t,Ke),t.f&(de|ln)||(t.f^=ln),ti(t),dn(t,0))}function dn(e,t){var n=e.deps;if(n!==null)for(var r=t;r<n.length;r++)Ls(e,n[r])}function wt(e){var t=e.f;if(!(t&lt)){Q(e,Z);var n=N,r=mt;N=e,mt=!0;try{t&Vt?Vs(e):_i(e),pi(e);var s=fi(e);e.teardown=typeof s=="function"?s:null,e.wv=cn;var i;Ur&&hs&&e.f&ve&&e.deps}finally{mt=r,N=n}}}async function ci(){await Promise.resolve(),T()}function o(e){var t=e.f,n=(t&he)!==0;if(M!==null&&!Ne){var r=N!==null&&(N.f&lt)!==0;if(!r&&!(se!=null&&se.includes(e))){var s=M.deps;if(M.f&Rn)e.rv<$t&&(e.rv=$t,ie===null&&s!==null&&s[fe]===e?fe++:ie===null?ie=[e]:(!Ve||!ie.includes(e))&&ie.push(e));else{(M.deps??(M.deps=[])).push(e);var i=e.reactions;i===null?e.reactions=[M]:i.includes(M)||i.push(M)}}}else if(n&&e.deps===null&&e.effects===null){var a=e,l=a.parent;l!==null&&!(l.f&de)&&(a.f^=de)}if(ut){if(it.has(e))return it.get(e);if(n){a=e;var f=a.v;return(a.f&Z||di(a))&&(f=or(a)),it.set(a,f),f}}else if(n){if(a=e,je!=null&&je.has(a))return je.get(a);Yt(a)&&ni(a)}if(e.f&nt)throw e.v;return e.v}function di(e){if(e.v===ee)return!0;if(e.deps===null)return!1;for(const t of e.deps)if(it.has(t)||t.f&he&&di(t))return!0;return!1}function V(e){var t=Ne;try{return Ne=!0,e()}finally{Ne=t}}const $s=-7169;function Q(e,t){e.f=e.f&$s|t}function F(e){if(!(typeof e!="object"||!e||e instanceof EventTarget)){if(rt in e)$n(e);else if(!Array.isArray(e))for(let t in e){const n=e[t];typeof n=="object"&&n&&rt in n&&$n(n)}}}function $n(e,t=new Set){if(typeof e=="object"&&e!==null&&!(e instanceof EventTarget)&&!t.has(e)){t.add(e),e instanceof Date&&e.getTime();for(let r in e)try{$n(e[r],t)}catch{}const n=rr(e);if(n!==Object.prototype&&n!==Array.prototype&&n!==Map.prototype&&n!==Set.prototype&&n!==Date.prototype){const r=Gr(n);for(let s in r){const i=r[s].get;if(i)try{i.call(e)}catch{}}}}}function vi(e){N===null&&M===null&&ls(),M!==null&&M.f&de&&N===null&&as(),ut&&ss()}function Us(e,t){var n=t.last;n===null?t.last=t.first=e:(n.next=e,e.prev=n,t.last=e)}function Be(e,t,n,r=!0){var s=N;s!==null&&s.f&Ee&&(e|=Ee);var i={ctx:q,deps:null,nodes_start:null,nodes_end:null,f:e|ve,first:null,fn:t,last:null,next:null,parent:s,b:s&&s.b,prev:null,teardown:null,transitions:null,wv:0,ac:null};if(n)try{wt(i),i.f|=Wn}catch(f){throw Fe(i),f}else t!==null&&ze(i);var a=n&&i.deps===null&&i.first===null&&i.nodes_start===null&&i.teardown===null&&(i.f&Zn)===0;if(!a&&r&&(s!==null&&Us(i,s),M!==null&&M.f&he)){var l=M;(l.effects??(l.effects=[])).push(i)}return i}function Gs(e){const t=Be(_n,null,!1);return Q(t,Z),t.teardown=e,t}function vn(e){vi();var t=N.f,n=!M&&(t&$e)!==0&&(t&Wn)===0;if(n){var r=q;(r.e??(r.e=[])).push(e)}else return hi(e)}function hi(e){return Be(Yn|Qn,e,!1)}function qs(e){return vi(),Be(_n|Qn,e,!0)}function Xs(e){Dt.ensure();const t=Be(kt,e,!0);return(n={})=>new Promise(r=>{n.outro?fr(t,()=>{Fe(t),r(void 0)}):(Fe(t),r(void 0))})}function hn(e){return Be(Yn,e,!1)}function oe(e,t){var n=q,r={effect:null,ran:!1,deps:e};n.l.$.push(r),r.effect=En(()=>{e(),!r.ran&&(r.ran=!0,V(t))})}function Wt(){var e=q;En(()=>{for(var t of e.l.$){t.deps();var n=t.effect;n.f&Z&&Q(n,Ke),Yt(n)&&wt(n),t.ran=!1}})}function js(e){return Be(Jn|Zn,e,!0)}function En(e,t=0){return Be(_n|t,e,!0)}function W(e,t=[],n=[]){Is(t,n,r=>{Be(_n,()=>e(...r.map(o)),!0)})}function gi(e,t=0){var n=Be(Vt|t,e,!0);return n}function Pt(e,t=!0){return Be($e,e,!0,t)}function pi(e){var t=e.teardown;if(t!==null){const n=ut,r=M;Sr(!0),Me(null);try{t.call(null)}finally{Sr(n),Me(r)}}}function _i(e,t=!1){var s;var n=e.first;for(e.first=e.last=null;n!==null;){(s=n.ac)==null||s.abort(er);var r=n.next;n.f&kt?n.parent=null:Fe(n,t),n=r}}function Vs(e){for(var t=e.first;t!==null;){var n=t.next;t.f&$e||Fe(t),t=n}}function Fe(e,t=!0){var n=!1;(t||e.f&Yi)&&e.nodes_start!==null&&e.nodes_end!==null&&(zs(e.nodes_start,e.nodes_end),n=!0),_i(e,t&&!n),dn(e,0),Q(e,lt);var r=e.transitions;if(r!==null)for(const i of r)i.stop();pi(e);var s=e.parent;s!==null&&s.first!==null&&yi(e),e.next=e.prev=e.teardown=e.ctx=e.deps=e.fn=e.nodes_start=e.nodes_end=e.ac=null}function zs(e,t){for(;e!==null;){var n=e===t?null:Je(e);e.remove(),e=n}}function yi(e){var t=e.parent,n=e.prev,r=e.next;n!==null&&(n.next=r),r!==null&&(r.prev=n),t!==null&&(t.first===e&&(t.first=r),t.last===e&&(t.last=n))}function fr(e,t){var n=[];cr(e,n,!0),mi(n,()=>{Fe(e),t&&t()})}function mi(e,t){var n=e.length;if(n>0){var r=()=>--n||t();for(var s of e)s.out(r)}else t()}function cr(e,t,n){if(!(e.f&Ee)){if(e.f^=Ee,e.transitions!==null)for(const a of e.transitions)(a.is_global||n)&&t.push(a);for(var r=e.first;r!==null;){var s=r.next,i=(r.f&Kn)!==0||(r.f&$e)!==0;cr(r,t,i?n:!1),r=s}}}function dr(e){wi(e,!0)}function wi(e,t){if(e.f&Ee){e.f^=Ee,e.f&Z||(Q(e,ve),ze(e));for(var n=e.first;n!==null;){var r=n.next,s=(n.f&Kn)!==0||(n.f&$e)!==0;wi(n,s?t:!1),n=r}if(e.transitions!==null)for(const i of e.transitions)(i.is_global||t)&&i.in()}}function Hs(e){var t=M,n=N;Me(null),We(null);try{return e()}finally{Me(t),We(n)}}const bi=new Set,Un=new Set;function Ys(e,t,n,r={}){function s(i){if(r.capture||Rt.call(t,i),!i.cancelBubble)return Hs(()=>n==null?void 0:n.call(this,i))}return e.startsWith("pointer")||e.startsWith("touch")||e==="wheel"?lr(()=>{t.addEventListener(e,s,r)}):t.addEventListener(e,s,r),s}function Ut(e,t,n,r,s){var i={capture:r,passive:s},a=Ys(e,t,n,i);(t===document.body||t===window||t===document||t instanceof HTMLMediaElement)&&Gs(()=>{t.removeEventListener(e,a,i)})}function Ws(e){for(var t=0;t<e.length;t++)bi.add(e[t]);for(var n of Un)n(e)}function Rt(e){var w;var t=this,n=t.ownerDocument,r=e.type,s=((w=e.composedPath)==null?void 0:w.call(e))||[],i=s[0]||e.target,a=0,l=e.__root;if(l){var f=s.indexOf(l);if(f!==-1&&(t===document||t===window)){e.__root=t;return}var d=s.indexOf(t);if(d===-1)return;f<=d&&(a=f)}if(i=s[a]||e.target,i!==t){un(e,"currentTarget",{configurable:!0,get(){return i||n}});var h=M,g=N;Me(null),We(null);try{for(var v,u=[];i!==null;){var c=i.assignedSlot||i.parentNode||i.host||null;try{var m=i["__"+r];if(m!=null&&(!i.disabled||e.target===i))if(tr(m)){var[p,..._]=m;p.apply(i,[e,..._])}else m.call(i,e)}catch(y){v?u.push(y):v=y}if(e.cancelBubble||c===t||c===null)break;i=c}if(v){for(let y of u)queueMicrotask(()=>{throw y});throw v}}finally{e.__root=t,delete e.currentTarget,Me(h),We(g)}}}function xi(e){var t=document.createElement("template");return t.innerHTML=e.replaceAll("<!>","<!---->"),t.content}function He(e,t){var n=N;n.nodes_start===null&&(n.nodes_start=e,n.nodes_end=t)}function ye(e,t){var n=(t&Ss)!==0,r,s=!e.startsWith("<!>");return()=>{if(R)return He(O,null),O;r===void 0&&(r=xi(s?e:"<!>"+e),r=xe(r));var i=n||Yr?document.importNode(r,!0):r.cloneNode(!0);return He(i,i),i}}function Ks(e,t,n="svg"){var r=!e.startsWith("<!>"),s=(t&Es)!==0,i=`<${n}>${r?e:"<!>"+e}</${n}>`,a;return()=>{if(R)return He(O,null),O;if(!a){var l=xi(i),f=xe(l);if(s)for(a=document.createDocumentFragment();xe(f);)a.appendChild(xe(f));else a=xe(f)}var d=a.cloneNode(!0);if(s){var h=xe(d),g=d.lastChild;He(h,g)}else He(d,d);return d}}function ot(e,t){return Ks(e,t,"svg")}function Gn(){if(R)return He(O,null),O;var e=document.createDocumentFragment(),t=document.createComment(""),n=Ye();return e.append(t,n),He(t,n),e}function U(e,t){if(R){N.nodes_end=O,bn();return}e!==null&&e.before(t)}const Zs=["touchstart","touchmove"];function Qs(e){return Zs.includes(e)}function bt(e,t){var n=t==null?"":typeof t=="object"?t+"":t;n!==(e.__t??(e.__t=e.nodeValue))&&(e.__t=n,e.nodeValue=n+"")}function Ei(e,t){return Si(e,t)}function Js(e,t){On(),t.intro=t.intro??!1;const n=t.target,r=R,s=O;try{for(var i=xe(n);i&&(i.nodeType!==It||i.data!==zr);)i=Je(i);if(!i)throw yt;De(!0),Se(i),bn();const a=Si(e,{...t,anchor:i});if(O===null||O.nodeType!==It||O.data!==sr)throw wn(),yt;return De(!1),a}catch(a){if(a===yt)return t.recover===!1&&os(),On(),Zr(n),De(!1),Ei(e,t);throw a}finally{De(r),Se(s)}}const ht=new Map;function Si(e,{target:t,anchor:n,props:r={},events:s,context:i,intro:a=!0}){On();var l=new Set,f=g=>{for(var v=0;v<g.length;v++){var u=g[v];if(!l.has(u)){l.add(u);var c=Qs(u);t.addEventListener(u,Rt,{passive:c});var m=ht.get(u);m===void 0?(document.addEventListener(u,Rt,{passive:c}),ht.set(u,1)):ht.set(u,m+1)}}};f(nr(bi)),Un.add(f);var d=void 0,h=Xs(()=>{var g=n??t.appendChild(Ye());return Pt(()=>{if(i){Ze({});var v=q;v.c=i}s&&(r.$$events=s),R&&He(g,null),d=e(g,r)||{},R&&(N.nodes_end=O),i&&Qe()}),()=>{var c;for(var v of l){t.removeEventListener(v,Rt);var u=ht.get(v);--u===0?(document.removeEventListener(v,Rt),ht.delete(v)):ht.set(v,u)}Un.delete(f),g!==n&&((c=g.parentNode)==null||c.removeChild(g))}});return qn.set(d,h),d}let qn=new WeakMap;function ea(e,t){const n=qn.get(e);return n?(qn.delete(e),n(t)):Promise.resolve()}function ft(e){return new ta(e)}var Oe,_e;class ta{constructor(t){re(this,Oe);re(this,_e);var i;var n=new Map,r=(a,l)=>{var f=X(l,!1,!1);return n.set(a,f),f};const s=new Proxy({...t.props||{},$$events:{}},{get(a,l){return o(n.get(l)??r(l,Reflect.get(a,l)))},has(a,l){return l===Lr?!0:(o(n.get(l)??r(l,Reflect.get(a,l))),Reflect.has(a,l))},set(a,l,f){return A(n.get(l)??r(l,f),f),Reflect.set(a,l,f)}});le(this,_e,(t.hydrate?Js:Ei)(t.component,{target:t.target,anchor:t.anchor,props:s,context:t.context,intro:t.intro??!1,recover:t.recover})),(!((i=t==null?void 0:t.props)!=null&&i.$$host)||t.sync===!1)&&T(),le(this,Oe,s.$$events);for(const a of Object.keys(S(this,_e)))a==="$set"||a==="$destroy"||a==="$on"||un(this,a,{get(){return S(this,_e)[a]},set(l){S(this,_e)[a]=l},enumerable:!0});S(this,_e).$set=a=>{Object.assign(s,a)},S(this,_e).$destroy=()=>{ea(S(this,_e))}}$set(t){S(this,_e).$set(t)}$on(t,n){S(this,Oe)[t]=S(this,Oe)[t]||[];const r=(...s)=>n.call(this,...s);return S(this,Oe)[t].push(r),()=>{S(this,Oe)[t]=S(this,Oe)[t].filter(s=>s!==r)}}$destroy(){S(this,_e).$destroy()}}Oe=new WeakMap,_e=new WeakMap;const na="5";var Rr;typeof window<"u"&&((Rr=window.__svelte??(window.__svelte={})).v??(Rr.v=new Set)).add(na);gs();function ra(e){q===null&&rs(),Tt&&q.l!==null?ia(q).m.push(e):vn(()=>{const t=V(e);if(typeof t=="function")return t})}function ia(e){var t=e.l;return t.u??(t.u={a:[],b:[],m:[]})}function gn(e,t,n=!1){R&&bn();var r=e,s=null,i=null,a=ee,l=n?Kn:0,f=!1;const d=(u,c=!0)=>{f=!0,v(c,u)};var h=null;function g(){h!==null&&(h.lastChild.remove(),r.before(h),h=null);var u=a?s:i,c=a?i:s;u&&dr(u),c&&fr(c,()=>{a?i=null:s=null})}const v=(u,c)=>{if(a===(a=u))return;let m=!1;if(R){const B=Hr(r)===ir;!!a===B&&(r=In(),Se(r),De(!1),m=!0)}var p=Qr(),_=r;if(p&&(h=document.createDocumentFragment(),h.append(_=Ye())),a?s??(s=c&&Pt(()=>c(_))):i??(i=c&&Pt(()=>c(_))),p){var w=ue,y=a?s:i,E=a?i:s;y&&w.skipped_effects.delete(y),E&&w.skipped_effects.add(E),w.add_callback(g)}else g();m&&De(!0)};gi(()=>{f=!1,t(d),f||v(null,null)},l),R&&(r=O)}function we(e,t){return t}function sa(e,t,n){for(var r=e.items,s=[],i=t.length,a=0;a<i;a++)cr(t[a].e,s,!0);var l=i>0&&s.length===0&&n!==null;if(l){var f=n.parentNode;Zr(f),f.append(n),r.clear(),Te(e,t[0].prev,t[i-1].next)}mi(s,()=>{for(var d=0;d<i;d++){var h=t[d];l||(r.delete(h.k),Te(e,h.prev,h.next)),Fe(h.e,!l)}})}function be(e,t,n,r,s,i=null){var a=e,l={flags:t,items:new Map,first:null},f=(t&Vr)!==0;if(f){var d=e;a=R?Se(xe(d)):d.appendChild(Ye())}R&&bn();var h=null,g=!1,v=new Map,u=ur(()=>{var _=n();return tr(_)?_:_==null?[]:nr(_)}),c,m;function p(){aa(m,c,l,v,a,s,t,r,n),i!==null&&(c.length===0?h?dr(h):h=Pt(()=>i(a)):h!==null&&fr(h,()=>{h=null}))}gi(()=>{m??(m=N),c=o(u);var _=c.length;if(g&&_===0)return;g=_===0;let w=!1;if(R){var y=Hr(a)===ir;y!==(_===0)&&(a=In(),Se(a),De(!1),w=!0)}if(R){for(var E=null,B,b=0;b<_;b++){if(O.nodeType===It&&O.data===sr){a=O,w=!0,De(!1);break}var k=c[b],I=r(k,b);B=Xn(O,l,E,null,k,I,b,s,t,n),l.items.set(I,B),E=B}_>0&&Se(In())}if(R)_===0&&i&&(h=Pt(()=>i(a)));else if(Qr()){var te=new Set,Pe=ue;for(b=0;b<_;b+=1){k=c[b],I=r(k,b);var ge=l.items.get(I)??v.get(I);ge?t&(yn|mn)&&Pi(ge,k,b,t):(B=Xn(null,l,null,null,k,I,b,s,t,n,!0),v.set(I,B)),te.add(I)}for(const[z,ae]of l.items)te.has(z)||Pe.skipped_effects.add(ae.e);Pe.add_callback(p)}else p();w&&De(!0),o(u)}),R&&(a=O)}function aa(e,t,n,r,s,i,a,l,f){var Mt,Bt,Kt,vt;var d=(a&ps)!==0,h=(a&(yn|mn))!==0,g=t.length,v=n.items,u=n.first,c=u,m,p=null,_,w=[],y=[],E,B,b,k;if(d)for(k=0;k<g;k+=1)E=t[k],B=l(E,k),b=v.get(B),b!==void 0&&((Mt=b.a)==null||Mt.measure(),(_??(_=new Set)).add(b));for(k=0;k<g;k+=1){if(E=t[k],B=l(E,k),b=v.get(B),b===void 0){var I=r.get(B);if(I!==void 0){r.delete(B),v.set(B,I);var te=p?p.next:c;Te(n,p,I),Te(n,I,te),Mn(I,te,s),p=I}else{var Pe=c?c.e.nodes_start:s;p=Xn(Pe,n,p,p===null?n.first:p.next,E,B,k,i,a,f)}v.set(B,p),w=[],y=[],c=p.next;continue}if(h&&Pi(b,E,k,a),b.e.f&Ee&&(dr(b.e),d&&((Bt=b.a)==null||Bt.unfix(),(_??(_=new Set)).delete(b))),b!==c){if(m!==void 0&&m.has(b)){if(w.length<y.length){var ge=y[0],z;p=ge.prev;var ae=w[0],H=w[w.length-1];for(z=0;z<w.length;z+=1)Mn(w[z],ge,s);for(z=0;z<y.length;z+=1)m.delete(y[z]);Te(n,ae.prev,H.next),Te(n,p,ae),Te(n,H,ge),c=ge,p=H,k-=1,w=[],y=[]}else m.delete(b),Mn(b,c,s),Te(n,b.prev,b.next),Te(n,b,p===null?n.first:p.next),Te(n,p,b),p=b;continue}for(w=[],y=[];c!==null&&c.k!==B;)c.e.f&Ee||(m??(m=new Set)).add(c),y.push(c),c=c.next;if(c===null)continue;b=c}w.push(b),p=b,c=b.next}if(c!==null||m!==void 0){for(var Y=m===void 0?[]:nr(m);c!==null;)c.e.f&Ee||Y.push(c),c=c.next;var Ae=Y.length;if(Ae>0){var Nt=a&Vr&&g===0?s:null;if(d){for(k=0;k<Ae;k+=1)(Kt=Y[k].a)==null||Kt.measure();for(k=0;k<Ae;k+=1)(vt=Y[k].a)==null||vt.fix()}sa(n,Y,Nt)}}d&&lr(()=>{var Zt;if(_!==void 0)for(b of _)(Zt=b.a)==null||Zt.apply()}),e.first=n.first&&n.first.e,e.last=p&&p.e;for(var Re of r.values())Fe(Re.e);r.clear()}function Pi(e,t,n,r){r&yn&&Lt(e.v,t),r&mn?Lt(e.i,n):e.i=n}function Xn(e,t,n,r,s,i,a,l,f,d,h){var g=(f&yn)!==0,v=(f&_s)===0,u=g?v?X(s,!1,!1):Ft(s):s,c=f&mn?Ft(a):a,m={i:c,v:u,k:i,a:null,e:null,prev:n,next:r};try{if(e===null){var p=document.createDocumentFragment();p.append(e=Ye())}return m.e=Pt(()=>l(e,u,c,d),R),m.e.prev=n&&n.e,m.e.next=r&&r.e,n===null?h||(t.first=m):(n.next=m,n.e.next=m.e),r!==null&&(r.prev=m,r.e.prev=m.e),m}finally{}}function Mn(e,t,n){for(var r=e.next?e.next.e.nodes_start:n,s=t?t.e.nodes_start:n,i=e.e.nodes_start;i!==null&&i!==r;){var a=Je(i);s.before(i),i=a}}function Te(e,t,n){t===null?e.first=n:(t.next=n,t.e.next=n&&n.e),n!==null&&(n.prev=t,n.e.prev=t&&t.e)}function kr(e,t,n){hn(()=>{var r=V(()=>t(e,n==null?void 0:n())||{});if(n&&(r!=null&&r.update)){var s=!1,i={};En(()=>{var a=n();F(a),s&&Xr(i,a)&&(i=a,r.update(a))}),s=!0}if(r!=null&&r.destroy)return()=>r.destroy()})}const Tr=[...` 	
\r\f \v\uFEFF`];function la(e,t,n){var r=e==null?"":""+e;if(t&&(r=r?r+" "+t:t),n){for(var s in n)if(n[s])r=r?r+" "+s:s;else if(r.length)for(var i=s.length,a=0;(a=r.indexOf(s,a))>=0;){var l=a+i;(a===0||Tr.includes(r[a-1]))&&(l===r.length||Tr.includes(r[l]))?r=(a===0?"":r.substring(0,a))+r.substring(l+1):a=l}}return r===""?null:r}function Cr(e,t=!1){var n=t?" !important;":";",r="";for(var s in e){var i=e[s];i!=null&&i!==""&&(r+=" "+s+": "+i+n)}return r}function Bn(e){return e[0]!=="-"||e[1]!=="-"?e.toLowerCase():e}function ua(e,t){if(t){var n="",r,s;if(Array.isArray(t)?(r=t[0],s=t[1]):r=t,e){e=String(e).replaceAll(/\s*\/\*.*?\*\/\s*/g,"").trim();var i=!1,a=0,l=!1,f=[];r&&f.push(...Object.keys(r).map(Bn)),s&&f.push(...Object.keys(s).map(Bn));var d=0,h=-1;const m=e.length;for(var g=0;g<m;g++){var v=e[g];if(l?v==="/"&&e[g-1]==="*"&&(l=!1):i?i===v&&(i=!1):v==="/"&&e[g+1]==="*"?l=!0:v==='"'||v==="'"?i=v:v==="("?a++:v===")"&&a--,!l&&i===!1&&a===0){if(v===":"&&h===-1)h=g;else if(v===";"||g===m-1){if(h!==-1){var u=Bn(e.substring(d,h).trim());if(!f.includes(u)){v!==";"&&g++;var c=e.substring(d,g).trim();n+=" "+c+";"}}d=g+1,h=-1}}}}return r&&(n+=Cr(r)),s&&(n+=Cr(s,!0)),n=n.trim(),n===""?null:n}return e==null?null:String(e)}function ce(e,t,n,r,s,i){var a=e.__className;if(R||a!==n||a===void 0){var l=la(n,r,i);(!R||l!==e.getAttribute("class"))&&(l==null?e.removeAttribute("class"):e.className=l),e.__className=n}else if(i&&s!==i)for(var f in i){var d=!!i[f];(s==null||d!==!!s[f])&&e.classList.toggle(f,d)}return i}function An(e,t={},n,r){for(var s in n){var i=n[s];t[s]!==i&&(n[s]==null?e.style.removeProperty(s):e.style.setProperty(s,i,r))}}function jn(e,t,n,r){var s=e.__style;if(R||s!==t){var i=ua(t,r);(!R||i!==e.getAttribute("style"))&&(i==null?e.removeAttribute("style"):e.style.cssText=i),e.__style=t}else r&&(Array.isArray(r)?(An(e,n==null?void 0:n[0],r[0]),An(e,n==null?void 0:n[1],r[1],"important")):An(e,n,r));return r}const oa=Symbol("is custom element"),fa=Symbol("is html");function x(e,t,n,r){var s=ca(e);R&&(s[t]=e.getAttribute(t),t==="src"||t==="srcset"||t==="href"&&e.nodeName==="LINK")||s[t]!==(s[t]=n)&&(t==="loading"&&(e[Wi]=n),n==null?e.removeAttribute(t):typeof n!="string"&&da(e).includes(t)?e[t]=n:e.setAttribute(t,n))}function ca(e){return e.__attributes??(e.__attributes={[oa]:e.nodeName.includes("-"),[fa]:e.namespaceURI===Ps})}var Nr=new Map;function da(e){var t=Nr.get(e.nodeName);if(t)return t;Nr.set(e.nodeName,t=[]);for(var n,r=e,s=Element.prototype;s!==r;){n=Gr(r);for(var i in n)n[i].set&&t.push(i);r=rr(r)}return t}function Mr(e,t){return e===t||(e==null?void 0:e[rt])===t}function an(e={},t,n,r){return hn(()=>{var s,i;return En(()=>{s=i,i=(r==null?void 0:r())||[],V(()=>{e!==n(...i)&&(t(e,...i),s&&Mr(n(...s),e)&&t(null,...s))})}),()=>{lr(()=>{i&&Mr(n(...i),e)&&t(null,...i)})}}),e}function Ct(e=!1){const t=q,n=t.l.u;if(!n)return;let r=()=>F(t.s);if(e){let s=0,i={};const a=Ht(()=>{let l=!1;const f=t.s;for(const d in f)f[d]!==i[d]&&(i[d]=f[d],l=!0);return l&&s++,s});r=()=>o(a)}n.b.length&&qs(()=>{Br(t,r),on(n.b)}),vn(()=>{const s=V(()=>n.m.map(Ji));return()=>{for(const i of s)typeof i=="function"&&i()}}),n.a.length&&vn(()=>{Br(t,r),on(n.a)})}function Br(e,t){if(e.l.s)for(const n of e.l.s)o(n);t()}function ct(e,t,n){var r;e.$$events||(e.$$events={}),(r=e.$$events)[t]||(r[t]=[]),e.$$events[t].push(n)}function dt(e){for(var t in e)t in this&&(this[t]=e[t])}let tn=!1;function va(e){var t=tn;try{return tn=!1,[e(),tn]}finally{tn=t}}function C(e,t,n,r){var y;var s=!Tt||(n&ms)!==0,i=(n&bs)!==0,a=(n&xs)!==0,l=r,f=!0,d=()=>(f&&(f=!1,l=a?V(r):r),l),h;if(i){var g=rt in e||Lr in e;h=((y=_t(e,t))==null?void 0:y.set)??(g&&t in e?E=>e[t]=E:void 0)}var v,u=!1;i?[v,u]=va(()=>e[t]):v=e[t],v===void 0&&r!==void 0&&(v=d(),h&&(s&&fs(),h(v)));var c;if(s?c=()=>{var E=e[t];return E===void 0?d():(f=!0,E)}:c=()=>{var E=e[t];return E!==void 0&&(l=void 0),E===void 0?l:E},s&&!(n&ws))return c;if(h){var m=e.$$legacy;return function(E,B){return arguments.length>0?((!s||!B||m||u)&&h(B?c():E),E):c()}}var p=!1,_=(n&ys?Ht:ur)(()=>(p=!1,c()));i&&o(_);var w=N;return function(E,B){if(arguments.length>0){const b=B?o(_):s&&i?gt(E):E;return A(_,b),p=!0,l!==void 0&&(l=b),E}return ut&&p||w.f&lt?_.v:o(_)}}const ha={light:{bgColor:"#E8C887",lineColor:"#000000",textColor:"#000000",red:"#861818",blue:"#1B38A2"},dark:{bgColor:"#2d2d2d",lineColor:"#ffffff",textColor:"#ffffff",red:"#861818",blue:"#000080"}};var ga=ot('<path fill="none"></path>'),pa=ot('<path fill="none"></path><path fill="none"></path>',1),_a=ot("<path></path>"),ya=ot("<path></path>"),ma=ot("<path></path>"),wa=ot('<g><circle stroke="#fff"></circle><text x="0" y="0" fill="white" text-anchor="middle" dy="0.35em"> </text></g>'),ba=ot('<g><path stroke="red" fill="red"></path></g>'),xa=ye('<div class="board-container"><svg xmlns="http://www.w3.org/2000/svg" class="xq-board" style="user-select:none;"><rect rx="5"></rect><path fill="none"></path><!><!><line></line><line></line><text font-family="FZLiShu II-S06" text-anchor="middle" dominant-baseline="middle">楚　河　　汉　界</text><g fill="none"><path></path><path></path></g><g fill="none"><!><!><!></g><g id="xiangqi-pieces"></g><!></svg></div>');function vr(e,t){if(new.target)return ft({component:vr,...e});Ze(t,!1);let n=C(t,"settings",12),r=C(t,"board",12),s=C(t,"markedPos",12,null),i=C(t,"currentTurn",12),a=C(t,"eventBus",12),l=C(t,"rotated",12),f=X(),d=X(),h=X(),g=X(),v=X(),u=X(),c=X(),m=X(),p=X(),_=X(),w=X();function y(P){return{x:8-P.x,y:9-P.y}}function E(P){const $=Array.from({length:9},()=>Array(10).fill(null));for(let D=0;D<9;D++)for(let J=0;J<10;J++)$[D][J]=P[8-D][9-J];return $}function B(P){const D=P.currentTarget.getBoundingClientRect(),J=P.clientX-D.left,Ue=P.clientY-D.top;let ke=Math.round(J/o(u))-1,me=Math.round(Ue/o(u))-1;if(ke>=0&&ke<9&&me>=0&&me<10){const Sn=l()?y({x:ke,y:me}):{x:ke,y:me};a().emit("click",Sn)}}oe(()=>(o(f),o(d),o(h),o(g),o(v),F(n())),()=>{(P=>{A(f,P.bgColor),A(d,P.lineColor),A(h,P.textColor),A(g,P.red),A(v,P.blue)})(ha[n().theme])}),oe(()=>F(n()),()=>{A(u,n().cellSize)}),oe(()=>o(u),()=>{A(c,o(u)*.1)}),oe(()=>o(u),()=>{A(m,o(u)*10)}),oe(()=>o(u),()=>{A(p,o(u)*11)}),oe(()=>(F(l()),F(r())),()=>{A(_,l()?E(r()):r())}),oe(()=>(F(l()),F(s())),()=>{A(w,l()&&s()?y(s()):s())}),Wt(),Ct();var b=xa(),k=K(b),I=K(k),te=L(I),Pe=L(te);be(Pe,0,()=>V(()=>Array(10).fill(0)),we,(P,$,D)=>{var J=ga();W(()=>{x(J,"d",`M ${o(u)},${o(u)*(D+1)} h ${o(u)*8}`),x(J,"stroke",o(d)),x(J,"stroke-width",o(u)*.04)}),U(P,J)});var ge=L(Pe);be(ge,0,()=>V(()=>Array(9).fill(0)),we,(P,$,D)=>{var J=pa(),Ue=sn(J),ke=L(Ue);W(()=>{x(Ue,"d",`M ${o(u)*(D+1)},${o(u)} v ${o(u)*4}`),x(Ue,"stroke",o(d)),x(Ue,"stroke-width",o(u)*.04),x(ke,"d",`M ${o(u)*(D+1)},${o(u)*6} v ${o(u)*4}`),x(ke,"stroke",o(d)),x(ke,"stroke-width",o(u)*.04)}),U(P,J)});var z=L(ge),ae=L(z),H=L(ae),Y=L(H),Ae=K(Y),Nt=L(Ae);G(Y);var Re=L(Y),Mt=K(Re);be(Mt,0,()=>[[2,3],[8,3],[2,8],[8,8],[3,4],[5,4],[7,4],[3,7],[7,7],[5,7]],we,(P,$)=>{var D=_a();W(()=>x(D,"d",(o(u),o(c),V(()=>`M ${$[0]*o(u)},${$[1]*o(u)} m -${3*o(c)},-${o(c)} h ${2*o(c)} v -${2*o(c)} m ${2*o(c)},0 v ${2*o(c)} h ${2*o(c)} m 0,${2*o(c)} h -${2*o(c)} v ${2*o(c)} m -${2*o(c)},0 v -${2*o(c)} h -${2*o(c)}`)))),U(P,D)});var Bt=L(Mt);be(Bt,0,()=>[[1,4],[1,7]],we,(P,$)=>{var D=ya();W(()=>x(D,"d",(o(u),o(c),V(()=>`M ${$[0]*o(u)},${$[1]*o(u)} m ${o(c)},-${3*o(c)} v ${2*o(c)} h ${2*o(c)} m 0,${2*o(c)} h -${2*o(c)} v ${2*o(c)}`)))),U(P,D)});var Kt=L(Bt);be(Kt,0,()=>[[9,4],[9,7]],we,(P,$)=>{var D=ma();W(()=>x(D,"d",(o(u),o(c),V(()=>`M ${$[0]*o(u)},${$[1]*o(u)} m -${3*o(c)},-${o(c)} h ${2*o(c)} v -${2*o(c)} m 0,${6*o(c)} v -${2*o(c)} h -${2*o(c)}`)))),U(P,D)}),G(Re);var vt=L(Re);be(vt,5,()=>o(_),we,(P,$,D)=>{var J=Gn(),Ue=sn(J);be(Ue,1,()=>o($),we,(ke,me,Sn)=>{var pr=Gn(),Oi=sn(pr);{var Di=Pn=>{var Qt=wa(),Jt=K(Qt),kn=L(Jt),Fi=K(kn,!0);G(kn),G(Qt),W(Li=>{x(Qt,"transform",`translate(${(D+1)*o(u)}, ${(Sn+1)*o(u)})`),x(Jt,"r",o(u)*.4),x(Jt,"fill",Li),x(Jt,"stroke-width",o(u)*.02),x(kn,"font-size",o(u)*.45),bt(Fi,(F(Ce),o(me),V(()=>Ce[o(me)])))},[()=>(o(me),o(g),o(v),V(()=>o(me)===o(me).toUpperCase()?o(g):o(v)))]),U(Pn,Qt)};gn(Oi,Pn=>{o(me)&&Pn(Di)})}U(ke,pr)}),U(P,J)}),G(vt);var Zt=L(vt);{var Ii=P=>{var $=ba(),D=K($);G($),W(()=>{x($,"transform",(o(w),o(u),V(()=>`translate(${(o(w).x+1)*o(u)}, ${(o(w).y+1)*o(u)})`))),x(D,"d",`M ${-.4*o(u)},${-.4*o(u)+o(c)} v ${-o(c)} h ${o(c)}
              M ${.4*o(u)-o(c)},${-.4*o(u)} h ${o(c)} v ${o(c)}
              M ${.4*o(u)},${.4*o(u)-o(c)} v ${o(c)} h ${-o(c)}
              M ${-.4*o(u)+o(c)},${.4*o(u)} h ${-o(c)} v ${-o(c)}`),x(D,"stroke-width",o(u)*.05)}),U(P,$)};gn(Zt,P=>{o(w)&&P(Ii)})}return G(k),G(b),W(()=>{x(k,"width",o(m)),x(k,"height",o(p)),x(k,"viewBox",`0 0 ${o(m)} ${o(p)}`),x(I,"width",o(m)),x(I,"height",o(p)),x(I,"fill",o(f)),x(I,"stroke",i()==="red"?o(g):o(v)),x(I,"stroke-width",o(u)*.2),x(te,"d",`M ${o(u)-o(c)},${o(u)-o(c)} h ${8*o(u)+2*o(c)} v ${9*o(u)+2*o(c)} h -${8*o(u)+2*o(c)} Z`),x(te,"stroke",o(d)),x(te,"stroke-width",o(u)*.08),x(z,"x1",o(u)),x(z,"y1",o(u)),x(z,"x2",o(u)),x(z,"y2",10*o(u)),x(z,"stroke",o(d)),x(z,"stroke-width",o(u)*.04),x(ae,"x1",o(u)*9),x(ae,"y1",o(u)),x(ae,"x2",o(u)*9),x(ae,"y2",10*o(u)),x(ae,"stroke",o(d)),x(ae,"stroke-width",o(u)*.04),x(H,"x",o(m)/2),x(H,"y",o(p)/2),x(H,"font-size",o(u)*.6),x(H,"fill",o(h)),x(Y,"stroke",o(d)),x(Y,"stroke-width",o(u)*.03),x(Ae,"d",`M ${o(u)*4},${o(u)} l ${o(u)*2} ${o(u)*2} m 0,${-2*o(u)} l ${-2*o(u)} ${2*o(u)}`),x(Nt,"d",`M ${o(u)*4},${8*o(u)} l ${o(u)*2} ${o(u)*2} m 0,${-2*o(u)} l ${-2*o(u)} ${2*o(u)}`),x(Re,"stroke",o(d)),x(Re,"stroke-width",o(u)*.02)}),Ut("click",k,B),U(e,b),Qe({get settings(){return n()},set settings(P){n(P),T()},get board(){return r()},set board(P){r(P),T()},get markedPos(){return s()},set markedPos(P){s(P),T()},get currentTurn(){return i()},set currentTurn(P){i(P),T()},get eventBus(){return a()},set eventBus(P){a(P),T()},get rotated(){return l()},set rotated(P){l(P),T()},$set:dt,$on:(P,$)=>ct(t,P,$)})}var Ea=ye('<button class="toolbar-btn svelte-1hvte9z"></button>'),Sa=ye('<div><!> <button aria-label="保存"></button></div>');function ki(e,t){if(new.target)return ft({component:ki,...e});Ze(t,!1);let n=C(t,"settings",12),r=C(t,"eventBus",12),s=C(t,"modified",12),i=C(t,"PGN",12),a=C(t,"isprotected",12),l=X("");const f=[{title:"重置",icon:"refresh-cw",event:"reset"},{title:"开局",icon:"arrow-left-to-line",event:"toStart"},{title:"回退",icon:"undo-dot",event:"undo"},{title:"前进",icon:"redo-dot",event:"redo"},{title:"终局",icon:"arrow-right-to-line",event:"toEnd"}];let d=X();function h(_){r().emit(_)}function g(_,w){return j.setIcon(_,w),{update(y){j.setIcon(_,y)}}}function v(_){j.setIcon(_,"save")}oe(()=>(F(s()),F(i())),()=>{A(l,s()?"unsaved":i().length>0?"saved":"empty")}),Wt(),Ct();var u=Sa(),c=K(u);be(c,1,()=>f,we,(_,w)=>{let y=()=>o(w).title,E=()=>o(w).icon,B=()=>o(w).event;var b=Ea();kr(b,(k,I)=>g==null?void 0:g(k,I),E),hn(()=>Ut("click",b,()=>h(B()))),W(()=>x(b,"aria-label",y())),U(_,b)});var m=L(c,2);let p;return an(m,_=>A(d,_),()=>o(d)),kr(m,_=>v==null?void 0:v(_)),hn(()=>Ut("click",m,()=>h("save"))),G(u),W(_=>{ce(u,1,`toolbar-container ${F(n()),V(()=>n().position)??""}`,"svelte-1hvte9z"),p=ce(m,1,`toolbar-btn ${o(l)??""}`,"svelte-1hvte9z",p,_)},[()=>({disabled:a()})]),U(e,u),Qe({get settings(){return n()},set settings(_){n(_),T()},get eventBus(){return r()},set eventBus(_){r(_),T()},get modified(){return s()},set modified(_){s(_),T()},get PGN(){return i()},set PGN(_){i(_),T()},get isprotected(){return a()},set isprotected(_){a(_),T()},$set:dt,$on:(_,w)=>ct(t,_,w)})}function Pa(e,t){if(!e||!t||!(t.scrollHeight>t.clientHeight))return;const r=e.getBoundingClientRect(),s=t.getBoundingClientRect(),i=r.top-s.top,a=t.scrollTop+i-t.clientHeight/2+e.offsetHeight/2;t.scrollTo({top:a,behavior:"smooth"})}var ka=(e,t)=>t().emit("clickstep",0),Ta=ye("<span> </span>"),Ca=ye('<li class="round svelte-13jscc"><span class="roundnum svelte-13jscc"></span> <span> </span> <!></li>'),Na=ye('<div><ul><li class="start svelte-13jscc"><span class="roundnum svelte-13jscc">0</span> <span> </span></li> <!></ul></div>');function Ti(e,t){if(new.target)return ft({component:Ti,...e});Ze(t,!0);let n=C(t,"settings",7),r=C(t,"currentStep",7),s=C(t,"moves",7),i=C(t,"eventBus",7),a=[],l;vn(()=>{r(),s(),(async()=>{await ci();const p=Math.floor(r()/2)+1,_=a[p];_&&Pa(_,l)})()});var f=Na(),d=K(f),h=K(d);let g;var v=L(K(h),2);let u;v.__click=[ka,i];var c=K(v,!0);G(v),G(h),an(h,p=>a[0]=p,()=>a==null?void 0:a[0]);var m=L(h,2);return be(m,17,s,we,(p,_,w)=>{var y=Gn(),E=sn(y);{var B=b=>{var k=Ca(),I=K(k);I.textContent=w/2+1;var te=L(I,2);let Pe;te.__click=()=>i().emit("clickstep",w+1);var ge=K(te,!0);G(te);var z=L(te,2);{var ae=H=>{var Y=Ta();let Ae;Y.__click=()=>i().emit("clickstep",w+2);var Nt=K(Y,!0);G(Y),W(Re=>{Ae=ce(Y,1,"move black svelte-13jscc",null,Ae,Re),bt(Nt,n().showPGNtxt?s()[w+1].WXF:"黑")},[()=>({active:r()===w+2})]),U(H,Y)};gn(z,H=>{s()[w+1]&&H(ae)})}G(k),an(k,(H,Y)=>a[Y/2+1]=H,H=>a==null?void 0:a[H/2+1],()=>[w]),W(H=>{Pe=ce(te,1,"move red svelte-13jscc",null,Pe,H),bt(ge,n().showPGNtxt?o(_).WXF:"红")},[()=>({active:r()===w+1})]),U(b,k)};gn(E,b=>{w%2===0&&b(B)})}U(p,y)}),G(d),an(d,p=>l=p,()=>l),G(f),W((p,_)=>{ce(f,1,`move-container ${n().position??""}`,"svelte-13jscc"),jn(f,`--height: ${11*n().cellSize}px;
    --width: ${10*n().cellSize}px;
    --fontsize: ${n().fontSize??""}px;`),ce(d,1,`move-list ${n().position??""}`,"svelte-13jscc"),g=jn(h,"",g,p),u=ce(v,1,"move svelte-13jscc",null,u,_),bt(c,n().showPGNtxt?"=== 开 局 ===":"开 局")},[()=>({display:n().position==="right"?"flex":"none"}),()=>({active:r()===0})]),U(e,f),Qe({get settings(){return n()},set settings(p){n(p),T()},get currentStep(){return r()},set currentStep(p){r(p),T()},get moves(){return s()},set moves(p){s(p),T()},get eventBus(){return i()},set eventBus(p){i(p),T()},$set:dt,$on:(p,_)=>ct(t,p,_)})}Ws(["click"]);var Ma=ye("<div><!> <!> <!></div>");function Ci(e,t){if(new.target)return ft({component:Ci,...e});Ze(t,!1);const n=X(),r=X(),s=X();let i=C(t,"settings",12),a=C(t,"board",12),l=C(t,"markedPos",12),f=C(t,"currentTurn",12),d=C(t,"currentStep",12),h=C(t,"eventBus",12),g=C(t,"modified",12),v=C(t,"PGN",12),u=C(t,"history",12),c=C(t,"options",12);ra(async()=>{await ci(),h().emit("ready")}),oe(()=>(F(g()),F(u()),F(v())),()=>{A(n,g()?u():v())}),oe(()=>F(c()),()=>{A(r,c().protected||!1)}),oe(()=>F(c()),()=>{A(s,c().rotated||!1)}),Wt(),Ct();var m=Ma(),p=K(m);vr(p,{get settings(){return i()},get board(){return a()},get markedPos(){return l()},get currentTurn(){return f()},get eventBus(){return h()},get rotated(){return o(s)}});var _=L(p,2);ki(_,{get settings(){return i()},get eventBus(){return h()},get modified(){return g()},get PGN(){return v()},get isprotected(){return o(r)}});var w=L(_,2);return Ti(w,{get settings(){return i()},get currentStep(){return d()},get moves(){return o(n)},get eventBus(){return h()}}),G(m),W(()=>ce(m,1,`XQ-container ${F(i()),V(()=>i().position)??""}`,"svelte-31705r")),U(e,m),Qe({get settings(){return i()},set settings(y){i(y),T()},get board(){return a()},set board(y){a(y),T()},get markedPos(){return l()},set markedPos(y){l(y),T()},get currentTurn(){return f()},set currentTurn(y){f(y),T()},get currentStep(){return d()},set currentStep(y){d(y),T()},get eventBus(){return h()},set eventBus(y){h(y),T()},get modified(){return g()},set modified(y){g(y),T()},get PGN(){return v()},set PGN(y){v(y),T()},get history(){return u()},set history(y){u(y),T()},get options(){return c()},set options(y){c(y),T()},$set:dt,$on:(y,E)=>ct(t,y,E)})}let Ba=class Ni{static init(t){t.BoardModule=new Ni(t)}constructor(t){const n=t.eventBus;n.on("load",()=>{t.modified=!1;const r=t.containerEl.createEl("div");t.Xiangqi=new Ci({target:r,props:{settings:t.settings,board:t.board,markedPos:t.markedPos,currentTurn:t.currentTurn,currentStep:t.currentStep,eventBus:t.eventBus,modified:t.modified,PGN:t.PGN,history:t.history,options:t.options}})}),n.on("ready",()=>{if(console.log(t.settings.autoJump),!!t.settings.autoJump)switch(t.settings.autoJump){case"never":break;case"always":n.emit("toEnd");break;case"auto":t.haveFEN||n.emit("toEnd");break}}),n.on("updateUI",r=>{t.Xiangqi.$set({settings:{...t.settings},board:t.board,markedPos:t.markedPos,currentTurn:t.currentTurn,currentStep:t.currentStep,modified:t.modified,history:[...t.history],options:{...t.options}})}),n.on("unload",()=>{t.Xiangqi.$destroy(),t.Xiangqi=null})}};at("board",Ba);function Aa(e,t,n){if(!n||Ra(e,t,n))return!1;const s=n[e.x][e.y],i=n[t.x][t.y];if(Mi(s,i))return!1;switch(s.toUpperCase()){case"R":return Ia(e,t,n);case"N":return Oa(e,t,n);case"B":return Da(e,t,n);case"A":return Fa(e,t,n);case"K":return La(e,t,n);case"C":return $a(e,t,n);case"P":return Ua(e,t,n);default:return!1}}function Ra(e,t,n){return e.x<0||e.x>8||e.y<0||e.y>9||t.x<0||t.x>8||t.y<0||t.y>9?"out-of-board":e.x===t.x&&e.y===t.y?"same-pos":n[e.x][e.y]?null:"no-piece"}function Mi(e,t){return t?e===e.toUpperCase()==(t===t.toUpperCase()):!1}function Ia(e,t,n){if(e.x!==t.x&&e.y!==t.y)return!1;if(e.x===t.x){const[r,s]=[e.y,t.y].sort((i,a)=>i-a);for(let i=r+1;i<s;i++)if(n[e.x][i])return!1}else{const[r,s]=[e.x,t.x].sort((i,a)=>i-a);for(let i=r+1;i<s;i++)if(n[i][e.y])return!1}return!0}function Oa(e,t,n){const r=t.x-e.x,s=t.y-e.y;if(!(Math.abs(r)===2&&Math.abs(s)===1||Math.abs(r)===1&&Math.abs(s)===2))return!1;if(Math.abs(r)===2){if(n[e.x+r/2][e.y])return!1}else if(n[e.x][e.y+s/2])return!1;return!0}function Da(e,t,n){const r=t.x-e.x,s=t.y-e.y;if(Math.abs(r)!==2||Math.abs(s)!==2)return!1;const i=n[e.x][e.y],a=i===i.toUpperCase();return!(a&&t.y<5||!a&&t.y>4||n[e.x+r/2][e.y+s/2])}function Fa(e,t,n){const r=Math.abs(t.x-e.x),s=Math.abs(t.y-e.y);if(r!==1||s!==1)return!1;const i=n[e.x][e.y];return i===i.toUpperCase()?t.x>=3&&t.x<=5&&t.y>=7&&t.y<=9:t.x>=3&&t.x<=5&&t.y>=0&&t.y<=2}function La(e,t,n){const r=Math.abs(t.x-e.x),s=Math.abs(t.y-e.y);if(r+s!==1)return!1;const i=n[e.x][e.y];if(i===i.toUpperCase()){if(!(t.x>=3&&t.x<=5&&t.y>=7&&t.y<=9))return!1}else if(!(t.x>=3&&t.x<=5&&t.y>=0&&t.y<=2))return!1;return!0}function $a(e,t,n){if(e.x!==t.x&&e.y!==t.y)return!1;let r=0;if(e.x===t.x){const[i,a]=[e.y,t.y].sort((l,f)=>l-f);for(let l=i+1;l<a;l++)n[e.x][l]&&r++}else{const[i,a]=[e.x,t.x].sort((l,f)=>l-f);for(let l=i+1;l<a;l++)n[l][e.y]&&r++}const s=n[t.x][t.y];if(s){const i=n[e.x][e.y];return Mi(i,s)?!1:r===1}else return r===0}function Ua(e,t,n){const r=n[e.x][e.y],s=r===r.toUpperCase(),i=t.x-e.x,a=t.y-e.y;if(Math.abs(i)+Math.abs(a)!==1)return!1;const l=s?e.y<=4:e.y>=5;return s?l?i===0&&a===-1||a===0&&Math.abs(i)===1:i===0&&a===-1:l?i===0&&a===1||a===0&&Math.abs(i)===1:i===0&&a===1}let Ga=class{static init(t){const n=t.eventBus;n.on("click",r=>{const s=t.board[r.x][r.y];if(!t.markedPos){if(s){const a=s===s.toUpperCase();(t.currentTurn==="red"&&a||t.currentTurn==="blue"&&!a)&&(t.markedPos=r,t.Xiangqi.$set({markedPos:{...t.markedPos}}))}return}if(Aa(t.markedPos,r,t.board)){const a={from:{...t.markedPos},to:{...r}};t.modified||(t.modifiedStep=t.currentStep),t.modified=!0,t.markedPos=null,n.emit("runmove",a)}else{if(s){const a=s===s.toUpperCase();if(t.currentTurn==="red"&&a||t.currentTurn==="blue"&&!a){t.markedPos=r,t.Xiangqi.$set({markedPos:t.markedPos});return}}t.markedPos=null,t.Xiangqi.$set({markedPos:t.markedPos})}})}};at("BoardClick",Ga);class qa{static init(t){const n=t.eventBus;n.on("load",()=>{t.modified=!1,t.history=[]}),n.on("edithistory",r=>{Xa(t,r)})}}function Xa(e,t){t.WXF=Or(t,e.board),t.captured=e.board[t.to.x][t.to.y];let{currentStep:n,history:r}=e;const s=t,i=r[n];i&&i.from.x===s.from.x&&i.from.y===s.from.y&&i.to.x===s.to.x&&(i.to.y,s.to.y),e.history.splice(n),e.history.push(s)}at("history",qa);class ja extends j.Modal{constructor(n,r,s,i="确认",a="取消"){super(n);ne(this,"resolvePromise");ne(this,"promise");this.title=r,this.message=s,this.confirmText=i,this.cancelText=a,this.resolvePromise=()=>{},this.promise=new Promise(l=>{this.resolvePromise=l})}onOpen(){const{contentEl:n}=this;n.createEl("h2",{text:this.title}),n.createEl("p",{text:this.message});const r=n.createDiv("modal-button-container"),s=r.createEl("button",{text:this.confirmText,cls:"mod-cta"});s.addEventListener("click",()=>{this.resolvePromise(!0),this.close()}),r.createEl("button",{text:this.cancelText}).addEventListener("click",()=>{this.resolvePromise(!1),this.close()}),s.focus(),this.scope.register([],"Enter",()=>{this.resolvePromise(!0),this.close()})}onClose(){const{contentEl:n}=this;n.empty()}}let Va=class{static init(t){const n=t.eventBus;n.on("runmove",r=>{n.emit("edithistory",r),Vn(t,r),n.emit("updateUI","runmove")}),n.on("undo",()=>{nn(t),n.emit("updateUI","undo")}),n.on("redo",()=>{rn(t),n.emit("updateUI","redo")}),n.on("toStart",()=>{for(;t.currentStep!=0;)nn(t);n.emit("updateUI","toStart")}),n.on("toEnd",()=>{const s=(t.modified?t.history.length:t.PGN.length)-t.currentStep;for(let i=0;i<s;i++)rn(t);n.emit("updateUI","toEnd")}),n.on("reset",()=>{if(t.modified){for(;t.currentStep!=0;)nn(t);t.modified=!1,t.history=[];for(let r=0;r<t.modifiedStep;r++)rn(t);t.modifiedStep=null,n.emit("updateUI","reset")}else n.emit("toStart")}),n.on("save",async()=>{let r="";if(t.history.length===0&&t.PGN.length===0){new j.Notice("历史记录和PGN记录为空，无需保存！");return}t.history.length===0&&t.PGN.length>0&&(r="当前PGN记录不为空，是否要清空？"),t.history.length>0&&t.PGN.length===0&&(r="当前PGN记录为空，是否要保存历史为PGN？"),t.history.length>0&&t.PGN.length>0&&(r="当前PGN记录不为空，是否要覆盖保存？");const s=new ja(t.plugin.app,"确认保存",r,"保存","取消");s.open(),await s.promise&&(await za(t),new j.Notice("保存成功！")),n.emit("updateUI","save")}),n.on("clickstep",r=>{const s=r-t.currentStep;if(s!==0){if(s>0)for(let i=0;i<s;i++)rn(t);else for(let i=0;i<-s;i++)nn(t);n.emit("updateUI")}})}};at("actions",Va);function Vn(e,t){const{from:n,to:r}=t;e.board[r.x][r.y]=e.board[n.x][n.y],e.board[n.x][n.y]="",e.currentStep++,e.currentTurn=e.currentTurn==="red"?"blue":"red"}function nn(e){if(e.markedPos=null,e.history.length===0)return;const t=e.history[e.currentStep-1];if(!t)return;const{from:n,to:r,captured:s}=t,i=e.board[r.x][r.y];e.board[n.x][n.y]=i,e.board[r.x][r.y]=null,s&&(e.board[r.x][r.y]=s),e.currentStep--,e.currentTurn=e.currentTurn==="red"?"blue":"red"}function rn(e){e.markedPos=null;const t=e.eventBus;if(!e.modified&&e.PGN.length>0){const n=e.PGN[e.currentStep];if(!n)return;t.emit("edithistory",n),Vn(e,n)}else{if(e.history.length<e.currentStep)return;const n=e.history[e.currentStep];if(!n)return;Vn(e,n)}}async function za(e){const t=e.plugin.app.workspace.getActiveViewOfType(j.MarkdownView);if(!t)return;const n=t.file;if(!n)return;const r=e.ctx.getSectionInfo(e.containerEl);if(!r)return;const{lineStart:s,lineEnd:i}=r,l=(await e.plugin.app.vault.read(n)).split(`
`);let f=l.slice(s,i+1);if(f.length<2)return;if(f=f.filter(h=>!/[A-Z]\d-[A-Z]\d/.test(h)),e.currentStep>0){const h=e.history.slice(0,e.currentStep).map(u=>Hi(u)),g=[];for(let u=0;u<h.length;u+=2){const c=`${Math.ceil((u+1)/2)}. ${h[u]} ${h[u+1]||""}`.trim();g.push(c)}const v=g.join(`
`);f.splice(f.length-1,0,v)}const d=[...l.slice(0,s),...f,...l.slice(i+1)].join(`
`);await e.plugin.app.vault.modify(n,d)}const Ha={init(e){e.eventBus.on("updateUI",()=>{e.settings.enableSpeech&&window.speechSynthesis&&e.currentStep>0&&e.history[e.currentStep-1]&&Ya(e.history[e.currentStep-1])})}};at("speech",Ha);function Ya(e){const{type:t,WXF:n}=e;if(!n||!t)return;const i=((t===t.toUpperCase()?"红：":"黑：")+n).replace(/卒/g,"族").replace(/將/g,"酱").replace(/将/g,"酱").replace(/相/g,"巷").replace(/仕/g,"市").replace(/炮/g,"泡").replace(/兵/g,"冰").replace(/傌/g,"马");if(!window.speechSynthesis)return;const a=new SpeechSynthesisUtterance(i);a.lang="zh-CN",window.speechSynthesis.cancel(),window.speechSynthesis.speak(a)}class Wa extends j.MarkdownRenderChild{constructor(n,r,s,i){super(n);ne(this,"settings");ne(this,"moduleRegistry");ne(this,"eventBus");this.containerEl=n,this.ctx=r,this.source=s,this.plugin=i,this.settings=this.plugin.settings}onload(){this.plugin.renderChildren.add(this),this.moduleRegistry=Gi(this),this.eventBus.emit("load","xq")}refresh(){this.eventBus.emit("updateUI")}onunload(){this.plugin.renderChildren.delete(this),this.eventBus.emit("unload"),qi(this)}}var Ka=ye("<button> </button>"),Za=ye("<div></div>");function Bi(e,t){if(new.target)return ft({component:Bi,...e});Ze(t,!1);const n=X(),r=X();let s=C(t,"settings",12),i=C(t,"board",12),a=C(t,"eventBus",12),l=C(t,"position",12,""),f=C(t,"selectedPiece",12);const d=v=>v===v.toUpperCase(),h={R:2,N:2,B:2,A:2,K:1,C:2,P:5,r:2,n:2,b:2,a:2,k:1,c:2,p:5};oe(()=>F(i()),()=>{A(n,i().flat().reduce((v,u)=>(u&&(v[u]=(v[u]||0)+1),v),{}))}),oe(()=>o(n),()=>{A(r,Object.fromEntries(Object.keys(h).map(v=>[v,h[v]-(o(n)[v]||0)])))}),Wt(),Ct();var g=Za();return be(g,5,()=>(F(Ce),V(()=>Object.entries(Ce))),we,(v,u)=>{var c=As(()=>ts(o(u),2));let m=()=>o(c)[0],p=()=>o(c)[1];var _=Ka();let w;var y=K(_,!0);G(_),W((E,B)=>{w=ce(_,1,E,"svelte-qrx9ds",w,B),bt(y,p())},[()=>(F(l()),m(),V(()=>`piece-btn ${l()} ${d(m())?"red-piece":"blue-piece"}`)),()=>({empty:o(r)[m()]===0,active:f()===m()})]),Ut("click",_,()=>a().emit("clickPieceBTN",m())),U(v,_)}),G(g),W(()=>{ce(g,1,`piece-btn-container ${l()}`,"svelte-qrx9ds"),jn(g,`--height: ${F(s()),V(()=>11*s().cellSize)??""}px;
    --width: ${F(s()),V(()=>10*s().cellSize)??""}px;`)}),U(e,g),Qe({get settings(){return s()},set settings(v){s(v),T()},get board(){return i()},set board(v){i(v),T()},get eventBus(){return a()},set eventBus(v){a(v),T()},get position(){return l()},set position(v){l(v),T()},get selectedPiece(){return f()},set selectedPiece(v){f(v),T()},$set:dt,$on:(v,u)=>ct(t,v,u)})}var Qa=ye("<button> </button>"),Ja=ye("<div></div>");function Ai(e,t){if(new.target)return ft({component:Ai,...e});Ze(t,!1);let n=C(t,"eventBus",12),r=C(t,"position",12,""),s=C(t,"currentTurn",12,"");const i=[{title:"先手",text:"先",action:"turn",color:!0},{title:"清空",text:"空",action:"empty"},{title:"填满",text:"满",action:"full"},{title:"保存",text:"存",action:"save"}];Ct();var a=Ja();return be(a,5,()=>i,we,(l,f)=>{let d=()=>o(f).title,h=()=>o(f).text,g=()=>o(f).action,v=()=>o(f).color;var u=Qa(),c=K(u,!0);G(u),W(()=>{x(u,"title",d()),ce(u,1,`toolbar-btn ${v()?s():""}`,"svelte-r1i62f"),bt(c,h())}),Ut("click",u,()=>n().emit("btn-click",g())),U(l,u)}),G(a),W(()=>ce(a,1,`getFENT-toolbar-container ${r()}`,"svelte-r1i62f")),U(e,a),Qe({get eventBus(){return n()},set eventBus(l){n(l),T()},get position(){return r()},set position(l){r(l),T()},get currentTurn(){return s()},set currentTurn(l){s(l),T()},$set:dt,$on:(l,f)=>ct(t,l,f)})}var el=ye("<div><!> <!> <!></div>");function Ri(e,t){if(new.target)return ft({component:Ri,...e});Ze(t,!1);const n=X();let r=C(t,"settings",12),s=C(t,"board",12),i=C(t,"markedPos",12),a=C(t,"selectedPiece",12),l=C(t,"currentTurn",12),f=C(t,"eventBus",12);oe(()=>F(r()),()=>{A(n,r().position)}),Wt(),Ct();var d=el(),h=K(d);vr(h,{get settings(){return r()},get board(){return s()},get markedPos(){return i()},get currentTurn(){return l()},get eventBus(){return f()},rotated:!1});var g=L(h,2);Bi(g,{get settings(){return r()},get board(){return s()},get eventBus(){return f()},get position(){return o(n)},get selectedPiece(){return a()}});var v=L(g,2);return Ai(v,{get eventBus(){return f()},get position(){return o(n)},get currentTurn(){return l()}}),G(d),W(()=>ce(d,1,`XQ-container ${F(r()),V(()=>r().position)??""}`,"svelte-31705r")),U(e,d),Qe({get settings(){return r()},set settings(u){r(u),T()},get board(){return s()},set board(u){s(u),T()},get markedPos(){return i()},set markedPos(u){i(u),T()},get selectedPiece(){return a()},set selectedPiece(u){a(u),T()},get currentTurn(){return l()},set currentTurn(u){l(u),T()},get eventBus(){return f()},set eventBus(u){f(u),T()},$set:dt,$on:(u,c)=>ct(t,u,c)})}class hr{static init(t){t.BoardModule=new hr(t)}constructor(t){const n=t.eventBus;n.on("load",()=>{t.modified=!1;const r=t.containerEl.createEl("div");t.Xiangqi=new Ri({target:r,props:{selectedPiece:t.selectedPiece,settings:t.settings,board:t.board,markedPos:t.markedPos,currentTurn:t.currentTurn,eventBus:t.eventBus}})}),n.on("updateUI",r=>{t.Xiangqi.$set({selectedPiece:t.selectedPiece,settings:{...t.settings},board:t.board,markedPos:t.markedPos,currentTurn:t.currentTurn})}),n.on("unload",()=>{t.Xiangqi.$destroy(),t.Xiangqi=null})}}jt("board",hr);class tl{static init(t){t.eventBus.on("click",r=>{const s=t.board[r.x][r.y];if(!t.markedPos&&!t.selectedPiece)s&&(t.markedPos=r,t.Xiangqi.$set({markedPos:{...t.markedPos}}));else if(t.markedPos&&!t.selectedPiece){const i=t.markedPos,a=r;t.board[a.x][a.y]=t.board[i.x][i.y],t.board[i.x][i.y]="",t.markedPos=null,t.Xiangqi.$set({board:[...t.board],markedPos:t.markedPos})}else t.selectedPiece&&(t.board[r.x][r.y]=t.selectedPiece,t.selectedPiece=null,t.Xiangqi.$set({board:[...t.board],selectedPiece:t.selectedPiece,markedPos:t.markedPos}))})}}jt("BoardClick",tl);class nl{static init(t){const n=t.eventBus;n.on("clickPieceBTN",r=>{t.markedPos=null,t.selectedPiece=r,t.eventBus.emit("updateUI")}),n.on("btn-click",r=>{switch(r){case"turn":t.currentTurn=t.currentTurn==="red"?"blue":"red";break;case"empty":t.board=Array.from({length:10},()=>Array(9).fill(null)),t.board[4][0]="k",t.board[4][9]="K";break;case"full":t.eventBus.emit("full");break;case"save":rl(t);break}n.emit("updateUI")})}}jt("actions",nl);async function rl(e){const t=il(e.board,e.currentTurn),n=e.plugin.app.workspace.getActiveViewOfType(j.MarkdownView);if(!n)return;const r=n.file;if(!r)return;const s=e.ctx.getSectionInfo(e.containerEl);if(!s)return;const{lineStart:i,lineEnd:a}=s,f=(await e.plugin.app.vault.read(r)).split(`
`);let d=f.slice(i,a+1);if(d.length<2)return;d[0]=d[0].replace(/^```xq\b.*$/,"```xiangqi"),d=[d[0],`[FEN "${t}"]`,"```"];const h=[...f.slice(0,i),...d,...f.slice(a+1)].join(`
`);await e.plugin.app.vault.modify(r,h),new j.Notice("FEN已保存到代码块")}function il(e,t){const n=[];for(let s=0;s<10;s++){let i="",a=0;for(let l=0;l<9;l++){const f=e[l][s];f?(a>0&&(i+=a,a=0),i+=f):a++}a>0&&(i+=a),n.push(i)}return`${n.join("/")} ${t==="red"?"w":"b"}`}class sl extends j.MarkdownRenderChild{constructor(n,r,s,i){super(n);ne(this,"settings");ne(this,"moduleRegistry");ne(this,"eventBus");this.containerEl=n,this.ctx=r,this.source=s,this.plugin=i,this.settings=this.plugin.settings}onload(){this.plugin.renderChildren.add(this),this.moduleRegistry=Xi(this),this.eventBus.emit("load","fen")}refresh(){this.eventBus.emit("updateUI")}onunload(){this.plugin.renderChildren.delete(this),this.eventBus.emit("unload"),ji(this)}}const Ar={position:"right",theme:"dark",autoTheme:!0,cellSize:50,fontSize:12,autoJump:"auto",enableSpeech:!0,showPGN:!0,showPGNtxt:!0,viewOnly:!1,rotated:!1};class al extends j.PluginSettingTab{constructor(n,r){super(n,r);ne(this,"plugin");this.plugin=r}display(){const n=this.plugin.settings;let{containerEl:r}=this;r.empty(),new j.Setting(r).setName("主题").setDesc("设置棋盘主题.").addDropdown(s=>{s.addOptions({light:"浅色",dark:"深色",auto:"跟随"}),s.setValue(n.autoTheme?"auto":n.theme).onChange(i=>{if(i==="auto"){n.autoTheme=!0;const a=()=>document.body.classList.contains("theme-dark");n.theme=a()?"dark":"light"}else n.autoTheme=!1,n.theme=i;this.plugin.refresh()})}),new j.Setting(r).setName("按钮布局").setDesc("设置按钮的位置.").addDropdown(s=>{s.addOptions({right:"右侧",bottom:"底部"}),s.setValue(n.position).onChange(i=>{n.position=i,this.plugin.refresh()})}),new j.Setting(r).setName("界面大小").setDesc("调整棋盘大小").addSlider(s=>{const i=s.sliderEl.parentElement,a=createEl("span",{text:Math.abs(n.cellSize).toString(),cls:"slider-value-label"});i.prepend(a),s.setLimits(15,100,1).setValue(n.cellSize).onChange(l=>{n.cellSize=l,a.textContent=l.toString(),this.plugin.refresh()}),s.sliderEl.addEventListener("input",()=>{const l=s.getValue();n.cellSize=l,a.textContent=l.toString()})}),r.createEl("h2",{text:"着法列表"}),new j.Setting(r).setName("启用着法列表").setDesc("是否显示棋谱").addToggle(s=>s.setValue(n.showPGN).onChange(i=>{n.showPGN=i,this.plugin.refresh()})),new j.Setting(r).setName("显示着法文字").setDesc("是否显示棋谱着法文字").addToggle(s=>s.setValue(n.showPGNtxt).onChange(i=>{n.showPGNtxt=i,this.plugin.refresh(),this.display()})),new j.Setting(r).setName("着法文字大小").setDesc("调整着法文字大小").addSlider(s=>{const i=s.sliderEl.parentElement,a=createEl("span",{text:Math.abs(n.fontSize).toString(),cls:"slider-value-label"});i.prepend(a),s.setLimits(10,25,1).setValue(n.fontSize).onChange(l=>{n.fontSize=l,a.textContent=l.toString(),this.plugin.refresh()}),s.sliderEl.addEventListener("input",()=>{const l=s.getValue();n.fontSize=l,a.textContent=l.toString()})}),new j.Setting(r).setName("开局跳转").setDesc("初始渲染时默认跳转至终局").addDropdown(s=>{s.addOptions({never:"从不",always:"始终",auto:"无FEN即正常开局时"}).setValue(n.autoJump).onChange(async i=>{n.autoJump=i})}),window.speechSynthesis&&new j.Setting(r).setName("朗读着法").setDesc("是否朗读棋谱走法").addToggle(s=>s.setValue(n.enableSpeech).onChange(i=>{n.enableSpeech=i}))}async hide(){this.plugin.refresh(),this.plugin.saveSettings()}}class ll extends j.Plugin{constructor(){super(...arguments);ne(this,"settings",Ar);ne(this,"renderChildren",new Set)}async onload(){await this.loadSettings(),this.addSettingTab(new al(this.app,this)),this.registerMarkdownCodeBlockProcessor("xiangqi",(n,r,s)=>{const i=new Wa(r,s,n,this);s.addChild(i)}),this.registerMarkdownCodeBlockProcessor("xq",(n,r,s)=>{const i=new sl(r,s,n,this);s.addChild(i)}),this.registerEvent(this.app.workspace.on("css-change",()=>{if(this.settings.autoTheme){const n=()=>document.body.classList.contains("theme-dark");this.settings.theme=n()?"dark":"light",this.refresh()}}))}refresh(){this.renderChildren.forEach(n=>{n.refresh()})}async loadSettings(){const n=await this.loadData();this.settings={...Ar,...n}}async saveSettings(){await this.saveData(this.settings)}}module.exports=ll;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
