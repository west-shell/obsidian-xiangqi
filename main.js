/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

function movePiece(piece, from, to, state) {
    const { cellSize } = state.settings;
    if (from) {
        state.board[from.x][from.y] = null;
    }
    state.board[to.x][to.y] = piece.type;
    console.log(state.board, 'moved');
    piece.position = { ...to };
    piece.pieceEl.setAttribute('transform', `translate(${(to.x + 1) * cellSize},${(to.y + 1) * cellSize})`);
}
function editHistory(move, state) {
    let { currentStep, history } = state;
    const currentMove = move;
    // 检查当前步骤是否已存在相同的 move
    const existingMove = history[currentStep];
    if (existingMove &&
        existingMove.from.x === currentMove.from.x &&
        existingMove.from.y === currentMove.from.y &&
        existingMove.to.x === currentMove.to.x &&
        existingMove.to.y === currentMove.to.y) {
        return; // 相同则不做任何修改
    }
    // 不同则：
    // 1. 删除 currentStep 之后的所有历史
    history.splice(currentStep);
    // 2. 添加新 move（直接 push 到原数组）
    history.push(currentMove);
}
function markPiece(pieceEl) {
    if (!pieceEl.hasAttribute('data-original-transform')) {
        const originalTransform = pieceEl.getAttribute('transform') || '';
        const cleanTransform = originalTransform.replace(/\s*scale\([^)]+\)/, '');
        pieceEl.setAttribute('data-original-transform', cleanTransform);
        pieceEl.setAttribute('transform', `${cleanTransform} scale(1.2)`);
    }
}
function restorePiece(pieceEl) {
    const originalTransform = pieceEl.getAttribute('data-original-transform');
    if (originalTransform !== null) {
        pieceEl.setAttribute('transform', originalTransform);
        pieceEl.removeAttribute('data-original-transform');
    }
}
function findPieceAt(position, state) {
    if (!state.pieces) {
        return undefined;
    }
    return state.pieces.find((p) => p.position.x === position.x && p.position.y === position.y && !p.hidden);
}
/**
 * 在指定容器内，如果有垂直滚动条，则平滑滚动让目标元素垂直居中。
 * 没有滚动条时不滚动。
 * @param element 目标元素
 * @param container 可滚动容器
 */
function scrollBTN(element, container) {
    if (!element || !container)
        return;
    const hasVerticalScrollbar = container.scrollHeight > container.clientHeight;
    if (!hasVerticalScrollbar)
        return;
    const elementRect = element.getBoundingClientRect();
    const containerRect = container.getBoundingClientRect();
    const offsetTop = elementRect.top - containerRect.top;
    const targetScrollTop = container.scrollTop + offsetTop - container.clientHeight / 2 + element.offsetHeight / 2;
    container.scrollTo({
        top: targetScrollTop,
        behavior: 'smooth',
    });
}

// prettier-ignore
const PIECE_CHARS = {
    // 黑方 (小写)
    r: '车', n: '马', b: '象', a: '士', k: '将', c: '砲', p: '卒',
    // 红方 (大写)
    R: '俥', N: '傌', B: '相', A: '仕', K: '帅', C: '炮', P: '兵',
};

// 定义主题配置
const themes = {
    light: {
        cellSize: 50,
        bgColor: ' #E8C887',
        lineColor: ' #000000',
        textColor: ' #000000',
        red: ' #861818',
        blue: ' #1B38A2',
    },
    dark: {
        cellSize: 50,
        bgColor: ' #2d2d2d',
        lineColor: ' #ffffff',
        textColor: ' #ffffff',
        red: ' #861818',
        // blue: ' #1B38A2',
        blue: ' #000080', // 保持蓝色不变
    },
};
function genBoardSVG(settings, options) {
    const boardString = boardSvgString(settings, options);
    return new DOMParser().parseFromString(boardString, 'image/svg+xml').documentElement;
}
function boardSvgString(settings, options) {
    const { theme, cellSize } = settings;
    const { bgColor, lineColor, textColor } = themes[theme];
    const margin = cellSize * 0.1;
    const width = cellSize * 10;
    const height = cellSize * 11;
    return `
<svg width="${width}" height="${height}" viewBox="0 0 ${width} ${height}" 
    preserveAspectRatio="xMidYMid meet"
    xmlns="http://www.w3.org/2000/svg" class="xq-board">
  <rect id="boardRect" width="${width}" height="${height}" fill="${bgColor}" rx="5" stroke="${lineColor}" stroke-width="${cellSize * 0.1}"/>
  <!-- 网格 -->
  <path d="M ${cellSize - margin},${cellSize - margin} h ${8 * cellSize + 2 * margin} v ${9 * cellSize + 2 * margin} h -${8 * cellSize + 2 * margin} Z" stroke="${lineColor}" stroke-width="${cellSize * 0.08}" fill="none"/>
  <g stroke="${lineColor}" stroke-width="${cellSize * 0.04}" fill="none">
    ${Array(10)
        .fill(0)
        .map((_, i) => `
    <path d="M ${cellSize},${cellSize * (i + 1)} h ${cellSize * 8}"/> `)
        .join('')}
    ${Array(9)
        .fill(0)
        .map((_, i) => `
    <path d="M ${cellSize * (i + 1)},${cellSize} v ${cellSize * 4}"/> `)
        .join('')}
    ${Array(9)
        .fill(0)
        .map((_, i) => `
    <path d="M ${cellSize * (i + 1)},${cellSize * 6} v ${cellSize * 4}"/>`)
        .join('')}
    <line x1="${cellSize}" y1="${cellSize}" x2="${cellSize}" y2="${10 * cellSize}" stroke="${lineColor}" stroke-width="2"/>
    <line x1="${9 * cellSize}" y1="${cellSize}" x2="${9 * cellSize}" y2="${cellSize * 10}" stroke="${lineColor}" stroke-width="2"/>
  </g>
  <!-- 九宫 -->
  <g stroke="${lineColor}" stroke-width="${cellSize * 0.03}" fill="none">
    <path d="M ${cellSize * 4},${cellSize} l ${cellSize * 2} ${cellSize * 2} m 0,${ -2 * cellSize} l ${ -2 * cellSize} ${2 * cellSize}"/>
    <path d="M ${cellSize * 4},${8 * cellSize} l ${cellSize * 2} ${cellSize * 2} m 0,${ -2 * cellSize} l ${ -2 * cellSize} ${2 * cellSize}"/>
  </g>
    <!-- 河界 -->
  <g transform="translate(${5 * cellSize}, ${5.5 * cellSize})">
  <text x="0" y="0"
    font-size="${cellSize * 0.6}" font-family="FZLiShu II-S06"
    text-anchor="middle" dominant-baseline="middle"
    transform="${options.rotated ? 'rotate(180)' : ''}"
    fill="${textColor}">楚　河　　汉　界</text>
  </g>
  <!-- 炮兵位 -->
  <g stroke="${lineColor}" stroke-width="${cellSize * 0.02}" fill="none">
    ${[
        [2, 3],
        [8, 3],
        [2, 8],
        [8, 8],
        [3, 4],
        [5, 4],
        [7, 4],
        [3, 7],
        [7, 7],
        [5, 7],
    ]
        .map((i) => `
    <path d="M ${i[0] * cellSize},${i[1] * cellSize} m -${3 * margin},-${margin} h ${2 * margin} v -${2 * margin} m ${2 * margin},0 v ${2 * margin} h ${2 * margin} m 0,${2 * margin} h -${2 * margin} v ${2 * margin} m -${2 * margin},0 v -${2 * margin} h -${2 * margin}" />`)
        .join('')}
    ${[
        [1, 4],
        [1, 7],
    ]
        .map((i) => `
    <path d="M ${i[0] * cellSize},${i[1] * cellSize} m ${margin},-${3 * margin} v ${2 * margin} h ${2 * margin} m 0,${2 * margin} h -${2 * margin} v ${2 * margin}"/>`)
        .join('')}
    ${[
        [9, 4],
        [9, 7],
    ]
        .map((i) => `
    <path d="M ${i[0] * cellSize},${i[1] * cellSize} m -${3 * margin},-${margin} h ${2 * margin} v -${2 * margin} m 0,${6 * margin} v -${2 * margin} h -${2 * margin}" />`)
        .join('')}
  </g>
  <g id="xiangqi-pieces"></g>
</svg>`;
}
function createPieceSvg(piece, settings, options) {
    const gString = pieceString(piece, settings, options); // 返回 <g>...</g> 字符串
    const wrapped = `<svg xmlns="http://www.w3.org/2000/svg">${gString}</svg>`;
    const tempSvg = new DOMParser().parseFromString(wrapped, 'image/svg+xml').documentElement;
    const gNode = tempSvg.querySelector('g');
    return gNode;
}
function pieceString(piece, settings, options) {
    const { type, position } = piece;
    const { x, y } = position;
    const { theme, cellSize } = settings;
    const isRed = type === type.toUpperCase();
    const { red, blue } = themes[theme];
    // const pieceColor = isRed ? '#c00' : '#000';
    const pieceColor = isRed ? `${red}` : `${blue}`;
    return `
  <g class="xiangqi-piece" 
     data-type="${type}"
     transform="translate(${(x + 1) * cellSize}, ${(y + 1) * cellSize})">
    <circle cx="0" cy="0"
            r="${cellSize * 0.4}" 
            fill="${pieceColor}" 
            stroke="#fff"/>
    <text x="0" y="0"
          fill="white" 
          font-size="${cellSize * 0.45}" 
          text-anchor="middle" 
          dy="0.35em"
          transform="${options.rotated ? 'rotate(180)' : ''}">
      ${PIECE_CHARS[type]}
    </text>
  </g>
`;
}
function updateRectStroke(state) {
    if (!state.boardRect)
        return;
    const { red, blue } = themes[state.settings.theme];
    const strokeColor = state.currentTurn === 'red' ? `${red}` : `${blue}`;
    // 设置 SVG 边框颜色
    state.boardRect.setAttribute('stroke', strokeColor);
    state.boardRect.setAttribute('stroke-width', '4'); // 设置边框宽度，避免太细看不清楚
    // 获取包裹 `SVG` 的父 `div`
    const boardContainer = state.boardRect.closest('div'); // 获取最外层包裹 `SVG` 的 div
    if (!boardContainer)
        return; // 如果没有找到父容器，直接返回
    // 设置包裹 `div` 的边框颜色（与 SVG 边框一致）
    boardContainer.style.borderColor = strokeColor;
    // 给包裹 `div` 添加发光效果
    boardContainer.style.boxShadow = `0 0 15px ${strokeColor}`; // 添加光晕效果
}

function speak(move) {
    const { type, WXF } = move;
    if (!WXF || !type)
        return;
    const turn = type === type.toUpperCase() ? '红：' : '黑：';
    const finalSpeech = turn + WXF;
    const finalSpeechReplace = finalSpeech
        .replace(/卒/g, '族') // "卒"（zú）常被读错为 cù
        .replace(/將/g, '酱') // 繁体“將”可替代“将”，避免 jiāng
        .replace(/将/g, '酱') // 简体“将”也处理
        .replace(/相/g, '巷') // "相" 发 xiāng 时可能被误读
        .replace(/仕/g, '市') // "仕"（shì）有时被读成 sī
        .replace(/炮/g, '泡') // 部分语音引擎读成 bāo，替换为发音更接近的
        .replace(/兵/g, '冰')
        .replace(/傌/g, '马');
    // 发音
    if (!window.speechSynthesis) {
        return;
    }
    const utter = new SpeechSynthesisUtterance(finalSpeechReplace);
    utter.lang = 'zh-CN';
    window.speechSynthesis.cancel(); // 停止前一条朗读
    window.speechSynthesis.speak(utter);
}

function runMove$1(move, state) {
    if (state.settings.enableSpeech) {
        speak(move);
    }
    const { from, to } = move;
    const fromPiece = findPieceAt(from, state);
    const toPiece = findPieceAt(to, state);
    if (!fromPiece)
        return;
    // 如果目标有棋子，隐藏目标棋子
    if (toPiece) {
        toPiece.hidden = true;
        toPiece.pieceEl?.setAttribute('display', 'none');
        move.capture = toPiece;
    }
    editHistory(move, state);
    movePiece(fromPiece, from, to, state);
    state.currentStep++;
    state.currentTurn = state.currentTurn === 'red' ? 'blue' : 'red';
    updateRectStroke(state);
}
function undoMove(state) {
    if (state.history.length === 0)
        return;
    const move = state.history[state.currentStep - 1];
    if (!move)
        return;
    const { from, to, capture } = move;
    // 找到需要回退的棋子
    const returnPiece = findPieceAt(to, state);
    if (!returnPiece)
        return;
    movePiece(returnPiece, to, from, state);
    // 恢复被吃掉的棋子
    if (capture) {
        capture.hidden = false;
        capture.pieceEl?.removeAttribute('display');
        state.board[to.x][to.y] = capture.type;
    }
    state.currentStep--;
    state.currentTurn = state.currentTurn === 'red' ? 'blue' : 'red';
    updateRectStroke(state);
}
function redoMove(state) {
    // 如果没有悔棋记录且没有预定义的走法，直接返回
    // 如果没有悔棋记录但有预定义的走法，从 moves 中执行下一步
    if (!state.modified && state.PGN.length > 0) {
        const nextMove = state.PGN[state.currentStep]; // 获取并移除 moves 中的第一步
        if (!nextMove)
            return;
        runMove$1(nextMove, state);
        return;
    }
    if (state.history.length <= state.currentStep)
        return;
    // 如果有悔棋记录，从 undoHistory 中执行下一步
    const moveToRedo = state.history[state.currentStep];
    if (!moveToRedo)
        return;
    runMove$1(moveToRedo, state);
}

// 数字到中文的映射（红方和黑方视角不同）
const NUMBERS_RED = ['一', '二', '三', '四', '五', '六', '七', '八', '九'];
const NUMBERS_BLUE = ['1', '2', '3', '4', '5', '6', '7', '8', '9'];
// 移动类型描述
const MOVE_TYPES = {
    horizontal: '平',
    forward: '进',
    backward: '退',
};
function parseSource(source) {
    const options = parseOption(source);
    // 解析源字符串，提取FEN、走法和棋盘状态
    // 1. 提取FEN（优先从提示词中提取）
    let haveFEN = false;
    let fen = source.match(/\[fen\s+"([^"]*)"\]/i)?.[1] || // 先尝试匹配[fen "xxx"]格式
        source.match(/([rnbakcpRNBAKCP1-9]+\/){9}[rnbakcpRNBAKCP1-9]+/)?.[0]; // 再尝试匹配纯FEN+回合格式
    if (!fen) {
        fen = 'rnbakabnr/9/1c5c1/p1p1p1p1p/9/9/P1P1P1P1P/1C5C1/9/RNBAKABNR';
    }
    else {
        haveFEN = true;
    }
    const board = Array.from({ length: 10 }, () => Array(9).fill(null));
    const pieces = [];
    const [position, turn] = fen.trim().split(/\s+/);
    const rows = position.split('/');
    rows.forEach((row, y) => {
        let x = 0;
        for (const char of row) {
            if (/[1-9]/.test(char)) {
                x += parseInt(char);
            }
            else if (/[a-zA-Z]/.test(char)) {
                board[x][y] = char;
                pieces.push({ type: char, position: { x, y } });
                x++;
            }
        }
    });
    const firstTurn = turn === 'b' ? 'blue' : 'red';
    // 2. 提取最后一段走法（去掉注释和换行）
    const PGNString = source.match(/\b[A-Z]\d-[A-Z]\d\b/g) || [];
    let tmpBoard = board.map((row) => [...row]);
    const PGN = PGNString.map((string) => {
        const move = parseICCS(string, tmpBoard);
        move.WXF = getWXF(move, tmpBoard);
        runMove(move, tmpBoard);
        return move;
    });
    return {
        haveFEN,
        pieces,
        board,
        PGN,
        firstTurn,
        options,
    };
}
/**
 * 从字符串中解析预定义的选项（viewOnly/rotated/showPGN）
 * @param source 输入的字符串
 * @returns 包含已解析选项的对象（仅包含匹配到的选项）
 */
function parseOption(source) {
    const options = {};
    const optionPatterns = [
        { key: 'protected', regex: /\b(protected|P)\s*[:：]\s*(true|false)\s*/i },
        { key: 'rotated', regex: /\b(rotated|r)\s*[:：]\s*(true|false)\s*/i },
        // { key: 'showPGN', regex: /\b(showPGN|s)\s*[:：]\s*(true|false)\s*/i }
    ];
    optionPatterns.forEach(({ key, regex }) => {
        const match = source.match(regex);
        if (match) {
            options[key] = match[2].toLowerCase() === 'true';
        }
    });
    return options;
}
function parseICCS(ICCS, tmpBoard) {
    // 解析 PGN 字符串为 IMove 数组
    // 解析走法，例如 "H2-D2" -> 起点和终点
    const [fromSting, toSting] = ICCS.split('-');
    const fromX = fromSting.charCodeAt(0) - 'A'.charCodeAt(0);
    const fromY = 9 - parseInt(fromSting[1]); // 修正 Y 坐标，从下往上数
    const toX = toSting.charCodeAt(0) - 'A'.charCodeAt(0);
    const toY = 9 - parseInt(toSting[1]); // 修正 Y 坐标，从下往上数
    const from = { x: fromX, y: fromY };
    const to = { x: toX, y: toY };
    const type = tmpBoard[fromX][fromY];
    if (!type) {
        return { from, to, ICCS };
    }
    return { type, from, to, ICCS };
}
/**
 * 将 { from: { x, y }, to: { x, y } } 转换为 "A0-B7" 格式
 * @param move 包含 from 和 to 的对象，例如 { from: { x: 0, y: 0 }, to: { x: 1, y: 7 } }
 * @returns 返回 "A0-B7" 格式的字符串
 */
function getICCS(move) {
    // 校验输入
    if (move.from.x == null || move.from.y == null || move.to.x == null || move.to.y == null) {
        throw new Error('Invalid move: x and y must be numbers');
    }
    // 将 x 转换为大写字母（0=A, 1=B, ..., 7=H）
    const xToLetter = (x) => {
        if (x < 0 || x > 25)
            throw new Error(`x must be between 0 and 25, got ${x}`);
        return String.fromCharCode(65 + x); // 65 = 'A' 的 ASCII 码
    };
    const fromStr = `${xToLetter(move.from.x)}${9 - move.from.y}`;
    const toStr = `${xToLetter(move.to.x)}${9 - move.to.y}`;
    return `${fromStr}-${toStr}`;
}
function getWXF(move, tmpBoard) {
    const { from, to } = move;
    const piece = tmpBoard[from.x][from.y];
    if (!piece)
        return '';
    const isRed = piece === piece.toUpperCase();
    const numbers = isRed ? NUMBERS_RED : NUMBERS_BLUE;
    const BOARD = Array.from({ length: 9 }, () => Array(10).fill(null));
    let fromx = from.x;
    let fromy = from.y;
    let tox = to.x;
    let toy = to.y;
    if (isRed) {
        for (let x = 0; x < 9; x++) {
            for (let y = 0; y < 10; y++) {
                BOARD[x][y] = tmpBoard[8 - x][9 - y];
            }
        }
        fromx = 8 - from.x;
        fromy = 9 - from.y;
        tox = 8 - to.x;
        toy = 9 - to.y;
    }
    else {
        for (let x = 0; x < 9; x++) {
            for (let y = 0; y < 10; y++) {
                BOARD[x][y] = tmpBoard[x][y];
            }
        }
    }
    // 获取起始位置描述（红方和黑方的坐标系是相反的）
    let pre = '';
    let samecol = [];
    // 检查同列是否有相同棋子
    for (let y = 0; y < 10; y++) {
        if (BOARD[fromx][y] === piece) {
            samecol.push(y);
        }
    }
    if (samecol.length === 1) {
        pre = PIECE_CHARS[piece] + numbers[fromx];
    }
    else if (samecol.length === 2) {
        const index = samecol.indexOf(fromy);
        if (index === 0) {
            pre = '后' + PIECE_CHARS[piece];
        }
        else if (index === 1) {
            pre = '前' + PIECE_CHARS[piece];
        }
    }
    else if (samecol.length === 3) {
        const index = samecol.indexOf(fromy);
        if (index === 0) {
            pre = '后' + PIECE_CHARS[piece];
        }
        else if (index === 1) {
            pre = '中' + PIECE_CHARS[piece];
        }
        else if (index === 2) {
            pre = '前' + PIECE_CHARS[piece];
        }
    }
    // 确定移动类型和距离
    let moveType;
    let dest;
    if (fromx === tox) {
        // 纵向移动
        const delta = toy - fromy;
        moveType = delta > 0 ? MOVE_TYPES.forward : MOVE_TYPES.backward;
        dest = numbers[Math.abs(delta) - 1];
    }
    else if (fromy === toy) {
        // 横向移动
        moveType = MOVE_TYPES.horizontal;
        dest = numbers[tox];
    }
    else {
        moveType = fromy < toy ? MOVE_TYPES.forward : MOVE_TYPES.backward;
        dest = numbers[tox];
    }
    return `${pre}${moveType}${dest}`;
}
function runMove(move, board) {
    const { from, to } = move;
    const piece = board[from.x][from.y];
    if (!piece)
        return;
    board[to.x][to.y] = piece;
    board[from.x][from.y] = null;
}

function isValidMove(from, to, board) {
    // 通用校验
    if (!board)
        return false;
    const err = baseCheck(from, to, board);
    if (err)
        return false;
    const fromPiece = board[from.x][from.y];
    const toPiece = board[to.x][to.y];
    if (isSameSide(fromPiece, toPiece))
        return false;
    switch (fromPiece.toUpperCase()) {
        case 'R':
            return canRMove(from, to, board);
        case 'N':
            return canNMove(from, to, board);
        case 'B':
            return canBMove(from, to, board);
        case 'A':
            return canAMove(from, to, board);
        case 'K':
            return canKMove(from, to, board);
        case 'C':
            return canCMove(from, to, board);
        case 'P':
            return canPMove(from, to, board);
        default:
            return false;
    }
}
// 通用校验：越界、原地不动、无棋子
function baseCheck(from, to, board) {
    if (from.x < 0 ||
        from.x > 8 ||
        from.y < 0 ||
        from.y > 9 ||
        to.x < 0 ||
        to.x > 8 ||
        to.y < 0 ||
        to.y > 9)
        return 'out-of-board';
    if (from.x === to.x && from.y === to.y)
        return 'same-pos';
    if (!board[from.x][from.y])
        return 'no-piece';
    return null;
}
// 通用校验：不能吃己方
function isSameSide(fromPiece, toPiece) {
    if (!toPiece)
        return false;
    return (fromPiece === fromPiece.toUpperCase()) === (toPiece === toPiece.toUpperCase());
}
// 车
function canRMove(from, to, board) {
    if (from.x !== to.x && from.y !== to.y)
        return false;
    if (from.x === to.x) {
        const [min, max] = [from.y, to.y].sort((a, b) => a - b);
        for (let y = min + 1; y < max; y++) {
            if (board[from.x][y])
                return false;
        }
    }
    else {
        const [min, max] = [from.x, to.x].sort((a, b) => a - b);
        for (let x = min + 1; x < max; x++) {
            if (board[x][from.y])
                return false;
        }
    }
    return true;
}
// 马
function canNMove(from, to, board) {
    const dx = to.x - from.x, dy = to.y - from.y;
    if (!((Math.abs(dx) === 2 && Math.abs(dy) === 1) || (Math.abs(dx) === 1 && Math.abs(dy) === 2)))
        return false;
    if (Math.abs(dx) === 2) {
        if (board[from.x + dx / 2][from.y])
            return false;
    }
    else {
        if (board[from.x][from.y + dy / 2])
            return false;
    }
    return true;
}
// 相/象
function canBMove(from, to, board) {
    const dx = to.x - from.x, dy = to.y - from.y;
    if (Math.abs(dx) !== 2 || Math.abs(dy) !== 2)
        return false;
    const fromPiece = board[from.x][from.y];
    const isRed = fromPiece === fromPiece.toUpperCase();
    if ((isRed && to.y < 5) || (!isRed && to.y > 4))
        return false;
    if (board[from.x + dx / 2][from.y + dy / 2])
        return false;
    return true;
}
// 士/仕
function canAMove(from, to, board) {
    const dx = Math.abs(to.x - from.x), dy = Math.abs(to.y - from.y);
    if (dx !== 1 || dy !== 1)
        return false;
    const fromPiece = board[from.x][from.y];
    const isRed = fromPiece === fromPiece.toUpperCase();
    if (isRed) {
        return to.x >= 3 && to.x <= 5 && to.y >= 7 && to.y <= 9;
    }
    else {
        return to.x >= 3 && to.x <= 5 && to.y >= 0 && to.y <= 2;
    }
}
// 将/帅
function canKMove(from, to, board) {
    const dx = Math.abs(to.x - from.x), dy = Math.abs(to.y - from.y);
    if (dx + dy !== 1)
        return false;
    const fromPiece = board[from.x][from.y];
    const isRed = fromPiece === fromPiece.toUpperCase();
    if (isRed) {
        if (!(to.x >= 3 && to.x <= 5 && to.y >= 7 && to.y <= 9))
            return false;
    }
    else {
        if (!(to.x >= 3 && to.x <= 5 && to.y >= 0 && to.y <= 2))
            return false;
    }
    return true;
}
// 炮
function canCMove(from, to, board) {
    if (from.x !== to.x && from.y !== to.y)
        return false;
    let count = 0;
    if (from.x === to.x) {
        const [min, max] = [from.y, to.y].sort((a, b) => a - b);
        for (let y = min + 1; y < max; y++) {
            if (board[from.x][y])
                count++;
        }
    }
    else {
        const [min, max] = [from.x, to.x].sort((a, b) => a - b);
        for (let x = min + 1; x < max; x++) {
            if (board[x][from.y])
                count++;
        }
    }
    const toPiece = board[to.x][to.y];
    if (!toPiece) {
        return count === 0;
    }
    else {
        const fromPiece = board[from.x][from.y];
        if (isSameSide(fromPiece, toPiece))
            return false;
        return count === 1;
    }
}
// 兵/卒
function canPMove(from, to, board) {
    const fromPiece = board[from.x][from.y];
    const isRed = fromPiece === fromPiece.toUpperCase();
    const dx = to.x - from.x, dy = to.y - from.y;
    if (Math.abs(dx) + Math.abs(dy) !== 1)
        return false;
    const crossedRiver = isRed ? from.y <= 4 : from.y >= 5;
    if (isRed) {
        if (!crossedRiver) {
            return dx === 0 && dy === -1;
        }
        else {
            return (dx === 0 && dy === -1) || (dy === 0 && Math.abs(dx) === 1);
        }
    }
    else {
        if (!crossedRiver) {
            return dx === 0 && dy === 1;
        }
        else {
            return (dx === 0 && dy === 1) || (dy === 0 && Math.abs(dx) === 1);
        }
    }
}

function showMoveList(state) {
    const moveContainer = state.moveContainer;
    if (!moveContainer)
        return;
    moveContainer.empty();
    let toShow = [];
    if (state.modified) {
        toShow = state.history;
    }
    else {
        toShow = state.PGN;
    }
    toShow.forEach((move, index) => {
        let text = '';
        let cls = '';
        if (state.settings.showPGNtxt) {
            text = `${index + 1}：${move.WXF}`;
            cls = 'move-btn';
        }
        else {
            text = `${index + 1}`;
            cls = 'move-btn circle';
        }
        const btn = moveContainer.createEl('button', {
            text,
            cls,
            attr: { id: `move-btn-${index + 1}` },
        });
        if (state.settings.fontSize > 0) {
            btn.style.fontSize = `${state.settings.fontSize}px`;
        }
        if (state.settings.position === 'bottom') {
            btn.style.width = `${0.8 * state.settings.cellSize}px`;
            btn.style.height = `${0.8 * state.settings.cellSize}px`;
        }
        if (index === state.currentStep - 1) {
            btn.classList.add('active'); // 高亮当前步
        }
        btn.addEventListener('click', () => {
            const diff = index - state.currentStep + 1;
            const moveFunc = diff > 0 ? redoMove : undoMove;
            moveContainer
                .querySelector(`#move-btn-${state.currentStep}`)
                ?.classList.remove('active');
            moveContainer.querySelector(`#move-btn-${index + 1}`).classList.add('active');
            for (let i = 0; i < Math.abs(diff); i++) {
                moveFunc(state);
            }
            speak(toShow[state.currentStep - 1]);
            scrollBTN(btn, moveContainer);
        });
    });
}
function showActiveBTN(state) {
    const container = state.moveContainer;
    if (!container)
        return;
    // 移除所有已激活的按钮
    const activeButtons = container.querySelectorAll('.active');
    activeButtons.forEach((btn) => btn.classList.remove('active'));
    // 激活当前按钮
    const btnId = `move-btn-${state.currentStep}`;
    const currentBTN = container.querySelector(`#${btnId}`);
    if (!currentBTN)
        return;
    currentBTN.classList.add('active');
    scrollBTN(currentBTN, container);
}

class ConfirmModal extends obsidian.Modal {
    constructor(app, title, message, confirmText = '确认', cancelText = '取消') {
        super(app);
        this.title = title;
        this.message = message;
        this.confirmText = confirmText;
        this.cancelText = cancelText;
        this.resolvePromise = () => { };
        this.promise = new Promise((resolve) => {
            this.resolvePromise = resolve;
        });
    }
    onOpen() {
        const { contentEl } = this;
        // 标题
        contentEl.createEl('h2', { text: this.title });
        // 消息内容
        contentEl.createEl('p', { text: this.message });
        // 按钮容器
        const buttonContainer = contentEl.createDiv('modal-button-container');
        // 确认按钮（使用 Obsidian 的主色调样式）
        const confirmBtn = buttonContainer.createEl('button', {
            text: this.confirmText,
            cls: 'mod-cta', // Obsidian 的强调按钮样式
        });
        confirmBtn.addEventListener('click', () => {
            this.resolvePromise(true);
            this.close();
        });
        // 取消按钮
        const cancelBtn = buttonContainer.createEl('button', {
            text: this.cancelText,
        });
        cancelBtn.addEventListener('click', () => {
            this.resolvePromise(false);
            this.close();
        });
        // 回车键确认，ESC 键取消
        confirmBtn.focus();
        this.scope.register([], 'Enter', () => {
            this.resolvePromise(true);
            this.close();
        });
    }
    onClose() {
        const { contentEl } = this;
        contentEl.empty();
    }
}

function creatButtons(state) {
    // 创建工具栏容器
    const toolbarContainer = state.containerEl.createEl('div', {
        cls: 'toolbar-container',
    });
    toolbarContainer.classList.toggle('right', state.settings.position === 'right');
    toolbarContainer.classList.toggle('bottom', state.settings.position === 'bottom');
    const buttons = [
        { title: '重置', icon: 'refresh-cw', handler: () => onResetClick(state) },
        { title: '开局', icon: 'arrow-left-to-line', handler: () => onToStartClick(state) },
        { title: '回退', icon: 'undo-dot', handler: () => onUndoClick(state) },
        { title: '前进', icon: 'redo-dot', handler: () => onRedoClick(state) },
        { title: '终局', icon: 'arrow-right-to-line', handler: () => onToEndClick(state) },
        {
            title: '保存',
            icon: 'save',
            handler: (ev) => {
                const btn = ev.currentTarget;
                onSaveClick(state).then(() => {
                    btn.classList.toggle('saved', state.PGN.length > 0 && !state.modified);
                    btn.classList.toggle('empty', state.PGN.length === 0 && !state.modified);
                    btn.classList.toggle('unsaved', state.modified);
                });
            },
            isave: true,
        },
    ];
    for (const { title, icon, handler, isave } of buttons) {
        const btn = toolbarContainer.createEl('button', {
            attr: { title },
            cls: 'toolbar-btn',
        });
        obsidian.setIcon(btn, icon);
        // btn.style.width = `${state.settings.cellSize * 1}px`;
        // btn.style.height = `${state.settings.cellSize * 0.8}px`;
        // btn.style.fontSize = `${state.settings.cellSize * 0.8}px`;
        btn.addEventListener('click', handler);
        if (isave) {
            btn.classList.toggle('saved', state.PGN.length > 0);
            btn.classList.toggle('empty', state.PGN.length === 0);
            state.saveButton = btn;
        }
    }
    if (state.options.protected && state.saveButton) {
        state.saveButton.classList.add('protected');
        state.saveButton.style.pointerEvents = 'none';
    }
}
function onResetClick(state) {
    while (state.currentStep > 0) {
        undoMove(state); // 撤销上一步
    }
    state.history = [];
    state.saveButton?.classList.remove('unsaved');
    state.modified = false; // 重置修改状态
    showMoveList(state);
    state.currentStep = 0;
    if (state.modifiedStep === 0 && state.moveContainer) {
        state.moveContainer.scrollTo({
            top: 0,
            behavior: 'smooth',
        });
        return;
    }
    for (let i = 0; i < state.modifiedStep; i++) {
        redoMove(state);
    }
    state.modifiedStep = 0;
    state.modified = false;
    showActiveBTN(state);
}
function onToStartClick(state) {
    while (state.currentStep != 0) {
        undoMove(state);
    }
    showActiveBTN(state);
    if (state.moveContainer) {
        state.moveContainer.scrollTo({
            top: 0,
            behavior: 'smooth',
        });
    }
}
function onUndoClick(state) {
    undoMove(state);
    showActiveBTN(state);
}
function onRedoClick(state) {
    redoMove(state);
    showActiveBTN(state);
}
function onToEndClick(state) {
    if (!state.moveContainer)
        return;
    const step = state.modified ? state.history.length : state.PGN.length;
    const dif = step - state.currentStep;
    for (let i = 0; i < dif; i++) {
        redoMove(state);
    }
    showActiveBTN(state);
}
async function onSaveClick(state) {
    let message = '';
    if (state.history.length === 0 && state.PGN.length === 0) {
        new obsidian.Notice('PGN记录为空，无需保存！');
        return;
    }
    if (state.history.length === 0 && state.PGN.length > 0)
        message = '当前PGN记录不为空，是否要清空？';
    if (state.history.length > 0 && state.PGN.length === 0)
        message = '当前PGN记录为空，是否要保存历史为PGN？';
    if (state.history.length > 0 && state.PGN.length > 0)
        message = '当前PGN记录不为空，是否要覆盖保存？';
    const modal = new ConfirmModal(state.plugin.app, '确认保存', message, '保存', '取消');
    modal.open();
    const userConfirmed = await modal.promise;
    if (userConfirmed) {
        await savePGN(state);
        new obsidian.Notice('保存成功！');
    }
}
async function savePGN(state) {
    const view = state.plugin.app.workspace.getActiveViewOfType(obsidian.MarkdownView);
    if (!view)
        return;
    const file = view.file; // TFile
    if (!file)
        return;
    // 这里 this.containerEl 可能指当前实例的属性，确保 this 指向正确
    // 如果 savePGN 是类方法，建议改写为箭头函数或 bind this
    const section = state.ctx.getSectionInfo(state.containerEl);
    if (!section)
        return;
    const { lineStart, lineEnd } = section;
    const content = await state.plugin.app.vault.read(file);
    const lines = content.split('\n');
    // 明确标注类型，初始赋值时用slice保证是string[]
    let blockLines = lines.slice(lineStart, lineEnd + 1);
    if (blockLines.length < 2)
        return;
    // 1. 删除所有符合 PGN 格式的行（无论 currentStep 是多少）
    blockLines = blockLines.filter((line) => !/[A-Z]\d-[A-Z]\d/.test(line));
    // 2. 仅当 currentStep > 0 时生成并插入新的 PGN
    if (state.currentStep > 0) {
        const moves = state.history.slice(0, state.currentStep).map((move) => getICCS(move));
        const pgnLines = [];
        for (let i = 0; i < moves.length; i += 2) {
            const line = `${Math.ceil((i + 1) / 2)}. ${moves[i]} ${moves[i + 1] || ''}`.trim();
            pgnLines.push(line);
        }
        const PGN = pgnLines.join('\n');
        // 插入PGN字符串
        blockLines.splice(blockLines.length - 1, 0, PGN);
    }
    // 3. 更新文件内容（无论是否插入 PGN，都会执行清理）
    const newContent = [
        ...lines.slice(0, lineStart),
        ...blockLines,
        ...lines.slice(lineEnd + 1),
    ].join('\n');
    await state.plugin.app.vault.modify(file, newContent);
}

class XQRenderChild extends obsidian.MarkdownRenderChild {
    constructor(containerEl, ctx, source, plugin) {
        super(containerEl);
        this.options = {};
        this.haveFEN = false;
        this.PGN = [];
        this.board = [];
        this.pieces = [];
        this.boardSVG = null;
        this.boardRect = null;
        this.markedPiece = null;
        this.history = [];
        this.currentTurn = 'red'; // 新增，默认红方先手
        this.currentStep = 0;
        this.modified = false;
        this.modifiedStep = 0;
        this.toolbarContainer = null;
        this.moveContainer = null;
        this.saveButton = null;
        this.handleBoardClick = (e) => {
            const clickedPos = this.getClickedPos(e);
            if (!clickedPos)
                return; // 如果没有点击到棋盘或棋盘不存在，直接返回
            const clickedPiece = findPieceAt(clickedPos, this);
            // 你的后续逻辑
            if (!this.markedPiece) {
                // 没有标记棋子时，只能选中当前行棋方的棋子
                if (clickedPiece) {
                    const clickedIsRed = clickedPiece.type === clickedPiece.type.toUpperCase();
                    if ((this.currentTurn === 'red' && clickedIsRed) ||
                        (this.currentTurn === 'blue' && !clickedIsRed)) {
                        markPiece(clickedPiece.pieceEl);
                        this.markedPiece = clickedPiece;
                    }
                }
                return;
            }
            // 有标记棋子时，尝试走子（无论目标是空还是有棋子）
            const moveValid = isValidMove(this.markedPiece.position, clickedPos, this.board);
            if (moveValid) {
                const move = {
                    type: this.markedPiece.type,
                    from: { ...this.markedPiece.position },
                    to: { ...clickedPos },
                };
                move.WXF = getWXF(move, this.board);
                restorePiece(this.markedPiece.pieceEl);
                if (!this.modified)
                    this.modifiedStep = this.currentStep;
                this.modified = true;
                runMove$1(move, this);
                this.markedPiece = null; // 移动后取消标记
                this.saveButton?.classList.add('unsaved');
                showMoveList(this);
            }
            else {
                // 不能走，取消标记
                restorePiece(this.markedPiece.pieceEl);
                // 如果点击的是当前方棋子，重新标记
                if (clickedPiece) {
                    const clickedIsRed = clickedPiece.type === clickedPiece.type.toUpperCase();
                    if ((this.currentTurn === 'red' && clickedIsRed) ||
                        (this.currentTurn === 'blue' && !clickedIsRed)) {
                        markPiece(clickedPiece.pieceEl);
                        this.markedPiece = clickedPiece;
                        return;
                    }
                }
                this.markedPiece = null;
            }
        };
        this.plugin = plugin;
        this.settings = plugin.settings;
        this.source = source;
        this.ctx = ctx;
        this.containerEl = containerEl;
        parseSource(source); // 解析源文本
    }
    // 主函数
    onload() {
        this.plugin.renderChildren.add(this);
        this.parseSource();
        this.rend();
    }
    // 解析相关私有方法
    parseSource() {
        const { haveFEN, pieces, board, PGN, firstTurn, options } = parseSource(this.source);
        this.options = options || {};
        this.haveFEN = haveFEN;
        this.pieces = pieces;
        this.board = board;
        this.PGN = PGN;
        this.currentTurn = firstTurn;
        this.options = options || {};
    }
    rend() {
        this.settings = { ...this.plugin.settings, ...this.options }; // 从插件中获取设置
        this.rendBoard();
        this.boardSVG.addEventListener('click', this.handleBoardClick);
        creatButtons(this);
        this.autoJump();
        this.creatMoveList();
    }
    rendBoard() {
        this.containerEl.empty();
        this.containerEl.classList.add('XQ-container');
        this.containerEl.classList.toggle('right', this.settings.position === 'right');
        this.containerEl.classList.toggle('bottom', this.settings.position === 'bottom');
        // 创建棋盘容器
        const boardContainer = this.containerEl.createDiv({
            cls: `board-container ${this.settings.position}`, // 直接拼接
        });
        this.boardSVG = genBoardSVG(this.settings, this.options);
        if (this.options.rotated) {
            this.boardSVG.setAttribute('transform', 'rotate(180)');
        }
        boardContainer.prepend(this.boardSVG);
        this.boardRect = this.boardSVG.getElementById('boardRect');
        updateRectStroke(this);
        // 渲染棋子
        const piecesContainer = this.boardSVG.querySelector('#xiangqi-pieces');
        if (!piecesContainer)
            return;
        piecesContainer.empty();
        this.pieces.forEach((piece, index) => {
            const pieceEL = createPieceSvg(piece, this.settings, this.options);
            piecesContainer.appendChild(pieceEL);
            const pieceEl = piecesContainer.lastElementChild;
            if (pieceEl) {
                this.pieces[index].pieceEl = pieceEl;
                if (piece.hidden) {
                    pieceEl.setAttribute('display', 'none'); // 隐藏棋子
                }
            }
        });
    }
    getClickedPos(e) {
        if (!this.boardSVG)
            return null;
        const cellSize = this.settings.cellSize;
        const boardRect = this.boardSVG.getBoundingClientRect();
        const mouseX = e.clientX - boardRect.left;
        const mouseY = e.clientY - boardRect.top;
        let gridX = Math.round(mouseX / cellSize) - 1;
        let gridY = Math.round(mouseY / cellSize) - 1;
        if (this.options.rotated) {
            // 如果棋盘是旋转的，调整坐标
            gridX = 8 - gridX;
            gridY = 9 - gridY;
        }
        return { x: gridX, y: gridY };
    }
    autoJump() {
        switch (this.settings.autoJump) {
            case 'never':
                break;
            case 'always':
                if (this.PGN.length > 0) {
                    for (let i = 0; i < this.PGN.length; i++) {
                        redoMove(this);
                    }
                    break;
                }
            case 'auto':
                if (this.PGN.length > 0 && !this.haveFEN) {
                    this.PGN.forEach(() => redoMove(this));
                    break;
                }
                break;
        }
    }
    creatMoveList() {
        if (this.settings.showPGN) {
            this.moveContainer = this.containerEl.createEl('div', { cls: 'move-container' });
            if (this.settings.position === 'right') {
                this.moveContainer.classList.add('right');
                this.moveContainer.style.height = `${11 * this.settings.cellSize}px`;
            }
            else if (this.settings.position === 'bottom') {
                this.moveContainer.classList.add('bottom');
                this.moveContainer.style.width = `${10 * this.settings.cellSize}px`;
            }
            showMoveList(this);
            if ((this.settings.autoJump === 'auto' && !this.haveFEN) ||
                this.settings.autoJump === 'always') {
                requestAnimationFrame(() => {
                    requestAnimationFrame(() => {
                        this.moveContainer.scrollTo({
                            top: this.moveContainer.scrollHeight,
                            behavior: 'smooth',
                        });
                    });
                });
            }
        }
    }
    refresh() {
        this.rend();
    }
    // 卸载相关方法
    onunload() {
        this.plugin.renderChildren.delete(this);
    }
}

class GenFENRenderChild extends XQRenderChild {
    constructor(containerEl, ctx, source, plugin) {
        super(containerEl, ctx, source, plugin);
        // fistTurn: 'red' | 'blue' = 'red'; // 默认红方先手
        this.defaultFEN = {
            full: 'rnbakabnr/9/1c5c1/p1p1p1p1p/9/9/P1P1P1P1P/1C5C1/9/RNBAKABNR',
            empty: '4k4/9/9/9/9/9/9/9/9/4K4',
        }; // 默认选项
        this.startFEN = 'full'; // 默认选项
        this.pieceBTNs = []; // 棋子按钮
        this.handleBoardClick = (e) => {
            const clickedPos = this.getClickedPos(e);
            if (!clickedPos)
                return; // 没点到棋盘
            const clickedPiece = findPieceAt(clickedPos, this);
            // 1. 无选中则选中
            if (!this.markedPiece) {
                if (clickedPiece) {
                    markPiece(clickedPiece.pieceEl);
                    this.markedPiece = clickedPiece;
                }
                return;
            }
            // 2. 选中了按钮（从按钮拖回棋盘）
            if (this.markedPiece.hidden) {
                const markedBTN = this.getPieceBTN(this.markedPiece.type);
                // 目标格如有棋子，先吃掉
                if (clickedPiece) {
                    clickedPiece.hidden = true;
                    clickedPiece.pieceEl?.setAttribute('display', 'none');
                    this.board[clickedPiece.position.x][clickedPiece.position.y] = null;
                    const btn = this.getPieceBTN(clickedPiece.type);
                    btn?.pieces.push(clickedPiece);
                    btn?.updateStyle?.(this);
                }
                this.markedPiece.hidden = false;
                this.markedPiece.pieceEl.removeAttribute('display');
                movePiece(this.markedPiece, null, clickedPos, this);
                this.markedPiece = null;
                markedBTN?.updateStyle?.(this);
                this.pieceBTNs.forEach(b => b.updateStyle?.(this));
                return;
            }
            // 3. 再次点击同一棋子，吃回按钮
            if (this.markedPiece === clickedPiece) {
                restorePiece(this.markedPiece.pieceEl);
                this.markedPiece.hidden = true;
                this.markedPiece.pieceEl.setAttribute('display', 'none');
                if (this.markedPiece.position) {
                    this.board[this.markedPiece.position.x][this.markedPiece.position.y] = null;
                }
                const btn = this.getPieceBTN(this.markedPiece.type);
                btn?.pieces.push(this.markedPiece);
                this.markedPiece = null;
                btn?.updateStyle?.(this);
                this.pieceBTNs.forEach(b => b.updateStyle?.(this));
                return;
            }
            // 4. 移动棋子
            restorePiece(this.markedPiece.pieceEl);
            // 目标有棋子，先吃掉
            if (clickedPiece) {
                clickedPiece.hidden = true;
                clickedPiece.pieceEl?.setAttribute('display', 'none');
                this.board[clickedPiece.position.x][clickedPiece.position.y] = null;
                const btn = this.getPieceBTN(clickedPiece.type);
                btn?.pieces.push(clickedPiece);
                btn?.updateStyle?.(this);
            }
            if (this.markedPiece.position) {
                movePiece(this.markedPiece, this.markedPiece.position, clickedPos, this);
            }
            else {
                movePiece(this.markedPiece, null, clickedPos, this);
            }
            this.markedPiece = null;
            this.pieceBTNs.forEach(b => b.updateStyle?.(this));
        };
    }
    onload() {
        this.parseSource();
        this.rend();
        this.creatButtons();
    }
    parseSource() {
        this.source = this.defaultFEN[this.startFEN];
        super.parseSource();
    }
    rend() {
        this.rendBoard();
        this.boardSVG.addEventListener('click', this.handleBoardClick);
    }
    creatButtons() {
        // 创建工具栏容器
        const pieceBTNContainer = this.containerEl.createEl('div', {
            cls: 'pieceBTN-container',
        });
        pieceBTNContainer.classList.toggle('right', this.settings.position === 'right');
        pieceBTNContainer.classList.toggle('bottom', this.settings.position === 'bottom');
        // 遍历 PIECE_CHARS 中的每一个棋子，去掉 'K' 和 'k' 代表的将
        for (const piece in PIECE_CHARS) {
            const title = PIECE_CHARS[piece]; // 获取棋子的名称
            const isRed = piece === piece.toUpperCase();
            // 判断是红方（大写字母）还是黑方（小写字母），并设置不同的类名
            const colorClass = isRed ? 'red' : 'blue';
            const className = `piece-btn ${colorClass}-piece`; // 动态类名
            // 创建按钮并设置 id、title、class 等
            const btn = pieceBTNContainer.createEl('button', {
                text: title, // 按钮文本
                attr: { id: `piece-${piece}` }, // 设置 id 方便识别点击对象
                cls: className,
            });
            btn.pieces = []; // 初始化 pieces 数组，用于存储被吃掉的棋子
            const { red, blue } = themes[this.settings.theme];
            btn.style.backgroundColor = isRed ? red : blue;
            btn.updateStyle = function (state) {
                this.classList.toggle('empty', this.pieces.length === 0);
                const isActive = (state.markedPiece?.hidden ?? false) && state.markedPiece?.type === piece;
                this.classList.toggle('active', isActive); // 如果有标记的棋子，设置背景色为红色
            };
            // btn.style.backgroundColor = colorClass;  // 设置背景色
            // 绑定点击事件
            btn.addEventListener('click', (e) => this.onPieceBTNClick(e));
            btn.updateStyle(this); // 初始化按钮样式
            this.pieceBTNs.push(btn); // 将按钮添加到 pieeceBTNs 数组中
        }
        // 按钮定义，isave 标识保存按钮
        const buttons = [
            { title: '清空', icon: 'trash', handler: () => this.onEmptyBTNClick(this) },
            { title: '填满', icon: 'rotate-ccw', handler: () => this.onResetBTNClick(this) },
            { title: '保存', icon: 'save', handler: () => this.onSaveClick(this), isave: true },
        ];
        // 假设 toolbarContainer 是按钮容器，state 是当前状态对象
        const toolbarContainer = this.containerEl.createEl('div', {
            cls: 'getFENT-toolbar-container',
        });
        for (const { title, icon, handler, isave } of buttons) {
            const btn = toolbarContainer.createEl('button', {
                attr: { title },
                cls: 'toolbar-btn',
            });
            obsidian.setIcon(btn, icon);
            btn.addEventListener('click', handler);
        }
        // ==============单选框===============
        const radioOptions = [
            { value: 'red', label: '红先', checked: true },
            { value: 'black', label: '黑先', checked: false },
        ];
        const radioContainer = toolbarContainer.createDiv({ cls: 'radio-group' });
        for (const { value, label, checked } of radioOptions) {
            const wrapper = radioContainer.createEl('label', { cls: 'radio-label' });
            wrapper.style.marginRight = '1rem';
            const input = document.createElement('input');
            input.type = 'radio';
            input.name = 'first-move'; // **同名，确保互斥**
            input.value = value;
            input.checked = checked;
            wrapper.append(input, ' ' + label);
            input.addEventListener('change', () => {
                if (input.checked) {
                    console.log('选中了先手:', value);
                }
            });
        }
    }
    getPieceBTN(pieceType) {
        return this.pieceBTNs.find((btn) => btn.id === `piece-${pieceType}`);
    }
    onPieceBTNClick(e) {
        if (this.markedPiece?.hidden) {
            const btn = this.getPieceBTN(this.markedPiece.type);
            btn.pieces.push(this.markedPiece); // 将标记的棋子添加到对应按钮中
            this.markedPiece = null; // 取消标记
        }
        const btn = e.currentTarget;
        if (btn.pieces.length > 0) {
            // 如果已经有标记的棋子，先取消标记
            this.markedPiece = btn.pieces.pop() || null;
        }
        // 关键：所有按钮都刷新样式
        this.pieceBTNs.forEach((b) => b.updateStyle?.(this));
    }
    onEmptyBTNClick(state) {
        state.pieces.forEach((piece) => {
            if (piece.hidden)
                return;
            piece.hidden = true;
            piece.pieceEl?.setAttribute('display', 'none');
            const btn = state.getPieceBTN(piece.type);
            if (!btn)
                return;
            btn.pieces.push(piece);
            btn.updateStyle?.(this);
        });
    }
    onResetBTNClick(state) {
        state.pieces = [];
        this.pieceBTNs = [];
        state.parseSource();
        state.rend();
        state.creatButtons();
    }
    async onSaveClick(state) {
        console.log(this.board);
        // 1. 生成 FEN
        const fen = this.generateFENFromBoard(this.board);
        console.log(fen, 'fen');
        // 2. 获取当前 markdown 编辑器视图和文件
        const view = state.plugin.app.workspace.getActiveViewOfType(obsidian.MarkdownView);
        if (!view)
            return;
        const file = view.file;
        if (!file)
            return;
        // 3. 获取当前代码块的 section 信息
        const section = state.ctx.getSectionInfo(state.containerEl);
        if (!section)
            return;
        const { lineStart, lineEnd } = section;
        // 4. 读取文件内容并分行
        const content = await state.plugin.app.vault.read(file);
        const lines = content.split('\n');
        // 5. 获取代码块内容行
        let blockLines = lines.slice(lineStart, lineEnd + 1);
        if (blockLines.length < 2)
            return;
        // 6. 判断并替换代码块类型为 xiangqi，内容为 FEN
        // 只替换代码块首尾行，内容只保留 FEN
        blockLines[0] = blockLines[0].replace(/^```xq\b.*$/, '```xiangqi');
        blockLines = [blockLines[0], fen, '```'];
        // 7. 拼接新内容并写回
        const newContent = [
            ...lines.slice(0, lineStart),
            ...blockLines,
            ...lines.slice(lineEnd + 1),
        ].join('\n');
        await state.plugin.app.vault.modify(file, newContent);
        new obsidian.Notice('FEN已保存到代码块');
    }
    generateFENFromBoard(board) {
        // board[x][y]，x为列，y为行
        const rows = [];
        for (let y = 0; y < 10; y++) {
            let fenRow = '';
            let empty = 0;
            for (let x = 0; x < 9; x++) {
                const cell = board[x][y];
                if (!cell) {
                    empty++;
                }
                else {
                    if (empty > 0) {
                        fenRow += empty;
                        empty = 0;
                    }
                    fenRow += cell;
                }
            }
            if (empty > 0)
                fenRow += empty;
            rows.push(fenRow);
        }
        return rows.join('/');
    }
}

const DEFAULT_SETTINGS = {
    position: 'right',
    theme: 'dark',
    autoTheme: true,
    cellSize: 50,
    fontSize: -15,
    autoJump: 'auto',
    enableSpeech: true,
    showPGN: true,
    showPGNtxt: true,
    viewOnly: false,
    rotated: false,
};
class XQSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        const settings = this.plugin.settings;
        let { containerEl } = this;
        containerEl.empty();
        new obsidian.Setting(containerEl)
            .setName('主题')
            .setDesc('设置棋盘主题.')
            .addDropdown((dropdown) => {
            dropdown.addOptions({
                light: '浅色',
                dark: '深色',
                auto: '跟随',
            });
            dropdown
                .setValue(settings.autoTheme ? 'auto' : settings.theme)
                .onChange((theme) => {
                if (theme === 'auto') {
                    settings.autoTheme = true;
                    const isDarkMode = () => document.body.classList.contains('theme-dark');
                    settings.theme = isDarkMode() ? 'dark' : 'light'; // 自动主题时默认使用深色
                }
                else {
                    settings.autoTheme = false;
                    settings.theme = theme;
                }
                this.plugin.refresh();
            });
        });
        new obsidian.Setting(containerEl)
            .setName('按钮布局')
            .setDesc('设置按钮的位置.')
            .addDropdown((dropdown) => {
            dropdown.addOptions({
                right: '右侧',
                bottom: '底部',
            });
            dropdown.setValue(settings.position).onChange((position) => {
                settings.position = position;
                this.plugin.refresh();
            });
        });
        new obsidian.Setting(containerEl)
            .setName('界面大小')
            .setDesc('调整棋盘大小')
            .addSlider((slider) => {
            const controlEl = slider.sliderEl.parentElement;
            // 创建显示滑块值的标签
            const valueLabel = createEl('span', {
                text: Math.abs(settings.cellSize).toString(),
            });
            valueLabel.style.minWidth = '2.5em'; // 防止数字宽度抖动
            controlEl.prepend(valueLabel);
            slider
                .setLimits(15, 100, 1)
                .setValue(settings.cellSize) // 默认值
                .onChange((value) => {
                settings.cellSize = value;
                valueLabel.textContent = value.toString();
                this.plugin.refresh();
            });
        });
        containerEl.createEl('h2', { text: '着法列表' });
        new obsidian.Setting(containerEl)
            .setName('启用着法列表')
            .setDesc('是否显示棋谱')
            .addToggle((toggle) => toggle.setValue(settings.showPGN).onChange((value) => {
            settings.showPGN = value;
            this.plugin.refresh();
        }));
        new obsidian.Setting(containerEl)
            .setName('显示着法文字')
            .setDesc('是否显示棋谱着法文字')
            .addToggle((toggle) => toggle.setValue(settings.showPGNtxt).onChange((value) => {
            settings.showPGNtxt = value;
            this.plugin.refresh();
            this.display();
        }));
        if (settings.showPGNtxt) {
            new obsidian.Setting(containerEl)
                .setName('着法字体调整')
                .setDesc('开启自动或手动调节')
                .addToggle((toggle) => {
                // 根据 settings.fontSize 初始判断自动模式
                toggle.setValue(settings.fontSize < 0);
                const controlEl = toggle.toggleEl.parentElement;
                controlEl.style.display = 'flex';
                controlEl.style.alignItems = 'center';
                controlEl.style.gap = '1em';
                // 创建滑块
                const rangeSlider = createEl('input', {
                    type: 'range',
                    attr: {
                        min: '5',
                        max: '25',
                        value: Math.abs(settings.fontSize).toString(),
                    },
                });
                rangeSlider.addClass('slider');
                rangeSlider.addClass('mod-range');
                rangeSlider.style.flex = '1';
                // 创建显示滑块值的标签
                const valueLabel = createEl('span', {
                    text: Math.abs(settings.fontSize).toString(),
                });
                valueLabel.style.minWidth = '2.5em'; // 防止数字宽度抖动
                // 根据 toggle 初始值显示或隐藏滑块和数字
                if (settings.fontSize < 0) {
                    rangeSlider.style.display = 'none';
                    valueLabel.style.display = 'none';
                }
                else {
                    rangeSlider.style.display = 'inline-block';
                    valueLabel.style.display = 'inline-block';
                }
                // 插入滑块和标签到 toggle 左侧
                controlEl.prepend(valueLabel);
                controlEl.prepend(rangeSlider);
                // toggle 切换时显示或隐藏滑块和标签，同时同步 settings.fontSize
                toggle.onChange((value) => {
                    if (value) {
                        // 自动模式，字体大小为负数
                        settings.fontSize = -Math.abs(settings.fontSize);
                        rangeSlider.style.display = 'none';
                        valueLabel.style.display = 'none';
                    }
                    else {
                        // 手动模式，字体大小为正数
                        settings.fontSize = Math.abs(settings.fontSize);
                        rangeSlider.style.display = 'inline-block';
                        valueLabel.style.display = 'inline-block';
                    }
                    this.plugin.refresh();
                });
                // 滑块拖动时更新 settings.fontSize 和显示标签
                rangeSlider.addEventListener('input', (e) => {
                    const val = Number(e.target.value);
                    settings.fontSize = val;
                    valueLabel.textContent = val.toString();
                });
            });
        }
        new obsidian.Setting(containerEl)
            .setName('开局跳转')
            .setDesc('初始渲染时默认跳转至终局')
            .addDropdown((dropdown) => {
            dropdown
                .addOptions({
                never: '从不',
                always: '始终',
                auto: '无FEN即正常开局时',
            })
                .setValue(settings.autoJump)
                .onChange(async (value) => {
                settings.autoJump = value;
            });
        });
        if (window.speechSynthesis) {
            new obsidian.Setting(containerEl)
                .setName('朗读着法')
                .setDesc('是否朗读棋谱走法')
                .addToggle((toggle) => toggle.setValue(settings.enableSpeech).onChange((value) => {
                settings.enableSpeech = value;
            }));
        }
    }
    async hide() {
        this.plugin.saveSettings();
        this.plugin.refresh();
    }
}

class XQPlugin extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        this.settings = DEFAULT_SETTINGS;
        this.renderChildren = new Set();
    }
    async onload() {
        await this.loadSettings();
        this.addSettingTab(new XQSettingTab(this.app, this));
        const codeBlockNames = ['xiangqi', '象棋'];
        for (const name of codeBlockNames) {
            this.registerMarkdownCodeBlockProcessor(name, (source, el, ctx) => {
                const renderChild = new XQRenderChild(el, ctx, source, this);
                ctx.addChild(renderChild);
                this.renderChildren.add(renderChild);
            });
        }
        this.registerMarkdownCodeBlockProcessor('xq', (source, el, ctx) => {
            const renderChild = new GenFENRenderChild(el, ctx, source, this);
            ctx.addChild(renderChild);
        });
        this.registerEvent(this.app.workspace.on('css-change', () => {
            // 主题已改变
            if (this.settings.autoTheme) {
                const isDarkMode = () => document.body.classList.contains('theme-dark');
                this.settings.theme = isDarkMode() ? 'dark' : 'light'; // 自动主题时默认使用深色
                this.refresh();
            }
        }));
    }
    async loadSettings() {
        const savedData = await this.loadData();
        this.settings = {
            ...DEFAULT_SETTINGS,
            ...savedData,
        };
    }
    async saveSettings() {
        await this.saveData(this.settings);
    }
    refresh() {
        this.renderChildren.forEach((child) => {
            child.refresh();
        });
    }
}

module.exports = XQPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
